
BluePill_NEO6_GPS_Leech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008214  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08008328  08008328  00009328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800884c  0800884c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008854  08008854  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800885c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001d4  08008a30  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08008a30  0000a46c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000812f  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1b  00000000  00000000  0001232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00013d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b1  00000000  00000000  000144d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d69  00000000  00000000  00014a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009538  00000000  00000000  0002c7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084031  00000000  00000000  00035d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9d53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  000b9d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000bd264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800830c 	.word	0x0800830c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800830c 	.word	0x0800830c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	4903      	ldr	r1, [pc, #12]	@ (80010f0 <GPS_Init+0x14>)
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <GPS_Init+0x18>)
 80010e6:	f001 fc53 	bl	8002990 <HAL_UART_Receive_IT>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001f0 	.word	0x200001f0
 80010f4:	200002d0 	.word	0x200002d0

080010f8 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <GPS_UART_CallBack+0x60>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b0a      	cmp	r3, #10
 8001102:	d010      	beq.n	8001126 <GPS_UART_CallBack+0x2e>
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <GPS_UART_CallBack+0x64>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <GPS_UART_CallBack+0x64>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	b2d1      	uxtb	r1, r2
 8001116:	4a11      	ldr	r2, [pc, #68]	@ (800115c <GPS_UART_CallBack+0x64>)
 8001118:	7011      	strb	r1, [r2, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <GPS_UART_CallBack+0x60>)
 800111e:	7819      	ldrb	r1, [r3, #0]
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <GPS_UART_CallBack+0x68>)
 8001122:	5499      	strb	r1, [r3, r2]
 8001124:	e010      	b.n	8001148 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001126:	480e      	ldr	r0, [pc, #56]	@ (8001160 <GPS_UART_CallBack+0x68>)
 8001128:	f000 f81e 	bl	8001168 <GPS_validate>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001132:	480b      	ldr	r0, [pc, #44]	@ (8001160 <GPS_UART_CallBack+0x68>)
 8001134:	f000 f87a 	bl	800122c <GPS_parse>
		rx_index = 0;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <GPS_UART_CallBack+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	2100      	movs	r1, #0
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <GPS_UART_CallBack+0x68>)
 8001144:	f003 f915 	bl	8004372 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	4903      	ldr	r1, [pc, #12]	@ (8001158 <GPS_UART_CallBack+0x60>)
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <GPS_UART_CallBack+0x6c>)
 800114e:	f001 fc1f 	bl	8002990 <HAL_UART_Receive_IT>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f0 	.word	0x200001f0
 800115c:	20000274 	.word	0x20000274
 8001160:	200001f4 	.word	0x200001f4
 8001164:	200002d0 	.word	0x200002d0

08001168 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b24      	cmp	r3, #36	@ 0x24
 8001182:	d103      	bne.n	800118c <GPS_validate+0x24>
        i++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800118a:	e00c      	b.n	80011a6 <GPS_validate+0x3e>
        return 0;
 800118c:	2300      	movs	r3, #0
 800118e:	e047      	b.n	8001220 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4053      	eors	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        i++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <GPS_validate+0x5c>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80011bc:	d002      	beq.n	80011c4 <GPS_validate+0x5c>
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b4a      	cmp	r3, #74	@ 0x4a
 80011c2:	dde5      	ble.n	8001190 <GPS_validate+0x28>
    }

    if(i >= 75){
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b4a      	cmp	r3, #74	@ 0x4a
 80011c8:	dd01      	ble.n	80011ce <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80011ca:	2300      	movs	r3, #0
 80011cc:	e028      	b.n	8001220 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80011d8:	d119      	bne.n	800120e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3302      	adds	r3, #2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	490a      	ldr	r1, [pc, #40]	@ (8001228 <GPS_validate+0xc0>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 f824 	bl	800424c <siprintf>
    return((checkcalcstr[0] == check[0])
 8001204:	7a3a      	ldrb	r2, [r7, #8]
 8001206:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001208:	429a      	cmp	r2, r3
 800120a:	d108      	bne.n	800121e <GPS_validate+0xb6>
 800120c:	e001      	b.n	8001212 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800120e:	2300      	movs	r3, #0
 8001210:	e006      	b.n	8001220 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001212:	7a7a      	ldrb	r2, [r7, #9]
 8001214:	7b7b      	ldrb	r3, [r7, #13]
 8001216:	429a      	cmp	r2, r3
 8001218:	d101      	bne.n	800121e <GPS_validate+0xb6>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <GPS_validate+0xb8>
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08008328 	.word	0x08008328

0800122c <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af08      	add	r7, sp, #32
 8001232:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001234:	2206      	movs	r2, #6
 8001236:	4946      	ldr	r1, [pc, #280]	@ (8001350 <GPS_parse+0x124>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f003 f8a2 	bl	8004382 <strncmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d12f      	bne.n	80012a4 <GPS_parse+0x78>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001244:	4b43      	ldr	r3, [pc, #268]	@ (8001354 <GPS_parse+0x128>)
 8001246:	9307      	str	r3, [sp, #28]
 8001248:	4b43      	ldr	r3, [pc, #268]	@ (8001358 <GPS_parse+0x12c>)
 800124a:	9306      	str	r3, [sp, #24]
 800124c:	4b43      	ldr	r3, [pc, #268]	@ (800135c <GPS_parse+0x130>)
 800124e:	9305      	str	r3, [sp, #20]
 8001250:	4b43      	ldr	r3, [pc, #268]	@ (8001360 <GPS_parse+0x134>)
 8001252:	9304      	str	r3, [sp, #16]
 8001254:	4b43      	ldr	r3, [pc, #268]	@ (8001364 <GPS_parse+0x138>)
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <GPS_parse+0x13c>)
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b43      	ldr	r3, [pc, #268]	@ (800136c <GPS_parse+0x140>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <GPS_parse+0x144>)
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4b43      	ldr	r3, [pc, #268]	@ (8001374 <GPS_parse+0x148>)
 8001266:	4a44      	ldr	r2, [pc, #272]	@ (8001378 <GPS_parse+0x14c>)
 8001268:	4944      	ldr	r1, [pc, #272]	@ (800137c <GPS_parse+0x150>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f003 f810 	bl	8004290 <siscanf>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	dd68      	ble.n	8001348 <GPS_parse+0x11c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001276:	4b42      	ldr	r3, [pc, #264]	@ (8001380 <GPS_parse+0x154>)
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	4a41      	ldr	r2, [pc, #260]	@ (8001380 <GPS_parse+0x154>)
 800127c:	7e12      	ldrb	r2, [r2, #24]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f8a1 	bl	80013c8 <GPS_nmea_to_dec>
 8001286:	4603      	mov	r3, r0
 8001288:	4a3d      	ldr	r2, [pc, #244]	@ (8001380 <GPS_parse+0x154>)
 800128a:	6053      	str	r3, [r2, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800128c:	4b3c      	ldr	r3, [pc, #240]	@ (8001380 <GPS_parse+0x154>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a3b      	ldr	r2, [pc, #236]	@ (8001380 <GPS_parse+0x154>)
 8001292:	7e52      	ldrb	r2, [r2, #25]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f896 	bl	80013c8 <GPS_nmea_to_dec>
 800129c:	4603      	mov	r3, r0
 800129e:	4a38      	ldr	r2, [pc, #224]	@ (8001380 <GPS_parse+0x154>)
 80012a0:	6013      	str	r3, [r2, #0]
    		return;
 80012a2:	e051      	b.n	8001348 <GPS_parse+0x11c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80012a4:	2206      	movs	r2, #6
 80012a6:	4937      	ldr	r1, [pc, #220]	@ (8001384 <GPS_parse+0x158>)
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f003 f86a 	bl	8004382 <strncmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d114      	bne.n	80012de <GPS_parse+0xb2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80012b4:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <GPS_parse+0x15c>)
 80012b6:	9305      	str	r3, [sp, #20]
 80012b8:	4b34      	ldr	r3, [pc, #208]	@ (800138c <GPS_parse+0x160>)
 80012ba:	9304      	str	r3, [sp, #16]
 80012bc:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <GPS_parse+0x164>)
 80012be:	9303      	str	r3, [sp, #12]
 80012c0:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <GPS_parse+0x13c>)
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	4b29      	ldr	r3, [pc, #164]	@ (800136c <GPS_parse+0x140>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <GPS_parse+0x144>)
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <GPS_parse+0x148>)
 80012ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001378 <GPS_parse+0x14c>)
 80012d0:	4930      	ldr	r1, [pc, #192]	@ (8001394 <GPS_parse+0x168>)
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f002 ffdc 	bl	8004290 <siscanf>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	e034      	b.n	8001348 <GPS_parse+0x11c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80012de:	2206      	movs	r2, #6
 80012e0:	492d      	ldr	r1, [pc, #180]	@ (8001398 <GPS_parse+0x16c>)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f003 f84d 	bl	8004382 <strncmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d110      	bne.n	8001310 <GPS_parse+0xe4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80012ee:	4b2b      	ldr	r3, [pc, #172]	@ (800139c <GPS_parse+0x170>)
 80012f0:	9303      	str	r3, [sp, #12]
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <GPS_parse+0x14c>)
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <GPS_parse+0x13c>)
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <GPS_parse+0x140>)
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <GPS_parse+0x144>)
 8001300:	4a1c      	ldr	r2, [pc, #112]	@ (8001374 <GPS_parse+0x148>)
 8001302:	4927      	ldr	r1, [pc, #156]	@ (80013a0 <GPS_parse+0x174>)
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f002 ffc3 	bl	8004290 <siscanf>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	e01b      	b.n	8001348 <GPS_parse+0x11c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001310:	2206      	movs	r2, #6
 8001312:	4924      	ldr	r1, [pc, #144]	@ (80013a4 <GPS_parse+0x178>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f003 f834 	bl	8004382 <strncmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d113      	bne.n	8001348 <GPS_parse+0x11c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <GPS_parse+0x17c>)
 8001322:	9305      	str	r3, [sp, #20]
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <GPS_parse+0x180>)
 8001326:	9304      	str	r3, [sp, #16]
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <GPS_parse+0x184>)
 800132a:	9303      	str	r3, [sp, #12]
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <GPS_parse+0x164>)
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <GPS_parse+0x188>)
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <GPS_parse+0x18c>)
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <GPS_parse+0x190>)
 800133a:	4a21      	ldr	r2, [pc, #132]	@ (80013c0 <GPS_parse+0x194>)
 800133c:	4921      	ldr	r1, [pc, #132]	@ (80013c4 <GPS_parse+0x198>)
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f002 ffa6 	bl	8004290 <siscanf>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
            return;
    }
}
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	08008330 	.word	0x08008330
 8001354:	200002a4 	.word	0x200002a4
 8001358:	200002a0 	.word	0x200002a0
 800135c:	2000029c 	.word	0x2000029c
 8001360:	20000298 	.word	0x20000298
 8001364:	20000294 	.word	0x20000294
 8001368:	20000291 	.word	0x20000291
 800136c:	20000284 	.word	0x20000284
 8001370:	20000290 	.word	0x20000290
 8001374:	20000288 	.word	0x20000288
 8001378:	2000028c 	.word	0x2000028c
 800137c:	08008338 	.word	0x08008338
 8001380:	20000278 	.word	0x20000278
 8001384:	08008360 	.word	0x08008360
 8001388:	200002b0 	.word	0x200002b0
 800138c:	200002ac 	.word	0x200002ac
 8001390:	200002a8 	.word	0x200002a8
 8001394:	08008368 	.word	0x08008368
 8001398:	08008388 	.word	0x08008388
 800139c:	200002b4 	.word	0x200002b4
 80013a0:	08008390 	.word	0x08008390
 80013a4:	080083ac 	.word	0x080083ac
 80013a8:	200002cc 	.word	0x200002cc
 80013ac:	200002c8 	.word	0x200002c8
 80013b0:	200002c5 	.word	0x200002c5
 80013b4:	200002c4 	.word	0x200002c4
 80013b8:	200002c0 	.word	0x200002c0
 80013bc:	200002bc 	.word	0x200002bc
 80013c0:	200002b8 	.word	0x200002b8
 80013c4:	080083b4 	.word	0x080083b4

080013c8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80013d4:	491b      	ldr	r1, [pc, #108]	@ (8001444 <GPS_nmea_to_dec+0x7c>)
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fd88 	bl	8000eec <__aeabi_fdiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe20 	bl	8001024 <__aeabi_f2iz>
 80013e4:	4603      	mov	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2264      	movs	r2, #100	@ 0x64
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fc73 	bl	8000cdc <__aeabi_i2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fbb8 	bl	8000b70 <__aeabi_fsub>
 8001400:	4603      	mov	r3, r0
 8001402:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 8001404:	4910      	ldr	r1, [pc, #64]	@ (8001448 <GPS_nmea_to_dec+0x80>)
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff fd70 	bl	8000eec <__aeabi_fdiv>
 800140c:	4603      	mov	r3, r0
 800140e:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 8001410:	6938      	ldr	r0, [r7, #16]
 8001412:	f7ff fc63 	bl	8000cdc <__aeabi_i2f>
 8001416:	4603      	mov	r3, r0
 8001418:	4619      	mov	r1, r3
 800141a:	68b8      	ldr	r0, [r7, #8]
 800141c:	f7ff fbaa 	bl	8000b74 <__addsf3>
 8001420:	4603      	mov	r3, r0
 8001422:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	2b53      	cmp	r3, #83	@ 0x53
 8001428:	d002      	beq.n	8001430 <GPS_nmea_to_dec+0x68>
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2b57      	cmp	r3, #87	@ 0x57
 800142e:	d103      	bne.n	8001438 <GPS_nmea_to_dec+0x70>
        decimal *= -1;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001436:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 8001438:	697b      	ldr	r3, [r7, #20]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	42c80000 	.word	0x42c80000
 8001448:	42700000 	.word	0x42700000

0800144c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) GPS_UART_CallBack();
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_UART_RxCpltCallback+0x1c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_UART_RxCpltCallback+0x14>
 800145c:	f7ff fe4c 	bl	80010f8 <GPS_UART_CallBack>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002d0 	.word	0x200002d0

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fa70 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001474:	f000 f810 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001478:	f000 f87e 	bl	8001578 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800147c:	f000 f852 	bl	8001524 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2110      	movs	r1, #16
 8001484:	4803      	ldr	r0, [pc, #12]	@ (8001494 <main+0x28>)
 8001486:	f000 fe0b 	bl	80020a0 <HAL_GPIO_WritePin>
  GPS_Init();
 800148a:	f7ff fe27 	bl	80010dc <GPS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800148e:	bf00      	nop
 8001490:	e7fd      	b.n	800148e <main+0x22>
 8001492:	bf00      	nop
 8001494:	40010800 	.word	0x40010800

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b090      	sub	sp, #64	@ 0x40
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	2228      	movs	r2, #40	@ 0x28
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 ff63 	bl	8004372 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fdf5 	bl	80020d0 <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014ec:	f000 f882 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f4:	2302      	movs	r3, #2
 80014f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2102      	movs	r1, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f001 f862 	bl	80025d4 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001516:	f000 f86d 	bl	80015f4 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3740      	adds	r7, #64	@ 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_USART1_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_USART1_UART_Init+0x4c>)
 800155c:	f001 f9c8 	bl	80028f0 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 f845 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002d0 	.word	0x200002d0
 8001574:	40013800 	.word	0x40013800

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <MX_GPIO_Init+0x74>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a16      	ldr	r2, [pc, #88]	@ (80015ec <MX_GPIO_Init+0x74>)
 8001592:	f043 0320 	orr.w	r3, r3, #32
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_GPIO_Init+0x74>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_GPIO_Init+0x74>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <MX_GPIO_Init+0x74>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_GPIO_Init+0x74>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2110      	movs	r1, #16
 80015c0:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <MX_GPIO_Init+0x78>)
 80015c2:	f000 fd6d 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015c6:	2310      	movs	r3, #16
 80015c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_GPIO_Init+0x78>)
 80015de:	f000 fbdb 	bl	8001d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010800 	.word	0x40010800

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <Error_Handler+0x8>

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_MspInit+0x5c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <HAL_MspInit+0x5c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_MspInit+0x5c>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_MspInit+0x5c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <HAL_MspInit+0x5c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_MspInit+0x5c>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_MspInit+0x60>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_MspInit+0x60>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000

08001664 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a20      	ldr	r2, [pc, #128]	@ (8001700 <HAL_UART_MspInit+0x9c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d139      	bne.n	80016f8 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001684:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 800168a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a18      	ldr	r2, [pc, #96]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4619      	mov	r1, r3
 80016c8:	480f      	ldr	r0, [pc, #60]	@ (8001708 <HAL_UART_MspInit+0xa4>)
 80016ca:	f000 fb65 	bl	8001d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <HAL_UART_MspInit+0xa4>)
 80016e4:	f000 fb58 	bl	8001d98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2025      	movs	r0, #37	@ 0x25
 80016ee:	f000 fa6a 	bl	8001bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f2:	2025      	movs	r0, #37	@ 0x25
 80016f4:	f000 fa83 	bl	8001bfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40013800 	.word	0x40013800
 8001704:	40021000 	.word	0x40021000
 8001708:	40010800 	.word	0x40010800

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 f940 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <USART1_IRQHandler+0x10>)
 800176a:	f001 f937 	bl	80029dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002d0 	.word	0x200002d0

08001778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <_kill>:

int _kill(int pid, int sig)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001790:	f002 fe54 	bl	800443c <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	2216      	movs	r2, #22
 8001798:	601a      	str	r2, [r3, #0]
  return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_exit>:

void _exit (int status)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ae:	f04f 31ff 	mov.w	r1, #4294967295
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffe7 	bl	8001786 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <_exit+0x12>

080017bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e00a      	b.n	80017e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ce:	f3af 8000 	nop.w
 80017d2:	4601      	mov	r1, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf0      	blt.n	80017ce <_read+0x12>
  }

  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e009      	b.n	800181c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf1      	blt.n	8001808 <_write+0x12>
  }
  return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_close>:

int _close(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001854:	605a      	str	r2, [r3, #4]
  return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <_isatty>:

int _isatty(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
	...

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f002 fdbc 	bl	800443c <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20005000 	.word	0x20005000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	20000318 	.word	0x20000318
 80018f8:	20000470 	.word	0x20000470

080018fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001908:	f7ff fff8 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800190c:	480b      	ldr	r0, [pc, #44]	@ (800193c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800190e:	490c      	ldr	r1, [pc, #48]	@ (8001940 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001910:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001924:	4c09      	ldr	r4, [pc, #36]	@ (800194c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001932:	f002 fd89 	bl	8004448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001936:	f7ff fd99 	bl	800146c <main>
  bx lr
 800193a:	4770      	bx	lr
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001944:	0800885c 	.word	0x0800885c
  ldr r2, =_sbss
 8001948:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800194c:	2000046c 	.word	0x2000046c

08001950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_2_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_Init+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_Init+0x28>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f923 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fe46 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40022000 	.word	0x40022000

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f93b 	bl	8001c1a <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f903 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_IncTick+0x1c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_IncTick+0x20>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a03      	ldr	r2, [pc, #12]	@ (8001a00 <HAL_IncTick+0x20>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000008 	.word	0x20000008
 8001a00:	2000031c 	.word	0x2000031c

08001a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b02      	ldr	r3, [pc, #8]	@ (8001a14 <HAL_GetTick+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	2000031c 	.word	0x2000031c

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4906      	ldr	r1, [pc, #24]	@ (8001ab0 <__NVIC_EnableIRQ+0x34>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	@ (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff90 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff2d 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff42 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff90 	bl	8001b08 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5f 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff35 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d008      	beq.n	8001c5c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e020      	b.n	8001c9e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d005      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e051      	b.n	8001d70 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 020e 	bic.w	r2, r2, #14
 8001cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <HAL_DMA_Abort_IT+0xd4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d029      	beq.n	8001d4a <HAL_DMA_Abort_IT+0xa2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a21      	ldr	r2, [pc, #132]	@ (8001d80 <HAL_DMA_Abort_IT+0xd8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d022      	beq.n	8001d46 <HAL_DMA_Abort_IT+0x9e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1f      	ldr	r2, [pc, #124]	@ (8001d84 <HAL_DMA_Abort_IT+0xdc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01a      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x98>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d88 <HAL_DMA_Abort_IT+0xe0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d012      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x92>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1c      	ldr	r2, [pc, #112]	@ (8001d8c <HAL_DMA_Abort_IT+0xe4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00a      	beq.n	8001d34 <HAL_DMA_Abort_IT+0x8c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_DMA_Abort_IT+0xe8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d102      	bne.n	8001d2e <HAL_DMA_Abort_IT+0x86>
 8001d28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d2c:	e00e      	b.n	8001d4c <HAL_DMA_Abort_IT+0xa4>
 8001d2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d32:	e00b      	b.n	8001d4c <HAL_DMA_Abort_IT+0xa4>
 8001d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d38:	e008      	b.n	8001d4c <HAL_DMA_Abort_IT+0xa4>
 8001d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3e:	e005      	b.n	8001d4c <HAL_DMA_Abort_IT+0xa4>
 8001d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d44:	e002      	b.n	8001d4c <HAL_DMA_Abort_IT+0xa4>
 8001d46:	2310      	movs	r3, #16
 8001d48:	e000      	b.n	8001d4c <HAL_DMA_Abort_IT+0xa4>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4a11      	ldr	r2, [pc, #68]	@ (8001d94 <HAL_DMA_Abort_IT+0xec>)
 8001d4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
    } 
  }
  return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020008 	.word	0x40020008
 8001d80:	4002001c 	.word	0x4002001c
 8001d84:	40020030 	.word	0x40020030
 8001d88:	40020044 	.word	0x40020044
 8001d8c:	40020058 	.word	0x40020058
 8001d90:	4002006c 	.word	0x4002006c
 8001d94:	40020000 	.word	0x40020000

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	@ 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e169      	b.n	8002080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8158 	bne.w	800207a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a9a      	ldr	r2, [pc, #616]	@ (8002038 <HAL_GPIO_Init+0x2a0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d05e      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a98      	ldr	r2, [pc, #608]	@ (8002038 <HAL_GPIO_Init+0x2a0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d875      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dda:	4a98      	ldr	r2, [pc, #608]	@ (800203c <HAL_GPIO_Init+0x2a4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d058      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001de0:	4a96      	ldr	r2, [pc, #600]	@ (800203c <HAL_GPIO_Init+0x2a4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d86f      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001de6:	4a96      	ldr	r2, [pc, #600]	@ (8002040 <HAL_GPIO_Init+0x2a8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d052      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dec:	4a94      	ldr	r2, [pc, #592]	@ (8002040 <HAL_GPIO_Init+0x2a8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d869      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001df2:	4a94      	ldr	r2, [pc, #592]	@ (8002044 <HAL_GPIO_Init+0x2ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04c      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001df8:	4a92      	ldr	r2, [pc, #584]	@ (8002044 <HAL_GPIO_Init+0x2ac>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d863      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a92      	ldr	r2, [pc, #584]	@ (8002048 <HAL_GPIO_Init+0x2b0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d046      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001e04:	4a90      	ldr	r2, [pc, #576]	@ (8002048 <HAL_GPIO_Init+0x2b0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d85d      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d82a      	bhi.n	8001e64 <HAL_GPIO_Init+0xcc>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d859      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e12:	a201      	add	r2, pc, #4	@ (adr r2, 8001e18 <HAL_GPIO_Init+0x80>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e7f 	.word	0x08001e7f
 8001e24:	08001ec1 	.word	0x08001ec1
 8001e28:	08001ec7 	.word	0x08001ec7
 8001e2c:	08001ec7 	.word	0x08001ec7
 8001e30:	08001ec7 	.word	0x08001ec7
 8001e34:	08001ec7 	.word	0x08001ec7
 8001e38:	08001ec7 	.word	0x08001ec7
 8001e3c:	08001ec7 	.word	0x08001ec7
 8001e40:	08001ec7 	.word	0x08001ec7
 8001e44:	08001ec7 	.word	0x08001ec7
 8001e48:	08001ec7 	.word	0x08001ec7
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ec7 	.word	0x08001ec7
 8001e54:	08001ec7 	.word	0x08001ec7
 8001e58:	08001ec7 	.word	0x08001ec7
 8001e5c:	08001e75 	.word	0x08001e75
 8001e60:	08001e89 	.word	0x08001e89
 8001e64:	4a79      	ldr	r2, [pc, #484]	@ (800204c <HAL_GPIO_Init+0x2b4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6a:	e02c      	b.n	8001ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e029      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e024      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	3308      	adds	r3, #8
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e01f      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e01a      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e013      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	611a      	str	r2, [r3, #16]
          break;
 8001eb2:	e009      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	615a      	str	r2, [r3, #20]
          break;
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          break;
 8001ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	@ 0xff
 8001ecc:	d801      	bhi.n	8001ed2 <HAL_GPIO_Init+0x13a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_Init+0x13e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d802      	bhi.n	8001ee4 <HAL_GPIO_Init+0x14c>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x152>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	6a39      	ldr	r1, [r7, #32]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80b1 	beq.w	800207a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f18:	4b4d      	ldr	r3, [pc, #308]	@ (8002050 <HAL_GPIO_Init+0x2b8>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002050 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <HAL_GPIO_Init+0x2b8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f30:	4a48      	ldr	r2, [pc, #288]	@ (8002054 <HAL_GPIO_Init+0x2bc>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a40      	ldr	r2, [pc, #256]	@ (8002058 <HAL_GPIO_Init+0x2c0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d013      	beq.n	8001f84 <HAL_GPIO_Init+0x1ec>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800205c <HAL_GPIO_Init+0x2c4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00d      	beq.n	8001f80 <HAL_GPIO_Init+0x1e8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3e      	ldr	r2, [pc, #248]	@ (8002060 <HAL_GPIO_Init+0x2c8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <HAL_GPIO_Init+0x1e4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002064 <HAL_GPIO_Init+0x2cc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_GPIO_Init+0x1e0>
 8001f74:	2303      	movs	r3, #3
 8001f76:	e006      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e004      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f84:	2300      	movs	r3, #0
 8001f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f96:	492f      	ldr	r1, [pc, #188]	@ (8002054 <HAL_GPIO_Init+0x2bc>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	492c      	ldr	r1, [pc, #176]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4928      	ldr	r1, [pc, #160]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	4922      	ldr	r1, [pc, #136]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	491e      	ldr	r1, [pc, #120]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4918      	ldr	r1, [pc, #96]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4914      	ldr	r1, [pc, #80]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d021      	beq.n	800206c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	490e      	ldr	r1, [pc, #56]	@ (8002068 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e021      	b.n	800207a <HAL_GPIO_Init+0x2e2>
 8002036:	bf00      	nop
 8002038:	10320000 	.word	0x10320000
 800203c:	10310000 	.word	0x10310000
 8002040:	10220000 	.word	0x10220000
 8002044:	10210000 	.word	0x10210000
 8002048:	10120000 	.word	0x10120000
 800204c:	10110000 	.word	0x10110000
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	40010800 	.word	0x40010800
 800205c:	40010c00 	.word	0x40010c00
 8002060:	40011000 	.word	0x40011000
 8002064:	40011400 	.word	0x40011400
 8002068:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800206c:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_GPIO_Init+0x304>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	43db      	mvns	r3, r3
 8002074:	4909      	ldr	r1, [pc, #36]	@ (800209c <HAL_GPIO_Init+0x304>)
 8002076:	4013      	ands	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	3301      	adds	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	f47f ae8e 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	372c      	adds	r7, #44	@ 0x2c
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40010400 	.word	0x40010400

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e272      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b92      	ldr	r3, [pc, #584]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fc:	4b8f      	ldr	r3, [pc, #572]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
 8002108:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x12c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e24c      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x76>
 8002138:	4b80      	ldr	r3, [pc, #512]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x98>
 800214e:	4b7b      	ldr	r3, [pc, #492]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7a      	ldr	r2, [pc, #488]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b78      	ldr	r3, [pc, #480]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a77      	ldr	r2, [pc, #476]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xbc>
 8002172:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a71      	ldr	r2, [pc, #452]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6e      	ldr	r2, [pc, #440]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 800218c:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6a      	ldr	r2, [pc, #424]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b68      	ldr	r3, [pc, #416]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a67      	ldr	r2, [pc, #412]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc2a 	bl	8001a04 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fc26 	bl	8001a04 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	@ 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e200      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b5d      	ldr	r3, [pc, #372]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe4>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fc16 	bl	8001a04 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fc12 	bl	8001a04 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	@ 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1ec      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b53      	ldr	r3, [pc, #332]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x10c>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002216:	4b49      	ldr	r3, [pc, #292]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
 8002222:	4b46      	ldr	r3, [pc, #280]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1c0      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4939      	ldr	r1, [pc, #228]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fbcb 	bl	8001a04 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff fbc7 	bl	8001a04 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1a1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4927      	ldr	r1, [pc, #156]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_RCC_OscConfig+0x270>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fbaa 	bl	8001a04 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff fba6 	bl	8001a04 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e180      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03a      	beq.n	8002354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fb8a 	bl	8001a04 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fb86 	bl	8001a04 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e160      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_RCC_OscConfig+0x26c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 face 	bl	80028b4 <RCC_Delay>
 8002318:	e01c      	b.n	8002354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_RCC_OscConfig+0x274>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff fb70 	bl	8001a04 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002326:	e00f      	b.n	8002348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff fb6c 	bl	8001a04 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d908      	bls.n	8002348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e146      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	42420000 	.word	0x42420000
 8002344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b92      	ldr	r3, [pc, #584]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e9      	bne.n	8002328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a6 	beq.w	80024ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b8b      	ldr	r3, [pc, #556]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a87      	ldr	r2, [pc, #540]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b85      	ldr	r3, [pc, #532]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b82      	ldr	r3, [pc, #520]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b7f      	ldr	r3, [pc, #508]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7e      	ldr	r2, [pc, #504]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fb2d 	bl	8001a04 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7ff fb29 	bl	8001a04 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e103      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x4c8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x312>
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e02d      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x334>
 80023ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a69      	ldr	r2, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b67      	ldr	r3, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a66      	ldr	r2, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x356>
 800240c:	4b61      	ldr	r3, [pc, #388]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a60      	ldr	r2, [pc, #384]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002426:	4b5b      	ldr	r3, [pc, #364]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a5a      	ldr	r2, [pc, #360]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a57      	ldr	r2, [pc, #348]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fadd 	bl	8001a04 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff fad9 	bl	8001a04 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0b1      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x37e>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff fac7 	bl	8001a04 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fac3 	bl	8001a04 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e09b      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d061      	beq.n	8002588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d146      	bne.n	800255a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fa97 	bl	8001a04 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fa93 	bl	8001a04 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e06d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002500:	d108      	bne.n	8002514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4921      	ldr	r1, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a19      	ldr	r1, [r3, #32]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	430b      	orrs	r3, r1
 8002526:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7ff fa67 	bl	8001a04 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff fa63 	bl	8001a04 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e03d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x46a>
 8002558:	e035      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0x4cc>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fa50 	bl	8001a04 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7ff fa4c 	bl	8001a04 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e026      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x498>
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e019      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_RCC_OscConfig+0x500>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d0      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4965      	ldr	r1, [pc, #404]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b8      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800263a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	494d      	ldr	r1, [pc, #308]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d040      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07f      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e073      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4936      	ldr	r1, [pc, #216]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7ff f99e 	bl	8001a04 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7ff f99a 	bl	8001a04 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e053      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d210      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4922      	ldr	r1, [pc, #136]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e032      	b.n	800278a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4916      	ldr	r1, [pc, #88]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	490e      	ldr	r1, [pc, #56]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002762:	f000 f821 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 8002766:	4602      	mov	r2, r0
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	490a      	ldr	r1, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	5ccb      	ldrb	r3, [r1, r3]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1cc>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f8fc 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40022000 	.word	0x40022000
 8002798:	40021000 	.word	0x40021000
 800279c:	080083e0 	.word	0x080083e0
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x30>
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x36>
 80027d6:	e027      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	613b      	str	r3, [r7, #16]
      break;
 80027dc:	e027      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0c9b      	lsrs	r3, r3, #18
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a17      	ldr	r2, [pc, #92]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_RCC_GetSysClockFreq+0x94>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0c5b      	lsrs	r3, r3, #17
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e004      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a0c      	ldr	r2, [pc, #48]	@ (800284c <HAL_RCC_GetSysClockFreq+0xa4>)
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	613b      	str	r3, [r7, #16]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x98>)
 800282a:	613b      	str	r3, [r7, #16]
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	693b      	ldr	r3, [r7, #16]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	007a1200 	.word	0x007a1200
 8002844:	080083f8 	.word	0x080083f8
 8002848:	08008408 	.word	0x08008408
 800284c:	003d0900 	.word	0x003d0900

08002850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002854:	4b02      	ldr	r3, [pc, #8]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x10>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000000 	.word	0x20000000

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff2 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	@ (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	080083f0 	.word	0x080083f0

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffde 	bl	8002850 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0adb      	lsrs	r3, r3, #11
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	080083f0 	.word	0x080083f0

080028b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <RCC_Delay+0x34>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <RCC_Delay+0x38>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0a5b      	lsrs	r3, r3, #9
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d0:	bf00      	nop
  }
  while (Delay --);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	60fa      	str	r2, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <RCC_Delay+0x1c>
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	20000000 	.word	0x20000000
 80028ec:	10624dd3 	.word	0x10624dd3

080028f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e042      	b.n	8002988 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe fea4 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	@ 0x24
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fcd5 	bl	80032e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d112      	bne.n	80029d0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_UART_Receive_IT+0x26>
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00b      	b.n	80029d2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fab7 	bl	8002f3a <UART_Start_Receive_IT>
 80029cc:	4603      	mov	r3, r0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0ba      	sub	sp, #232	@ 0xe8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10f      	bne.n	8002a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_UART_IRQHandler+0x66>
 8002a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fb93 	bl	8003166 <UART_Receive_IT>
      return;
 8002a40:	e25b      	b.n	8002efa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80de 	beq.w	8002c08 <HAL_UART_IRQHandler+0x22c>
 8002a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80d1 	beq.w	8002c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_UART_IRQHandler+0xae>
 8002a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_UART_IRQHandler+0xd2>
 8002a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f043 0202 	orr.w	r2, r3, #2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xf6>
 8002aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f043 0204 	orr.w	r2, r3, #4
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d011      	beq.n	8002b02 <HAL_UART_IRQHandler+0x126>
 8002ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f043 0208 	orr.w	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 81f2 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_UART_IRQHandler+0x14e>
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fb1e 	bl	8003166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_UART_IRQHandler+0x17a>
 8002b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d04f      	beq.n	8002bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa28 	bl	8002fac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d041      	beq.n	8002bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3314      	adds	r3, #20
 8002b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3314      	adds	r3, #20
 8002b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1d9      	bne.n	8002b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d013      	beq.n	8002be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002dbc <HAL_UART_IRQHandler+0x3e0>)
 8002bc4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f86c 	bl	8001ca8 <HAL_DMA_Abort_IT>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002be0:	4610      	mov	r0, r2
 8002be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	e00e      	b.n	8002c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f993 	bl	8002f12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	e00a      	b.n	8002c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f98f 	bl	8002f12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	e006      	b.n	8002c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f98b 	bl	8002f12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c02:	e175      	b.n	8002ef0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	bf00      	nop
    return;
 8002c06:	e173      	b.n	8002ef0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 814f 	bne.w	8002eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8148 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8141 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80b6 	beq.w	8002dc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8145 	beq.w	8002ef4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c72:	429a      	cmp	r2, r3
 8002c74:	f080 813e 	bcs.w	8002ef4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	f000 8088 	beq.w	8002d9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002caa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002cb8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1d9      	bne.n	8002c8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e1      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3314      	adds	r3, #20
 8002d1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d1e:	e853 3f00 	ldrex	r3, [r3]
 8002d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3314      	adds	r3, #20
 8002d34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e3      	bne.n	8002d14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d6c:	f023 0310 	bic.w	r3, r3, #16
 8002d70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e3      	bne.n	8002d5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe ff4b 	bl	8001c32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f8b6 	bl	8002f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002db8:	e09c      	b.n	8002ef4 <HAL_UART_IRQHandler+0x518>
 8002dba:	bf00      	nop
 8002dbc:	08003071 	.word	0x08003071
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 808e 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8089 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e3      	bne.n	8002de6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e42:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e3      	bne.n	8002e1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0310 	bic.w	r3, r3, #16
 8002e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e88:	61fa      	str	r2, [r7, #28]
 8002e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	617b      	str	r3, [r7, #20]
   return(result);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e3      	bne.n	8002e64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f83b 	bl	8002f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eae:	e023      	b.n	8002ef8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x4f4>
 8002ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f8e5 	bl	8003098 <UART_Transmit_IT>
    return;
 8002ece:	e014      	b.n	8002efa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00e      	beq.n	8002efa <HAL_UART_IRQHandler+0x51e>
 8002edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f924 	bl	8003136 <UART_EndTransmit_IT>
    return;
 8002eee:	e004      	b.n	8002efa <HAL_UART_IRQHandler+0x51e>
    return;
 8002ef0:	bf00      	nop
 8002ef2:	e002      	b.n	8002efa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ef8:	bf00      	nop
  }
}
 8002efa:	37e8      	adds	r7, #232	@ 0xe8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2222      	movs	r2, #34	@ 0x22
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0220 	orr.w	r2, r2, #32
 8002f9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b095      	sub	sp, #84	@ 0x54
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fd4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3314      	adds	r3, #20
 8002fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3314      	adds	r3, #20
 8003006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003008:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800300a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800300e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e5      	bne.n	8002fe8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	2b01      	cmp	r3, #1
 8003022:	d119      	bne.n	8003058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	60bb      	str	r3, [r7, #8]
   return(result);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f023 0310 	bic.w	r3, r3, #16
 800303a:	647b      	str	r3, [r7, #68]	@ 0x44
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003044:	61ba      	str	r2, [r7, #24]
 8003046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6979      	ldr	r1, [r7, #20]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	613b      	str	r3, [r7, #16]
   return(result);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003066:	bf00      	nop
 8003068:	3754      	adds	r7, #84	@ 0x54
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff41 	bl	8002f12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b21      	cmp	r3, #33	@ 0x21
 80030aa:	d13e      	bne.n	800312a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b4:	d114      	bne.n	80030e0 <UART_Transmit_IT+0x48>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d110      	bne.n	80030e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]
 80030de:	e008      	b.n	80030f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	1c59      	adds	r1, r3, #1
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6211      	str	r1, [r2, #32]
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4619      	mov	r1, r3
 8003100:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003114:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003124:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800314c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fed2 	bl	8002f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08c      	sub	sp, #48	@ 0x30
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b22      	cmp	r3, #34	@ 0x22
 8003178:	f040 80ae 	bne.w	80032d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003184:	d117      	bne.n	80031b6 <UART_Receive_IT+0x50>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d113      	bne.n	80031b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	1c9a      	adds	r2, r3, #2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80031b4:	e026      	b.n	8003204 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c8:	d007      	beq.n	80031da <UART_Receive_IT+0x74>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <UART_Receive_IT+0x82>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e008      	b.n	80031fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29b      	uxth	r3, r3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4619      	mov	r1, r3
 8003212:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003214:	2b00      	cmp	r3, #0
 8003216:	d15d      	bne.n	80032d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0220 	bic.w	r2, r2, #32
 8003226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	2b01      	cmp	r3, #1
 800325c:	d135      	bne.n	80032ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	613b      	str	r3, [r7, #16]
   return(result);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f023 0310 	bic.w	r3, r3, #16
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003284:	623a      	str	r2, [r7, #32]
 8003286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	69f9      	ldr	r1, [r7, #28]
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	61bb      	str	r3, [r7, #24]
   return(result);
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d10a      	bne.n	80032bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fe2e 	bl	8002f24 <HAL_UARTEx_RxEventCallback>
 80032c8:	e002      	b.n	80032d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe f8be 	bl	800144c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e002      	b.n	80032da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3730      	adds	r7, #48	@ 0x30
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800331e:	f023 030c 	bic.w	r3, r3, #12
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	430b      	orrs	r3, r1
 800332a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <UART_SetConfig+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d103      	bne.n	8003354 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800334c:	f7ff fa9e 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	e002      	b.n	800335a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003354:	f7ff fa86 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8003358:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009a      	lsls	r2, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	4a22      	ldr	r2, [pc, #136]	@ (80033fc <UART_SetConfig+0x118>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	0119      	lsls	r1, r3, #4
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009a      	lsls	r2, r3, #2
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <UART_SetConfig+0x118>)
 8003392:	fba3 0302 	umull	r0, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2064      	movs	r0, #100	@ 0x64
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	3332      	adds	r3, #50	@ 0x32
 80033a4:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <UART_SetConfig+0x118>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b0:	4419      	add	r1, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	009a      	lsls	r2, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c8:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <UART_SetConfig+0x118>)
 80033ca:	fba3 0302 	umull	r0, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2064      	movs	r0, #100	@ 0x64
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	3332      	adds	r3, #50	@ 0x32
 80033dc:	4a07      	ldr	r2, [pc, #28]	@ (80033fc <UART_SetConfig+0x118>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	f003 020f 	and.w	r2, r3, #15
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	440a      	add	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40013800 	.word	0x40013800
 80033fc:	51eb851f 	.word	0x51eb851f

08003400 <__cvt>:
 8003400:	2b00      	cmp	r3, #0
 8003402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003406:	461d      	mov	r5, r3
 8003408:	bfbb      	ittet	lt
 800340a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800340e:	461d      	movlt	r5, r3
 8003410:	2300      	movge	r3, #0
 8003412:	232d      	movlt	r3, #45	@ 0x2d
 8003414:	b088      	sub	sp, #32
 8003416:	4614      	mov	r4, r2
 8003418:	bfb8      	it	lt
 800341a:	4614      	movlt	r4, r2
 800341c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800341e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003420:	7013      	strb	r3, [r2, #0]
 8003422:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003424:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003428:	f023 0820 	bic.w	r8, r3, #32
 800342c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003430:	d005      	beq.n	800343e <__cvt+0x3e>
 8003432:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003436:	d100      	bne.n	800343a <__cvt+0x3a>
 8003438:	3601      	adds	r6, #1
 800343a:	2302      	movs	r3, #2
 800343c:	e000      	b.n	8003440 <__cvt+0x40>
 800343e:	2303      	movs	r3, #3
 8003440:	aa07      	add	r2, sp, #28
 8003442:	9204      	str	r2, [sp, #16]
 8003444:	aa06      	add	r2, sp, #24
 8003446:	e9cd a202 	strd	sl, r2, [sp, #8]
 800344a:	e9cd 3600 	strd	r3, r6, [sp]
 800344e:	4622      	mov	r2, r4
 8003450:	462b      	mov	r3, r5
 8003452:	f001 f8bd 	bl	80045d0 <_dtoa_r>
 8003456:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800345a:	4607      	mov	r7, r0
 800345c:	d119      	bne.n	8003492 <__cvt+0x92>
 800345e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003460:	07db      	lsls	r3, r3, #31
 8003462:	d50e      	bpl.n	8003482 <__cvt+0x82>
 8003464:	eb00 0906 	add.w	r9, r0, r6
 8003468:	2200      	movs	r2, #0
 800346a:	2300      	movs	r3, #0
 800346c:	4620      	mov	r0, r4
 800346e:	4629      	mov	r1, r5
 8003470:	f7fd fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 8003474:	b108      	cbz	r0, 800347a <__cvt+0x7a>
 8003476:	f8cd 901c 	str.w	r9, [sp, #28]
 800347a:	2230      	movs	r2, #48	@ 0x30
 800347c:	9b07      	ldr	r3, [sp, #28]
 800347e:	454b      	cmp	r3, r9
 8003480:	d31e      	bcc.n	80034c0 <__cvt+0xc0>
 8003482:	4638      	mov	r0, r7
 8003484:	9b07      	ldr	r3, [sp, #28]
 8003486:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003488:	1bdb      	subs	r3, r3, r7
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	b008      	add	sp, #32
 800348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003492:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003496:	eb00 0906 	add.w	r9, r0, r6
 800349a:	d1e5      	bne.n	8003468 <__cvt+0x68>
 800349c:	7803      	ldrb	r3, [r0, #0]
 800349e:	2b30      	cmp	r3, #48	@ 0x30
 80034a0:	d10a      	bne.n	80034b8 <__cvt+0xb8>
 80034a2:	2200      	movs	r2, #0
 80034a4:	2300      	movs	r3, #0
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f7fd fa7d 	bl	80009a8 <__aeabi_dcmpeq>
 80034ae:	b918      	cbnz	r0, 80034b8 <__cvt+0xb8>
 80034b0:	f1c6 0601 	rsb	r6, r6, #1
 80034b4:	f8ca 6000 	str.w	r6, [sl]
 80034b8:	f8da 3000 	ldr.w	r3, [sl]
 80034bc:	4499      	add	r9, r3
 80034be:	e7d3      	b.n	8003468 <__cvt+0x68>
 80034c0:	1c59      	adds	r1, r3, #1
 80034c2:	9107      	str	r1, [sp, #28]
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e7d9      	b.n	800347c <__cvt+0x7c>

080034c8 <__exponent>:
 80034c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ca:	2900      	cmp	r1, #0
 80034cc:	bfb6      	itet	lt
 80034ce:	232d      	movlt	r3, #45	@ 0x2d
 80034d0:	232b      	movge	r3, #43	@ 0x2b
 80034d2:	4249      	neglt	r1, r1
 80034d4:	2909      	cmp	r1, #9
 80034d6:	7002      	strb	r2, [r0, #0]
 80034d8:	7043      	strb	r3, [r0, #1]
 80034da:	dd29      	ble.n	8003530 <__exponent+0x68>
 80034dc:	f10d 0307 	add.w	r3, sp, #7
 80034e0:	461d      	mov	r5, r3
 80034e2:	270a      	movs	r7, #10
 80034e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80034e8:	461a      	mov	r2, r3
 80034ea:	fb07 1416 	mls	r4, r7, r6, r1
 80034ee:	3430      	adds	r4, #48	@ 0x30
 80034f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80034f4:	460c      	mov	r4, r1
 80034f6:	2c63      	cmp	r4, #99	@ 0x63
 80034f8:	4631      	mov	r1, r6
 80034fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80034fe:	dcf1      	bgt.n	80034e4 <__exponent+0x1c>
 8003500:	3130      	adds	r1, #48	@ 0x30
 8003502:	1e94      	subs	r4, r2, #2
 8003504:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003508:	4623      	mov	r3, r4
 800350a:	1c41      	adds	r1, r0, #1
 800350c:	42ab      	cmp	r3, r5
 800350e:	d30a      	bcc.n	8003526 <__exponent+0x5e>
 8003510:	f10d 0309 	add.w	r3, sp, #9
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	42ac      	cmp	r4, r5
 8003518:	bf88      	it	hi
 800351a:	2300      	movhi	r3, #0
 800351c:	3302      	adds	r3, #2
 800351e:	4403      	add	r3, r0
 8003520:	1a18      	subs	r0, r3, r0
 8003522:	b003      	add	sp, #12
 8003524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003526:	f813 6b01 	ldrb.w	r6, [r3], #1
 800352a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800352e:	e7ed      	b.n	800350c <__exponent+0x44>
 8003530:	2330      	movs	r3, #48	@ 0x30
 8003532:	3130      	adds	r1, #48	@ 0x30
 8003534:	7083      	strb	r3, [r0, #2]
 8003536:	70c1      	strb	r1, [r0, #3]
 8003538:	1d03      	adds	r3, r0, #4
 800353a:	e7f1      	b.n	8003520 <__exponent+0x58>

0800353c <_printf_float>:
 800353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003540:	b091      	sub	sp, #68	@ 0x44
 8003542:	460c      	mov	r4, r1
 8003544:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003548:	4616      	mov	r6, r2
 800354a:	461f      	mov	r7, r3
 800354c:	4605      	mov	r5, r0
 800354e:	f000 ff2b 	bl	80043a8 <_localeconv_r>
 8003552:	6803      	ldr	r3, [r0, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	9308      	str	r3, [sp, #32]
 8003558:	f7fc fdfa 	bl	8000150 <strlen>
 800355c:	2300      	movs	r3, #0
 800355e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003560:	f8d8 3000 	ldr.w	r3, [r8]
 8003564:	9009      	str	r0, [sp, #36]	@ 0x24
 8003566:	3307      	adds	r3, #7
 8003568:	f023 0307 	bic.w	r3, r3, #7
 800356c:	f103 0208 	add.w	r2, r3, #8
 8003570:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003574:	f8d4 b000 	ldr.w	fp, [r4]
 8003578:	f8c8 2000 	str.w	r2, [r8]
 800357c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003580:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003584:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003586:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800358a:	f04f 32ff 	mov.w	r2, #4294967295
 800358e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003592:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003596:	4b9c      	ldr	r3, [pc, #624]	@ (8003808 <_printf_float+0x2cc>)
 8003598:	f7fd fa38 	bl	8000a0c <__aeabi_dcmpun>
 800359c:	bb70      	cbnz	r0, 80035fc <_printf_float+0xc0>
 800359e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80035a2:	f04f 32ff 	mov.w	r2, #4294967295
 80035a6:	4b98      	ldr	r3, [pc, #608]	@ (8003808 <_printf_float+0x2cc>)
 80035a8:	f7fd fa12 	bl	80009d0 <__aeabi_dcmple>
 80035ac:	bb30      	cbnz	r0, 80035fc <_printf_float+0xc0>
 80035ae:	2200      	movs	r2, #0
 80035b0:	2300      	movs	r3, #0
 80035b2:	4640      	mov	r0, r8
 80035b4:	4649      	mov	r1, r9
 80035b6:	f7fd fa01 	bl	80009bc <__aeabi_dcmplt>
 80035ba:	b110      	cbz	r0, 80035c2 <_printf_float+0x86>
 80035bc:	232d      	movs	r3, #45	@ 0x2d
 80035be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035c2:	4a92      	ldr	r2, [pc, #584]	@ (800380c <_printf_float+0x2d0>)
 80035c4:	4b92      	ldr	r3, [pc, #584]	@ (8003810 <_printf_float+0x2d4>)
 80035c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80035ca:	bf8c      	ite	hi
 80035cc:	4690      	movhi	r8, r2
 80035ce:	4698      	movls	r8, r3
 80035d0:	2303      	movs	r3, #3
 80035d2:	f04f 0900 	mov.w	r9, #0
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	f02b 0304 	bic.w	r3, fp, #4
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	4633      	mov	r3, r6
 80035e0:	4621      	mov	r1, r4
 80035e2:	4628      	mov	r0, r5
 80035e4:	9700      	str	r7, [sp, #0]
 80035e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80035e8:	f000 f9d4 	bl	8003994 <_printf_common>
 80035ec:	3001      	adds	r0, #1
 80035ee:	f040 8090 	bne.w	8003712 <_printf_float+0x1d6>
 80035f2:	f04f 30ff 	mov.w	r0, #4294967295
 80035f6:	b011      	add	sp, #68	@ 0x44
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fc:	4642      	mov	r2, r8
 80035fe:	464b      	mov	r3, r9
 8003600:	4640      	mov	r0, r8
 8003602:	4649      	mov	r1, r9
 8003604:	f7fd fa02 	bl	8000a0c <__aeabi_dcmpun>
 8003608:	b148      	cbz	r0, 800361e <_printf_float+0xe2>
 800360a:	464b      	mov	r3, r9
 800360c:	2b00      	cmp	r3, #0
 800360e:	bfb8      	it	lt
 8003610:	232d      	movlt	r3, #45	@ 0x2d
 8003612:	4a80      	ldr	r2, [pc, #512]	@ (8003814 <_printf_float+0x2d8>)
 8003614:	bfb8      	it	lt
 8003616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800361a:	4b7f      	ldr	r3, [pc, #508]	@ (8003818 <_printf_float+0x2dc>)
 800361c:	e7d3      	b.n	80035c6 <_printf_float+0x8a>
 800361e:	6863      	ldr	r3, [r4, #4]
 8003620:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	d13f      	bne.n	80036a8 <_printf_float+0x16c>
 8003628:	2306      	movs	r3, #6
 800362a:	6063      	str	r3, [r4, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003632:	6023      	str	r3, [r4, #0]
 8003634:	9206      	str	r2, [sp, #24]
 8003636:	aa0e      	add	r2, sp, #56	@ 0x38
 8003638:	e9cd a204 	strd	sl, r2, [sp, #16]
 800363c:	aa0d      	add	r2, sp, #52	@ 0x34
 800363e:	9203      	str	r2, [sp, #12]
 8003640:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003644:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	4642      	mov	r2, r8
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4628      	mov	r0, r5
 8003650:	464b      	mov	r3, r9
 8003652:	910a      	str	r1, [sp, #40]	@ 0x28
 8003654:	f7ff fed4 	bl	8003400 <__cvt>
 8003658:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800365a:	4680      	mov	r8, r0
 800365c:	2947      	cmp	r1, #71	@ 0x47
 800365e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003660:	d128      	bne.n	80036b4 <_printf_float+0x178>
 8003662:	1cc8      	adds	r0, r1, #3
 8003664:	db02      	blt.n	800366c <_printf_float+0x130>
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	4299      	cmp	r1, r3
 800366a:	dd40      	ble.n	80036ee <_printf_float+0x1b2>
 800366c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003670:	fa5f fa8a 	uxtb.w	sl, sl
 8003674:	4652      	mov	r2, sl
 8003676:	3901      	subs	r1, #1
 8003678:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800367c:	910d      	str	r1, [sp, #52]	@ 0x34
 800367e:	f7ff ff23 	bl	80034c8 <__exponent>
 8003682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003684:	4681      	mov	r9, r0
 8003686:	1813      	adds	r3, r2, r0
 8003688:	2a01      	cmp	r2, #1
 800368a:	6123      	str	r3, [r4, #16]
 800368c:	dc02      	bgt.n	8003694 <_printf_float+0x158>
 800368e:	6822      	ldr	r2, [r4, #0]
 8003690:	07d2      	lsls	r2, r2, #31
 8003692:	d501      	bpl.n	8003698 <_printf_float+0x15c>
 8003694:	3301      	adds	r3, #1
 8003696:	6123      	str	r3, [r4, #16]
 8003698:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800369c:	2b00      	cmp	r3, #0
 800369e:	d09e      	beq.n	80035de <_printf_float+0xa2>
 80036a0:	232d      	movs	r3, #45	@ 0x2d
 80036a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036a6:	e79a      	b.n	80035de <_printf_float+0xa2>
 80036a8:	2947      	cmp	r1, #71	@ 0x47
 80036aa:	d1bf      	bne.n	800362c <_printf_float+0xf0>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1bd      	bne.n	800362c <_printf_float+0xf0>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e7ba      	b.n	800362a <_printf_float+0xee>
 80036b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80036b8:	d9dc      	bls.n	8003674 <_printf_float+0x138>
 80036ba:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80036be:	d118      	bne.n	80036f2 <_printf_float+0x1b6>
 80036c0:	2900      	cmp	r1, #0
 80036c2:	6863      	ldr	r3, [r4, #4]
 80036c4:	dd0b      	ble.n	80036de <_printf_float+0x1a2>
 80036c6:	6121      	str	r1, [r4, #16]
 80036c8:	b913      	cbnz	r3, 80036d0 <_printf_float+0x194>
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	07d0      	lsls	r0, r2, #31
 80036ce:	d502      	bpl.n	80036d6 <_printf_float+0x19a>
 80036d0:	3301      	adds	r3, #1
 80036d2:	440b      	add	r3, r1
 80036d4:	6123      	str	r3, [r4, #16]
 80036d6:	f04f 0900 	mov.w	r9, #0
 80036da:	65a1      	str	r1, [r4, #88]	@ 0x58
 80036dc:	e7dc      	b.n	8003698 <_printf_float+0x15c>
 80036de:	b913      	cbnz	r3, 80036e6 <_printf_float+0x1aa>
 80036e0:	6822      	ldr	r2, [r4, #0]
 80036e2:	07d2      	lsls	r2, r2, #31
 80036e4:	d501      	bpl.n	80036ea <_printf_float+0x1ae>
 80036e6:	3302      	adds	r3, #2
 80036e8:	e7f4      	b.n	80036d4 <_printf_float+0x198>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e7f2      	b.n	80036d4 <_printf_float+0x198>
 80036ee:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80036f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80036f4:	4299      	cmp	r1, r3
 80036f6:	db05      	blt.n	8003704 <_printf_float+0x1c8>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	6121      	str	r1, [r4, #16]
 80036fc:	07d8      	lsls	r0, r3, #31
 80036fe:	d5ea      	bpl.n	80036d6 <_printf_float+0x19a>
 8003700:	1c4b      	adds	r3, r1, #1
 8003702:	e7e7      	b.n	80036d4 <_printf_float+0x198>
 8003704:	2900      	cmp	r1, #0
 8003706:	bfcc      	ite	gt
 8003708:	2201      	movgt	r2, #1
 800370a:	f1c1 0202 	rsble	r2, r1, #2
 800370e:	4413      	add	r3, r2
 8003710:	e7e0      	b.n	80036d4 <_printf_float+0x198>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	055a      	lsls	r2, r3, #21
 8003716:	d407      	bmi.n	8003728 <_printf_float+0x1ec>
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	4642      	mov	r2, r8
 800371c:	4631      	mov	r1, r6
 800371e:	4628      	mov	r0, r5
 8003720:	47b8      	blx	r7
 8003722:	3001      	adds	r0, #1
 8003724:	d12b      	bne.n	800377e <_printf_float+0x242>
 8003726:	e764      	b.n	80035f2 <_printf_float+0xb6>
 8003728:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800372c:	f240 80dc 	bls.w	80038e8 <_printf_float+0x3ac>
 8003730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003734:	2200      	movs	r2, #0
 8003736:	2300      	movs	r3, #0
 8003738:	f7fd f936 	bl	80009a8 <__aeabi_dcmpeq>
 800373c:	2800      	cmp	r0, #0
 800373e:	d033      	beq.n	80037a8 <_printf_float+0x26c>
 8003740:	2301      	movs	r3, #1
 8003742:	4631      	mov	r1, r6
 8003744:	4628      	mov	r0, r5
 8003746:	4a35      	ldr	r2, [pc, #212]	@ (800381c <_printf_float+0x2e0>)
 8003748:	47b8      	blx	r7
 800374a:	3001      	adds	r0, #1
 800374c:	f43f af51 	beq.w	80035f2 <_printf_float+0xb6>
 8003750:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003754:	4543      	cmp	r3, r8
 8003756:	db02      	blt.n	800375e <_printf_float+0x222>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	07d8      	lsls	r0, r3, #31
 800375c:	d50f      	bpl.n	800377e <_printf_float+0x242>
 800375e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003762:	4631      	mov	r1, r6
 8003764:	4628      	mov	r0, r5
 8003766:	47b8      	blx	r7
 8003768:	3001      	adds	r0, #1
 800376a:	f43f af42 	beq.w	80035f2 <_printf_float+0xb6>
 800376e:	f04f 0900 	mov.w	r9, #0
 8003772:	f108 38ff 	add.w	r8, r8, #4294967295
 8003776:	f104 0a1a 	add.w	sl, r4, #26
 800377a:	45c8      	cmp	r8, r9
 800377c:	dc09      	bgt.n	8003792 <_printf_float+0x256>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	079b      	lsls	r3, r3, #30
 8003782:	f100 8102 	bmi.w	800398a <_printf_float+0x44e>
 8003786:	68e0      	ldr	r0, [r4, #12]
 8003788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800378a:	4298      	cmp	r0, r3
 800378c:	bfb8      	it	lt
 800378e:	4618      	movlt	r0, r3
 8003790:	e731      	b.n	80035f6 <_printf_float+0xba>
 8003792:	2301      	movs	r3, #1
 8003794:	4652      	mov	r2, sl
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f af28 	beq.w	80035f2 <_printf_float+0xb6>
 80037a2:	f109 0901 	add.w	r9, r9, #1
 80037a6:	e7e8      	b.n	800377a <_printf_float+0x23e>
 80037a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	dc38      	bgt.n	8003820 <_printf_float+0x2e4>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	4a19      	ldr	r2, [pc, #100]	@ (800381c <_printf_float+0x2e0>)
 80037b6:	47b8      	blx	r7
 80037b8:	3001      	adds	r0, #1
 80037ba:	f43f af1a 	beq.w	80035f2 <_printf_float+0xb6>
 80037be:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80037c2:	ea59 0303 	orrs.w	r3, r9, r3
 80037c6:	d102      	bne.n	80037ce <_printf_float+0x292>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	07d9      	lsls	r1, r3, #31
 80037cc:	d5d7      	bpl.n	800377e <_printf_float+0x242>
 80037ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037d2:	4631      	mov	r1, r6
 80037d4:	4628      	mov	r0, r5
 80037d6:	47b8      	blx	r7
 80037d8:	3001      	adds	r0, #1
 80037da:	f43f af0a 	beq.w	80035f2 <_printf_float+0xb6>
 80037de:	f04f 0a00 	mov.w	sl, #0
 80037e2:	f104 0b1a 	add.w	fp, r4, #26
 80037e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037e8:	425b      	negs	r3, r3
 80037ea:	4553      	cmp	r3, sl
 80037ec:	dc01      	bgt.n	80037f2 <_printf_float+0x2b6>
 80037ee:	464b      	mov	r3, r9
 80037f0:	e793      	b.n	800371a <_printf_float+0x1de>
 80037f2:	2301      	movs	r3, #1
 80037f4:	465a      	mov	r2, fp
 80037f6:	4631      	mov	r1, r6
 80037f8:	4628      	mov	r0, r5
 80037fa:	47b8      	blx	r7
 80037fc:	3001      	adds	r0, #1
 80037fe:	f43f aef8 	beq.w	80035f2 <_printf_float+0xb6>
 8003802:	f10a 0a01 	add.w	sl, sl, #1
 8003806:	e7ee      	b.n	80037e6 <_printf_float+0x2aa>
 8003808:	7fefffff 	.word	0x7fefffff
 800380c:	0800840e 	.word	0x0800840e
 8003810:	0800840a 	.word	0x0800840a
 8003814:	08008416 	.word	0x08008416
 8003818:	08008412 	.word	0x08008412
 800381c:	08008550 	.word	0x08008550
 8003820:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003822:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003826:	4553      	cmp	r3, sl
 8003828:	bfa8      	it	ge
 800382a:	4653      	movge	r3, sl
 800382c:	2b00      	cmp	r3, #0
 800382e:	4699      	mov	r9, r3
 8003830:	dc36      	bgt.n	80038a0 <_printf_float+0x364>
 8003832:	f04f 0b00 	mov.w	fp, #0
 8003836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800383a:	f104 021a 	add.w	r2, r4, #26
 800383e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003840:	930a      	str	r3, [sp, #40]	@ 0x28
 8003842:	eba3 0309 	sub.w	r3, r3, r9
 8003846:	455b      	cmp	r3, fp
 8003848:	dc31      	bgt.n	80038ae <_printf_float+0x372>
 800384a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800384c:	459a      	cmp	sl, r3
 800384e:	dc3a      	bgt.n	80038c6 <_printf_float+0x38a>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	07da      	lsls	r2, r3, #31
 8003854:	d437      	bmi.n	80038c6 <_printf_float+0x38a>
 8003856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003858:	ebaa 0903 	sub.w	r9, sl, r3
 800385c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800385e:	ebaa 0303 	sub.w	r3, sl, r3
 8003862:	4599      	cmp	r9, r3
 8003864:	bfa8      	it	ge
 8003866:	4699      	movge	r9, r3
 8003868:	f1b9 0f00 	cmp.w	r9, #0
 800386c:	dc33      	bgt.n	80038d6 <_printf_float+0x39a>
 800386e:	f04f 0800 	mov.w	r8, #0
 8003872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003876:	f104 0b1a 	add.w	fp, r4, #26
 800387a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800387c:	ebaa 0303 	sub.w	r3, sl, r3
 8003880:	eba3 0309 	sub.w	r3, r3, r9
 8003884:	4543      	cmp	r3, r8
 8003886:	f77f af7a 	ble.w	800377e <_printf_float+0x242>
 800388a:	2301      	movs	r3, #1
 800388c:	465a      	mov	r2, fp
 800388e:	4631      	mov	r1, r6
 8003890:	4628      	mov	r0, r5
 8003892:	47b8      	blx	r7
 8003894:	3001      	adds	r0, #1
 8003896:	f43f aeac 	beq.w	80035f2 <_printf_float+0xb6>
 800389a:	f108 0801 	add.w	r8, r8, #1
 800389e:	e7ec      	b.n	800387a <_printf_float+0x33e>
 80038a0:	4642      	mov	r2, r8
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	d1c2      	bne.n	8003832 <_printf_float+0x2f6>
 80038ac:	e6a1      	b.n	80035f2 <_printf_float+0xb6>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4631      	mov	r1, r6
 80038b2:	4628      	mov	r0, r5
 80038b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f ae9a 	beq.w	80035f2 <_printf_float+0xb6>
 80038be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038c0:	f10b 0b01 	add.w	fp, fp, #1
 80038c4:	e7bb      	b.n	800383e <_printf_float+0x302>
 80038c6:	4631      	mov	r1, r6
 80038c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038cc:	4628      	mov	r0, r5
 80038ce:	47b8      	blx	r7
 80038d0:	3001      	adds	r0, #1
 80038d2:	d1c0      	bne.n	8003856 <_printf_float+0x31a>
 80038d4:	e68d      	b.n	80035f2 <_printf_float+0xb6>
 80038d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038d8:	464b      	mov	r3, r9
 80038da:	4631      	mov	r1, r6
 80038dc:	4628      	mov	r0, r5
 80038de:	4442      	add	r2, r8
 80038e0:	47b8      	blx	r7
 80038e2:	3001      	adds	r0, #1
 80038e4:	d1c3      	bne.n	800386e <_printf_float+0x332>
 80038e6:	e684      	b.n	80035f2 <_printf_float+0xb6>
 80038e8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80038ec:	f1ba 0f01 	cmp.w	sl, #1
 80038f0:	dc01      	bgt.n	80038f6 <_printf_float+0x3ba>
 80038f2:	07db      	lsls	r3, r3, #31
 80038f4:	d536      	bpl.n	8003964 <_printf_float+0x428>
 80038f6:	2301      	movs	r3, #1
 80038f8:	4642      	mov	r2, r8
 80038fa:	4631      	mov	r1, r6
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b8      	blx	r7
 8003900:	3001      	adds	r0, #1
 8003902:	f43f ae76 	beq.w	80035f2 <_printf_float+0xb6>
 8003906:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800390a:	4631      	mov	r1, r6
 800390c:	4628      	mov	r0, r5
 800390e:	47b8      	blx	r7
 8003910:	3001      	adds	r0, #1
 8003912:	f43f ae6e 	beq.w	80035f2 <_printf_float+0xb6>
 8003916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800391a:	2200      	movs	r2, #0
 800391c:	2300      	movs	r3, #0
 800391e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003922:	f7fd f841 	bl	80009a8 <__aeabi_dcmpeq>
 8003926:	b9c0      	cbnz	r0, 800395a <_printf_float+0x41e>
 8003928:	4653      	mov	r3, sl
 800392a:	f108 0201 	add.w	r2, r8, #1
 800392e:	4631      	mov	r1, r6
 8003930:	4628      	mov	r0, r5
 8003932:	47b8      	blx	r7
 8003934:	3001      	adds	r0, #1
 8003936:	d10c      	bne.n	8003952 <_printf_float+0x416>
 8003938:	e65b      	b.n	80035f2 <_printf_float+0xb6>
 800393a:	2301      	movs	r3, #1
 800393c:	465a      	mov	r2, fp
 800393e:	4631      	mov	r1, r6
 8003940:	4628      	mov	r0, r5
 8003942:	47b8      	blx	r7
 8003944:	3001      	adds	r0, #1
 8003946:	f43f ae54 	beq.w	80035f2 <_printf_float+0xb6>
 800394a:	f108 0801 	add.w	r8, r8, #1
 800394e:	45d0      	cmp	r8, sl
 8003950:	dbf3      	blt.n	800393a <_printf_float+0x3fe>
 8003952:	464b      	mov	r3, r9
 8003954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003958:	e6e0      	b.n	800371c <_printf_float+0x1e0>
 800395a:	f04f 0800 	mov.w	r8, #0
 800395e:	f104 0b1a 	add.w	fp, r4, #26
 8003962:	e7f4      	b.n	800394e <_printf_float+0x412>
 8003964:	2301      	movs	r3, #1
 8003966:	4642      	mov	r2, r8
 8003968:	e7e1      	b.n	800392e <_printf_float+0x3f2>
 800396a:	2301      	movs	r3, #1
 800396c:	464a      	mov	r2, r9
 800396e:	4631      	mov	r1, r6
 8003970:	4628      	mov	r0, r5
 8003972:	47b8      	blx	r7
 8003974:	3001      	adds	r0, #1
 8003976:	f43f ae3c 	beq.w	80035f2 <_printf_float+0xb6>
 800397a:	f108 0801 	add.w	r8, r8, #1
 800397e:	68e3      	ldr	r3, [r4, #12]
 8003980:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003982:	1a5b      	subs	r3, r3, r1
 8003984:	4543      	cmp	r3, r8
 8003986:	dcf0      	bgt.n	800396a <_printf_float+0x42e>
 8003988:	e6fd      	b.n	8003786 <_printf_float+0x24a>
 800398a:	f04f 0800 	mov.w	r8, #0
 800398e:	f104 0919 	add.w	r9, r4, #25
 8003992:	e7f4      	b.n	800397e <_printf_float+0x442>

08003994 <_printf_common>:
 8003994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	4616      	mov	r6, r2
 800399a:	4698      	mov	r8, r3
 800399c:	688a      	ldr	r2, [r1, #8]
 800399e:	690b      	ldr	r3, [r1, #16]
 80039a0:	4607      	mov	r7, r0
 80039a2:	4293      	cmp	r3, r2
 80039a4:	bfb8      	it	lt
 80039a6:	4613      	movlt	r3, r2
 80039a8:	6033      	str	r3, [r6, #0]
 80039aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039ae:	460c      	mov	r4, r1
 80039b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039b4:	b10a      	cbz	r2, 80039ba <_printf_common+0x26>
 80039b6:	3301      	adds	r3, #1
 80039b8:	6033      	str	r3, [r6, #0]
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	0699      	lsls	r1, r3, #26
 80039be:	bf42      	ittt	mi
 80039c0:	6833      	ldrmi	r3, [r6, #0]
 80039c2:	3302      	addmi	r3, #2
 80039c4:	6033      	strmi	r3, [r6, #0]
 80039c6:	6825      	ldr	r5, [r4, #0]
 80039c8:	f015 0506 	ands.w	r5, r5, #6
 80039cc:	d106      	bne.n	80039dc <_printf_common+0x48>
 80039ce:	f104 0a19 	add.w	sl, r4, #25
 80039d2:	68e3      	ldr	r3, [r4, #12]
 80039d4:	6832      	ldr	r2, [r6, #0]
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	42ab      	cmp	r3, r5
 80039da:	dc2b      	bgt.n	8003a34 <_printf_common+0xa0>
 80039dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	3b00      	subs	r3, #0
 80039e4:	bf18      	it	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	0692      	lsls	r2, r2, #26
 80039ea:	d430      	bmi.n	8003a4e <_printf_common+0xba>
 80039ec:	4641      	mov	r1, r8
 80039ee:	4638      	mov	r0, r7
 80039f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039f4:	47c8      	blx	r9
 80039f6:	3001      	adds	r0, #1
 80039f8:	d023      	beq.n	8003a42 <_printf_common+0xae>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	6922      	ldr	r2, [r4, #16]
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf14      	ite	ne
 8003a06:	2500      	movne	r5, #0
 8003a08:	6833      	ldreq	r3, [r6, #0]
 8003a0a:	f04f 0600 	mov.w	r6, #0
 8003a0e:	bf08      	it	eq
 8003a10:	68e5      	ldreq	r5, [r4, #12]
 8003a12:	f104 041a 	add.w	r4, r4, #26
 8003a16:	bf08      	it	eq
 8003a18:	1aed      	subeq	r5, r5, r3
 8003a1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a1e:	bf08      	it	eq
 8003a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a24:	4293      	cmp	r3, r2
 8003a26:	bfc4      	itt	gt
 8003a28:	1a9b      	subgt	r3, r3, r2
 8003a2a:	18ed      	addgt	r5, r5, r3
 8003a2c:	42b5      	cmp	r5, r6
 8003a2e:	d11a      	bne.n	8003a66 <_printf_common+0xd2>
 8003a30:	2000      	movs	r0, #0
 8003a32:	e008      	b.n	8003a46 <_printf_common+0xb2>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4652      	mov	r2, sl
 8003a38:	4641      	mov	r1, r8
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	47c8      	blx	r9
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d103      	bne.n	8003a4a <_printf_common+0xb6>
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4a:	3501      	adds	r5, #1
 8003a4c:	e7c1      	b.n	80039d2 <_printf_common+0x3e>
 8003a4e:	2030      	movs	r0, #48	@ 0x30
 8003a50:	18e1      	adds	r1, r4, r3
 8003a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a5c:	4422      	add	r2, r4
 8003a5e:	3302      	adds	r3, #2
 8003a60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a64:	e7c2      	b.n	80039ec <_printf_common+0x58>
 8003a66:	2301      	movs	r3, #1
 8003a68:	4622      	mov	r2, r4
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	47c8      	blx	r9
 8003a70:	3001      	adds	r0, #1
 8003a72:	d0e6      	beq.n	8003a42 <_printf_common+0xae>
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7d9      	b.n	8003a2c <_printf_common+0x98>

08003a78 <_printf_i>:
 8003a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	7e0f      	ldrb	r7, [r1, #24]
 8003a7e:	4691      	mov	r9, r2
 8003a80:	2f78      	cmp	r7, #120	@ 0x78
 8003a82:	4680      	mov	r8, r0
 8003a84:	460c      	mov	r4, r1
 8003a86:	469a      	mov	sl, r3
 8003a88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a8e:	d807      	bhi.n	8003aa0 <_printf_i+0x28>
 8003a90:	2f62      	cmp	r7, #98	@ 0x62
 8003a92:	d80a      	bhi.n	8003aaa <_printf_i+0x32>
 8003a94:	2f00      	cmp	r7, #0
 8003a96:	f000 80d1 	beq.w	8003c3c <_printf_i+0x1c4>
 8003a9a:	2f58      	cmp	r7, #88	@ 0x58
 8003a9c:	f000 80b8 	beq.w	8003c10 <_printf_i+0x198>
 8003aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003aa8:	e03a      	b.n	8003b20 <_printf_i+0xa8>
 8003aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003aae:	2b15      	cmp	r3, #21
 8003ab0:	d8f6      	bhi.n	8003aa0 <_printf_i+0x28>
 8003ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ab8 <_printf_i+0x40>)
 8003ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ab8:	08003b11 	.word	0x08003b11
 8003abc:	08003b25 	.word	0x08003b25
 8003ac0:	08003aa1 	.word	0x08003aa1
 8003ac4:	08003aa1 	.word	0x08003aa1
 8003ac8:	08003aa1 	.word	0x08003aa1
 8003acc:	08003aa1 	.word	0x08003aa1
 8003ad0:	08003b25 	.word	0x08003b25
 8003ad4:	08003aa1 	.word	0x08003aa1
 8003ad8:	08003aa1 	.word	0x08003aa1
 8003adc:	08003aa1 	.word	0x08003aa1
 8003ae0:	08003aa1 	.word	0x08003aa1
 8003ae4:	08003c23 	.word	0x08003c23
 8003ae8:	08003b4f 	.word	0x08003b4f
 8003aec:	08003bdd 	.word	0x08003bdd
 8003af0:	08003aa1 	.word	0x08003aa1
 8003af4:	08003aa1 	.word	0x08003aa1
 8003af8:	08003c45 	.word	0x08003c45
 8003afc:	08003aa1 	.word	0x08003aa1
 8003b00:	08003b4f 	.word	0x08003b4f
 8003b04:	08003aa1 	.word	0x08003aa1
 8003b08:	08003aa1 	.word	0x08003aa1
 8003b0c:	08003be5 	.word	0x08003be5
 8003b10:	6833      	ldr	r3, [r6, #0]
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6032      	str	r2, [r6, #0]
 8003b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b20:	2301      	movs	r3, #1
 8003b22:	e09c      	b.n	8003c5e <_printf_i+0x1e6>
 8003b24:	6833      	ldr	r3, [r6, #0]
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	1d19      	adds	r1, r3, #4
 8003b2a:	6031      	str	r1, [r6, #0]
 8003b2c:	0606      	lsls	r6, r0, #24
 8003b2e:	d501      	bpl.n	8003b34 <_printf_i+0xbc>
 8003b30:	681d      	ldr	r5, [r3, #0]
 8003b32:	e003      	b.n	8003b3c <_printf_i+0xc4>
 8003b34:	0645      	lsls	r5, r0, #25
 8003b36:	d5fb      	bpl.n	8003b30 <_printf_i+0xb8>
 8003b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b3c:	2d00      	cmp	r5, #0
 8003b3e:	da03      	bge.n	8003b48 <_printf_i+0xd0>
 8003b40:	232d      	movs	r3, #45	@ 0x2d
 8003b42:	426d      	negs	r5, r5
 8003b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b48:	230a      	movs	r3, #10
 8003b4a:	4858      	ldr	r0, [pc, #352]	@ (8003cac <_printf_i+0x234>)
 8003b4c:	e011      	b.n	8003b72 <_printf_i+0xfa>
 8003b4e:	6821      	ldr	r1, [r4, #0]
 8003b50:	6833      	ldr	r3, [r6, #0]
 8003b52:	0608      	lsls	r0, r1, #24
 8003b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b58:	d402      	bmi.n	8003b60 <_printf_i+0xe8>
 8003b5a:	0649      	lsls	r1, r1, #25
 8003b5c:	bf48      	it	mi
 8003b5e:	b2ad      	uxthmi	r5, r5
 8003b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b62:	6033      	str	r3, [r6, #0]
 8003b64:	bf14      	ite	ne
 8003b66:	230a      	movne	r3, #10
 8003b68:	2308      	moveq	r3, #8
 8003b6a:	4850      	ldr	r0, [pc, #320]	@ (8003cac <_printf_i+0x234>)
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b72:	6866      	ldr	r6, [r4, #4]
 8003b74:	2e00      	cmp	r6, #0
 8003b76:	60a6      	str	r6, [r4, #8]
 8003b78:	db05      	blt.n	8003b86 <_printf_i+0x10e>
 8003b7a:	6821      	ldr	r1, [r4, #0]
 8003b7c:	432e      	orrs	r6, r5
 8003b7e:	f021 0104 	bic.w	r1, r1, #4
 8003b82:	6021      	str	r1, [r4, #0]
 8003b84:	d04b      	beq.n	8003c1e <_printf_i+0x1a6>
 8003b86:	4616      	mov	r6, r2
 8003b88:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b8c:	fb03 5711 	mls	r7, r3, r1, r5
 8003b90:	5dc7      	ldrb	r7, [r0, r7]
 8003b92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b96:	462f      	mov	r7, r5
 8003b98:	42bb      	cmp	r3, r7
 8003b9a:	460d      	mov	r5, r1
 8003b9c:	d9f4      	bls.n	8003b88 <_printf_i+0x110>
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d10b      	bne.n	8003bba <_printf_i+0x142>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	07df      	lsls	r7, r3, #31
 8003ba6:	d508      	bpl.n	8003bba <_printf_i+0x142>
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	6861      	ldr	r1, [r4, #4]
 8003bac:	4299      	cmp	r1, r3
 8003bae:	bfde      	ittt	le
 8003bb0:	2330      	movle	r3, #48	@ 0x30
 8003bb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bba:	1b92      	subs	r2, r2, r6
 8003bbc:	6122      	str	r2, [r4, #16]
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f8cd a000 	str.w	sl, [sp]
 8003bc8:	aa03      	add	r2, sp, #12
 8003bca:	f7ff fee3 	bl	8003994 <_printf_common>
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d14a      	bne.n	8003c68 <_printf_i+0x1f0>
 8003bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd6:	b004      	add	sp, #16
 8003bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	f043 0320 	orr.w	r3, r3, #32
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	2778      	movs	r7, #120	@ 0x78
 8003be6:	4832      	ldr	r0, [pc, #200]	@ (8003cb0 <_printf_i+0x238>)
 8003be8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	6831      	ldr	r1, [r6, #0]
 8003bf0:	061f      	lsls	r7, r3, #24
 8003bf2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bf6:	d402      	bmi.n	8003bfe <_printf_i+0x186>
 8003bf8:	065f      	lsls	r7, r3, #25
 8003bfa:	bf48      	it	mi
 8003bfc:	b2ad      	uxthmi	r5, r5
 8003bfe:	6031      	str	r1, [r6, #0]
 8003c00:	07d9      	lsls	r1, r3, #31
 8003c02:	bf44      	itt	mi
 8003c04:	f043 0320 	orrmi.w	r3, r3, #32
 8003c08:	6023      	strmi	r3, [r4, #0]
 8003c0a:	b11d      	cbz	r5, 8003c14 <_printf_i+0x19c>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	e7ad      	b.n	8003b6c <_printf_i+0xf4>
 8003c10:	4826      	ldr	r0, [pc, #152]	@ (8003cac <_printf_i+0x234>)
 8003c12:	e7e9      	b.n	8003be8 <_printf_i+0x170>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	f023 0320 	bic.w	r3, r3, #32
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	e7f6      	b.n	8003c0c <_printf_i+0x194>
 8003c1e:	4616      	mov	r6, r2
 8003c20:	e7bd      	b.n	8003b9e <_printf_i+0x126>
 8003c22:	6833      	ldr	r3, [r6, #0]
 8003c24:	6825      	ldr	r5, [r4, #0]
 8003c26:	1d18      	adds	r0, r3, #4
 8003c28:	6961      	ldr	r1, [r4, #20]
 8003c2a:	6030      	str	r0, [r6, #0]
 8003c2c:	062e      	lsls	r6, r5, #24
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	d501      	bpl.n	8003c36 <_printf_i+0x1be>
 8003c32:	6019      	str	r1, [r3, #0]
 8003c34:	e002      	b.n	8003c3c <_printf_i+0x1c4>
 8003c36:	0668      	lsls	r0, r5, #25
 8003c38:	d5fb      	bpl.n	8003c32 <_printf_i+0x1ba>
 8003c3a:	8019      	strh	r1, [r3, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4616      	mov	r6, r2
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	e7bc      	b.n	8003bbe <_printf_i+0x146>
 8003c44:	6833      	ldr	r3, [r6, #0]
 8003c46:	2100      	movs	r1, #0
 8003c48:	1d1a      	adds	r2, r3, #4
 8003c4a:	6032      	str	r2, [r6, #0]
 8003c4c:	681e      	ldr	r6, [r3, #0]
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	4630      	mov	r0, r6
 8003c52:	f000 fc20 	bl	8004496 <memchr>
 8003c56:	b108      	cbz	r0, 8003c5c <_printf_i+0x1e4>
 8003c58:	1b80      	subs	r0, r0, r6
 8003c5a:	6060      	str	r0, [r4, #4]
 8003c5c:	6863      	ldr	r3, [r4, #4]
 8003c5e:	6123      	str	r3, [r4, #16]
 8003c60:	2300      	movs	r3, #0
 8003c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c66:	e7aa      	b.n	8003bbe <_printf_i+0x146>
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	6923      	ldr	r3, [r4, #16]
 8003c70:	47d0      	blx	sl
 8003c72:	3001      	adds	r0, #1
 8003c74:	d0ad      	beq.n	8003bd2 <_printf_i+0x15a>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	079b      	lsls	r3, r3, #30
 8003c7a:	d413      	bmi.n	8003ca4 <_printf_i+0x22c>
 8003c7c:	68e0      	ldr	r0, [r4, #12]
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	4298      	cmp	r0, r3
 8003c82:	bfb8      	it	lt
 8003c84:	4618      	movlt	r0, r3
 8003c86:	e7a6      	b.n	8003bd6 <_printf_i+0x15e>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4632      	mov	r2, r6
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	4640      	mov	r0, r8
 8003c90:	47d0      	blx	sl
 8003c92:	3001      	adds	r0, #1
 8003c94:	d09d      	beq.n	8003bd2 <_printf_i+0x15a>
 8003c96:	3501      	adds	r5, #1
 8003c98:	68e3      	ldr	r3, [r4, #12]
 8003c9a:	9903      	ldr	r1, [sp, #12]
 8003c9c:	1a5b      	subs	r3, r3, r1
 8003c9e:	42ab      	cmp	r3, r5
 8003ca0:	dcf2      	bgt.n	8003c88 <_printf_i+0x210>
 8003ca2:	e7eb      	b.n	8003c7c <_printf_i+0x204>
 8003ca4:	2500      	movs	r5, #0
 8003ca6:	f104 0619 	add.w	r6, r4, #25
 8003caa:	e7f5      	b.n	8003c98 <_printf_i+0x220>
 8003cac:	0800841a 	.word	0x0800841a
 8003cb0:	0800842b 	.word	0x0800842b

08003cb4 <_scanf_float>:
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	9303      	str	r3, [sp, #12]
 8003cbc:	688b      	ldr	r3, [r1, #8]
 8003cbe:	4691      	mov	r9, r2
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003cc6:	bf82      	ittt	hi
 8003cc8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003ccc:	eb03 0b05 	addhi.w	fp, r3, r5
 8003cd0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	f04f 0500 	mov.w	r5, #0
 8003cda:	bf88      	it	hi
 8003cdc:	608b      	strhi	r3, [r1, #8]
 8003cde:	680b      	ldr	r3, [r1, #0]
 8003ce0:	4680      	mov	r8, r0
 8003ce2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003ce6:	f842 3b1c 	str.w	r3, [r2], #28
 8003cea:	460c      	mov	r4, r1
 8003cec:	bf98      	it	ls
 8003cee:	f04f 0b00 	movls.w	fp, #0
 8003cf2:	4616      	mov	r6, r2
 8003cf4:	46aa      	mov	sl, r5
 8003cf6:	462f      	mov	r7, r5
 8003cf8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003cfc:	9201      	str	r2, [sp, #4]
 8003cfe:	9502      	str	r5, [sp, #8]
 8003d00:	68a2      	ldr	r2, [r4, #8]
 8003d02:	b15a      	cbz	r2, 8003d1c <_scanf_float+0x68>
 8003d04:	f8d9 3000 	ldr.w	r3, [r9]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8003d0c:	d862      	bhi.n	8003dd4 <_scanf_float+0x120>
 8003d0e:	2b40      	cmp	r3, #64	@ 0x40
 8003d10:	d83a      	bhi.n	8003d88 <_scanf_float+0xd4>
 8003d12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003d16:	b2c8      	uxtb	r0, r1
 8003d18:	280e      	cmp	r0, #14
 8003d1a:	d938      	bls.n	8003d8e <_scanf_float+0xda>
 8003d1c:	b11f      	cbz	r7, 8003d26 <_scanf_float+0x72>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d2a:	f1ba 0f01 	cmp.w	sl, #1
 8003d2e:	f200 8114 	bhi.w	8003f5a <_scanf_float+0x2a6>
 8003d32:	9b01      	ldr	r3, [sp, #4]
 8003d34:	429e      	cmp	r6, r3
 8003d36:	f200 8105 	bhi.w	8003f44 <_scanf_float+0x290>
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	b007      	add	sp, #28
 8003d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d42:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003d46:	2a0d      	cmp	r2, #13
 8003d48:	d8e8      	bhi.n	8003d1c <_scanf_float+0x68>
 8003d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d50 <_scanf_float+0x9c>)
 8003d4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003d50:	08003e99 	.word	0x08003e99
 8003d54:	08003d1d 	.word	0x08003d1d
 8003d58:	08003d1d 	.word	0x08003d1d
 8003d5c:	08003d1d 	.word	0x08003d1d
 8003d60:	08003ef5 	.word	0x08003ef5
 8003d64:	08003ecf 	.word	0x08003ecf
 8003d68:	08003d1d 	.word	0x08003d1d
 8003d6c:	08003d1d 	.word	0x08003d1d
 8003d70:	08003ea7 	.word	0x08003ea7
 8003d74:	08003d1d 	.word	0x08003d1d
 8003d78:	08003d1d 	.word	0x08003d1d
 8003d7c:	08003d1d 	.word	0x08003d1d
 8003d80:	08003d1d 	.word	0x08003d1d
 8003d84:	08003e63 	.word	0x08003e63
 8003d88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003d8c:	e7db      	b.n	8003d46 <_scanf_float+0x92>
 8003d8e:	290e      	cmp	r1, #14
 8003d90:	d8c4      	bhi.n	8003d1c <_scanf_float+0x68>
 8003d92:	a001      	add	r0, pc, #4	@ (adr r0, 8003d98 <_scanf_float+0xe4>)
 8003d94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003d98:	08003e53 	.word	0x08003e53
 8003d9c:	08003d1d 	.word	0x08003d1d
 8003da0:	08003e53 	.word	0x08003e53
 8003da4:	08003ee3 	.word	0x08003ee3
 8003da8:	08003d1d 	.word	0x08003d1d
 8003dac:	08003df5 	.word	0x08003df5
 8003db0:	08003e39 	.word	0x08003e39
 8003db4:	08003e39 	.word	0x08003e39
 8003db8:	08003e39 	.word	0x08003e39
 8003dbc:	08003e39 	.word	0x08003e39
 8003dc0:	08003e39 	.word	0x08003e39
 8003dc4:	08003e39 	.word	0x08003e39
 8003dc8:	08003e39 	.word	0x08003e39
 8003dcc:	08003e39 	.word	0x08003e39
 8003dd0:	08003e39 	.word	0x08003e39
 8003dd4:	2b6e      	cmp	r3, #110	@ 0x6e
 8003dd6:	d809      	bhi.n	8003dec <_scanf_float+0x138>
 8003dd8:	2b60      	cmp	r3, #96	@ 0x60
 8003dda:	d8b2      	bhi.n	8003d42 <_scanf_float+0x8e>
 8003ddc:	2b54      	cmp	r3, #84	@ 0x54
 8003dde:	d07b      	beq.n	8003ed8 <_scanf_float+0x224>
 8003de0:	2b59      	cmp	r3, #89	@ 0x59
 8003de2:	d19b      	bne.n	8003d1c <_scanf_float+0x68>
 8003de4:	2d07      	cmp	r5, #7
 8003de6:	d199      	bne.n	8003d1c <_scanf_float+0x68>
 8003de8:	2508      	movs	r5, #8
 8003dea:	e02f      	b.n	8003e4c <_scanf_float+0x198>
 8003dec:	2b74      	cmp	r3, #116	@ 0x74
 8003dee:	d073      	beq.n	8003ed8 <_scanf_float+0x224>
 8003df0:	2b79      	cmp	r3, #121	@ 0x79
 8003df2:	e7f6      	b.n	8003de2 <_scanf_float+0x12e>
 8003df4:	6821      	ldr	r1, [r4, #0]
 8003df6:	05c8      	lsls	r0, r1, #23
 8003df8:	d51e      	bpl.n	8003e38 <_scanf_float+0x184>
 8003dfa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003dfe:	6021      	str	r1, [r4, #0]
 8003e00:	3701      	adds	r7, #1
 8003e02:	f1bb 0f00 	cmp.w	fp, #0
 8003e06:	d003      	beq.n	8003e10 <_scanf_float+0x15c>
 8003e08:	3201      	adds	r2, #1
 8003e0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e0e:	60a2      	str	r2, [r4, #8]
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60a3      	str	r3, [r4, #8]
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	6123      	str	r3, [r4, #16]
 8003e1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f8c9 3004 	str.w	r3, [r9, #4]
 8003e28:	f340 8083 	ble.w	8003f32 <_scanf_float+0x27e>
 8003e2c:	f8d9 3000 	ldr.w	r3, [r9]
 8003e30:	3301      	adds	r3, #1
 8003e32:	f8c9 3000 	str.w	r3, [r9]
 8003e36:	e763      	b.n	8003d00 <_scanf_float+0x4c>
 8003e38:	eb1a 0105 	adds.w	r1, sl, r5
 8003e3c:	f47f af6e 	bne.w	8003d1c <_scanf_float+0x68>
 8003e40:	460d      	mov	r5, r1
 8003e42:	468a      	mov	sl, r1
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003e4a:	6022      	str	r2, [r4, #0]
 8003e4c:	f806 3b01 	strb.w	r3, [r6], #1
 8003e50:	e7de      	b.n	8003e10 <_scanf_float+0x15c>
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	0610      	lsls	r0, r2, #24
 8003e56:	f57f af61 	bpl.w	8003d1c <_scanf_float+0x68>
 8003e5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e5e:	6022      	str	r2, [r4, #0]
 8003e60:	e7f4      	b.n	8003e4c <_scanf_float+0x198>
 8003e62:	f1ba 0f00 	cmp.w	sl, #0
 8003e66:	d10c      	bne.n	8003e82 <_scanf_float+0x1ce>
 8003e68:	b977      	cbnz	r7, 8003e88 <_scanf_float+0x1d4>
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003e70:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003e74:	d108      	bne.n	8003e88 <_scanf_float+0x1d4>
 8003e76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003e7a:	f04f 0a01 	mov.w	sl, #1
 8003e7e:	6022      	str	r2, [r4, #0]
 8003e80:	e7e4      	b.n	8003e4c <_scanf_float+0x198>
 8003e82:	f1ba 0f02 	cmp.w	sl, #2
 8003e86:	d051      	beq.n	8003f2c <_scanf_float+0x278>
 8003e88:	2d01      	cmp	r5, #1
 8003e8a:	d002      	beq.n	8003e92 <_scanf_float+0x1de>
 8003e8c:	2d04      	cmp	r5, #4
 8003e8e:	f47f af45 	bne.w	8003d1c <_scanf_float+0x68>
 8003e92:	3501      	adds	r5, #1
 8003e94:	b2ed      	uxtb	r5, r5
 8003e96:	e7d9      	b.n	8003e4c <_scanf_float+0x198>
 8003e98:	f1ba 0f01 	cmp.w	sl, #1
 8003e9c:	f47f af3e 	bne.w	8003d1c <_scanf_float+0x68>
 8003ea0:	f04f 0a02 	mov.w	sl, #2
 8003ea4:	e7d2      	b.n	8003e4c <_scanf_float+0x198>
 8003ea6:	b975      	cbnz	r5, 8003ec6 <_scanf_float+0x212>
 8003ea8:	2f00      	cmp	r7, #0
 8003eaa:	f47f af38 	bne.w	8003d1e <_scanf_float+0x6a>
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003eb4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003eb8:	f040 80ff 	bne.w	80040ba <_scanf_float+0x406>
 8003ebc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003ec0:	2501      	movs	r5, #1
 8003ec2:	6022      	str	r2, [r4, #0]
 8003ec4:	e7c2      	b.n	8003e4c <_scanf_float+0x198>
 8003ec6:	2d03      	cmp	r5, #3
 8003ec8:	d0e3      	beq.n	8003e92 <_scanf_float+0x1de>
 8003eca:	2d05      	cmp	r5, #5
 8003ecc:	e7df      	b.n	8003e8e <_scanf_float+0x1da>
 8003ece:	2d02      	cmp	r5, #2
 8003ed0:	f47f af24 	bne.w	8003d1c <_scanf_float+0x68>
 8003ed4:	2503      	movs	r5, #3
 8003ed6:	e7b9      	b.n	8003e4c <_scanf_float+0x198>
 8003ed8:	2d06      	cmp	r5, #6
 8003eda:	f47f af1f 	bne.w	8003d1c <_scanf_float+0x68>
 8003ede:	2507      	movs	r5, #7
 8003ee0:	e7b4      	b.n	8003e4c <_scanf_float+0x198>
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	0591      	lsls	r1, r2, #22
 8003ee6:	f57f af19 	bpl.w	8003d1c <_scanf_float+0x68>
 8003eea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003eee:	6022      	str	r2, [r4, #0]
 8003ef0:	9702      	str	r7, [sp, #8]
 8003ef2:	e7ab      	b.n	8003e4c <_scanf_float+0x198>
 8003ef4:	6822      	ldr	r2, [r4, #0]
 8003ef6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003efa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003efe:	d005      	beq.n	8003f0c <_scanf_float+0x258>
 8003f00:	0550      	lsls	r0, r2, #21
 8003f02:	f57f af0b 	bpl.w	8003d1c <_scanf_float+0x68>
 8003f06:	2f00      	cmp	r7, #0
 8003f08:	f000 80d7 	beq.w	80040ba <_scanf_float+0x406>
 8003f0c:	0591      	lsls	r1, r2, #22
 8003f0e:	bf58      	it	pl
 8003f10:	9902      	ldrpl	r1, [sp, #8]
 8003f12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003f16:	bf58      	it	pl
 8003f18:	1a79      	subpl	r1, r7, r1
 8003f1a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003f1e:	f04f 0700 	mov.w	r7, #0
 8003f22:	bf58      	it	pl
 8003f24:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	e78f      	b.n	8003e4c <_scanf_float+0x198>
 8003f2c:	f04f 0a03 	mov.w	sl, #3
 8003f30:	e78c      	b.n	8003e4c <_scanf_float+0x198>
 8003f32:	4649      	mov	r1, r9
 8003f34:	4640      	mov	r0, r8
 8003f36:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003f3a:	4798      	blx	r3
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	f43f aedf 	beq.w	8003d00 <_scanf_float+0x4c>
 8003f42:	e6eb      	b.n	8003d1c <_scanf_float+0x68>
 8003f44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f48:	464a      	mov	r2, r9
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f50:	4798      	blx	r3
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	6123      	str	r3, [r4, #16]
 8003f58:	e6eb      	b.n	8003d32 <_scanf_float+0x7e>
 8003f5a:	1e6b      	subs	r3, r5, #1
 8003f5c:	2b06      	cmp	r3, #6
 8003f5e:	d824      	bhi.n	8003faa <_scanf_float+0x2f6>
 8003f60:	2d02      	cmp	r5, #2
 8003f62:	d836      	bhi.n	8003fd2 <_scanf_float+0x31e>
 8003f64:	9b01      	ldr	r3, [sp, #4]
 8003f66:	429e      	cmp	r6, r3
 8003f68:	f67f aee7 	bls.w	8003d3a <_scanf_float+0x86>
 8003f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f70:	464a      	mov	r2, r9
 8003f72:	4640      	mov	r0, r8
 8003f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f78:	4798      	blx	r3
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	6123      	str	r3, [r4, #16]
 8003f80:	e7f0      	b.n	8003f64 <_scanf_float+0x2b0>
 8003f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f86:	464a      	mov	r2, r9
 8003f88:	4640      	mov	r0, r8
 8003f8a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003f8e:	4798      	blx	r3
 8003f90:	6923      	ldr	r3, [r4, #16]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	6123      	str	r3, [r4, #16]
 8003f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f9a:	fa5f fa8a 	uxtb.w	sl, sl
 8003f9e:	f1ba 0f02 	cmp.w	sl, #2
 8003fa2:	d1ee      	bne.n	8003f82 <_scanf_float+0x2ce>
 8003fa4:	3d03      	subs	r5, #3
 8003fa6:	b2ed      	uxtb	r5, r5
 8003fa8:	1b76      	subs	r6, r6, r5
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	05da      	lsls	r2, r3, #23
 8003fae:	d530      	bpl.n	8004012 <_scanf_float+0x35e>
 8003fb0:	055b      	lsls	r3, r3, #21
 8003fb2:	d511      	bpl.n	8003fd8 <_scanf_float+0x324>
 8003fb4:	9b01      	ldr	r3, [sp, #4]
 8003fb6:	429e      	cmp	r6, r3
 8003fb8:	f67f aebf 	bls.w	8003d3a <_scanf_float+0x86>
 8003fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003fc8:	4798      	blx	r3
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	6123      	str	r3, [r4, #16]
 8003fd0:	e7f0      	b.n	8003fb4 <_scanf_float+0x300>
 8003fd2:	46aa      	mov	sl, r5
 8003fd4:	46b3      	mov	fp, r6
 8003fd6:	e7de      	b.n	8003f96 <_scanf_float+0x2e2>
 8003fd8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	2965      	cmp	r1, #101	@ 0x65
 8003fe0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fe4:	f106 35ff 	add.w	r5, r6, #4294967295
 8003fe8:	6123      	str	r3, [r4, #16]
 8003fea:	d00c      	beq.n	8004006 <_scanf_float+0x352>
 8003fec:	2945      	cmp	r1, #69	@ 0x45
 8003fee:	d00a      	beq.n	8004006 <_scanf_float+0x352>
 8003ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ff4:	464a      	mov	r2, r9
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	4798      	blx	r3
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004000:	3b01      	subs	r3, #1
 8004002:	1eb5      	subs	r5, r6, #2
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	464a      	mov	r2, r9
 8004008:	4640      	mov	r0, r8
 800400a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800400e:	4798      	blx	r3
 8004010:	462e      	mov	r6, r5
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	f012 0210 	ands.w	r2, r2, #16
 8004018:	d001      	beq.n	800401e <_scanf_float+0x36a>
 800401a:	2000      	movs	r0, #0
 800401c:	e68e      	b.n	8003d3c <_scanf_float+0x88>
 800401e:	7032      	strb	r2, [r6, #0]
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402a:	d125      	bne.n	8004078 <_scanf_float+0x3c4>
 800402c:	9b02      	ldr	r3, [sp, #8]
 800402e:	429f      	cmp	r7, r3
 8004030:	d00a      	beq.n	8004048 <_scanf_float+0x394>
 8004032:	1bda      	subs	r2, r3, r7
 8004034:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004038:	429e      	cmp	r6, r3
 800403a:	bf28      	it	cs
 800403c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004040:	4630      	mov	r0, r6
 8004042:	491f      	ldr	r1, [pc, #124]	@ (80040c0 <_scanf_float+0x40c>)
 8004044:	f000 f902 	bl	800424c <siprintf>
 8004048:	2200      	movs	r2, #0
 800404a:	4640      	mov	r0, r8
 800404c:	9901      	ldr	r1, [sp, #4]
 800404e:	f002 fc2b 	bl	80068a8 <_strtod_r>
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	6825      	ldr	r5, [r4, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f015 0f02 	tst.w	r5, #2
 800405c:	4606      	mov	r6, r0
 800405e:	460f      	mov	r7, r1
 8004060:	f103 0204 	add.w	r2, r3, #4
 8004064:	d015      	beq.n	8004092 <_scanf_float+0x3de>
 8004066:	9903      	ldr	r1, [sp, #12]
 8004068:	600a      	str	r2, [r1, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	e9c3 6700 	strd	r6, r7, [r3]
 8004070:	68e3      	ldr	r3, [r4, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60e3      	str	r3, [r4, #12]
 8004076:	e7d0      	b.n	800401a <_scanf_float+0x366>
 8004078:	9b04      	ldr	r3, [sp, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0e4      	beq.n	8004048 <_scanf_float+0x394>
 800407e:	9905      	ldr	r1, [sp, #20]
 8004080:	230a      	movs	r3, #10
 8004082:	4640      	mov	r0, r8
 8004084:	3101      	adds	r1, #1
 8004086:	f002 fc8f 	bl	80069a8 <_strtol_r>
 800408a:	9b04      	ldr	r3, [sp, #16]
 800408c:	9e05      	ldr	r6, [sp, #20]
 800408e:	1ac2      	subs	r2, r0, r3
 8004090:	e7d0      	b.n	8004034 <_scanf_float+0x380>
 8004092:	076d      	lsls	r5, r5, #29
 8004094:	d4e7      	bmi.n	8004066 <_scanf_float+0x3b2>
 8004096:	9d03      	ldr	r5, [sp, #12]
 8004098:	602a      	str	r2, [r5, #0]
 800409a:	681d      	ldr	r5, [r3, #0]
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	f7fc fcb4 	bl	8000a0c <__aeabi_dcmpun>
 80040a4:	b120      	cbz	r0, 80040b0 <_scanf_float+0x3fc>
 80040a6:	4807      	ldr	r0, [pc, #28]	@ (80040c4 <_scanf_float+0x410>)
 80040a8:	f000 fa04 	bl	80044b4 <nanf>
 80040ac:	6028      	str	r0, [r5, #0]
 80040ae:	e7df      	b.n	8004070 <_scanf_float+0x3bc>
 80040b0:	4630      	mov	r0, r6
 80040b2:	4639      	mov	r1, r7
 80040b4:	f7fc fd08 	bl	8000ac8 <__aeabi_d2f>
 80040b8:	e7f8      	b.n	80040ac <_scanf_float+0x3f8>
 80040ba:	2700      	movs	r7, #0
 80040bc:	e633      	b.n	8003d26 <_scanf_float+0x72>
 80040be:	bf00      	nop
 80040c0:	0800843c 	.word	0x0800843c
 80040c4:	08008598 	.word	0x08008598

080040c8 <std>:
 80040c8:	2300      	movs	r3, #0
 80040ca:	b510      	push	{r4, lr}
 80040cc:	4604      	mov	r4, r0
 80040ce:	e9c0 3300 	strd	r3, r3, [r0]
 80040d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040d6:	6083      	str	r3, [r0, #8]
 80040d8:	8181      	strh	r1, [r0, #12]
 80040da:	6643      	str	r3, [r0, #100]	@ 0x64
 80040dc:	81c2      	strh	r2, [r0, #14]
 80040de:	6183      	str	r3, [r0, #24]
 80040e0:	4619      	mov	r1, r3
 80040e2:	2208      	movs	r2, #8
 80040e4:	305c      	adds	r0, #92	@ 0x5c
 80040e6:	f000 f944 	bl	8004372 <memset>
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <std+0x58>)
 80040ec:	6224      	str	r4, [r4, #32]
 80040ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <std+0x5c>)
 80040f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <std+0x60>)
 80040f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040f8:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <std+0x64>)
 80040fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <std+0x68>)
 80040fe:	429c      	cmp	r4, r3
 8004100:	d006      	beq.n	8004110 <std+0x48>
 8004102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004106:	4294      	cmp	r4, r2
 8004108:	d002      	beq.n	8004110 <std+0x48>
 800410a:	33d0      	adds	r3, #208	@ 0xd0
 800410c:	429c      	cmp	r4, r3
 800410e:	d105      	bne.n	800411c <std+0x54>
 8004110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004118:	f000 b9ba 	b.w	8004490 <__retarget_lock_init_recursive>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	bf00      	nop
 8004120:	080042e9 	.word	0x080042e9
 8004124:	0800430f 	.word	0x0800430f
 8004128:	08004347 	.word	0x08004347
 800412c:	0800436b 	.word	0x0800436b
 8004130:	20000320 	.word	0x20000320

08004134 <stdio_exit_handler>:
 8004134:	4a02      	ldr	r2, [pc, #8]	@ (8004140 <stdio_exit_handler+0xc>)
 8004136:	4903      	ldr	r1, [pc, #12]	@ (8004144 <stdio_exit_handler+0x10>)
 8004138:	4803      	ldr	r0, [pc, #12]	@ (8004148 <stdio_exit_handler+0x14>)
 800413a:	f000 b869 	b.w	8004210 <_fwalk_sglue>
 800413e:	bf00      	nop
 8004140:	2000000c 	.word	0x2000000c
 8004144:	08007391 	.word	0x08007391
 8004148:	2000001c 	.word	0x2000001c

0800414c <cleanup_stdio>:
 800414c:	6841      	ldr	r1, [r0, #4]
 800414e:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <cleanup_stdio+0x34>)
 8004150:	b510      	push	{r4, lr}
 8004152:	4299      	cmp	r1, r3
 8004154:	4604      	mov	r4, r0
 8004156:	d001      	beq.n	800415c <cleanup_stdio+0x10>
 8004158:	f003 f91a 	bl	8007390 <_fflush_r>
 800415c:	68a1      	ldr	r1, [r4, #8]
 800415e:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <cleanup_stdio+0x38>)
 8004160:	4299      	cmp	r1, r3
 8004162:	d002      	beq.n	800416a <cleanup_stdio+0x1e>
 8004164:	4620      	mov	r0, r4
 8004166:	f003 f913 	bl	8007390 <_fflush_r>
 800416a:	68e1      	ldr	r1, [r4, #12]
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <cleanup_stdio+0x3c>)
 800416e:	4299      	cmp	r1, r3
 8004170:	d004      	beq.n	800417c <cleanup_stdio+0x30>
 8004172:	4620      	mov	r0, r4
 8004174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004178:	f003 b90a 	b.w	8007390 <_fflush_r>
 800417c:	bd10      	pop	{r4, pc}
 800417e:	bf00      	nop
 8004180:	20000320 	.word	0x20000320
 8004184:	20000388 	.word	0x20000388
 8004188:	200003f0 	.word	0x200003f0

0800418c <global_stdio_init.part.0>:
 800418c:	b510      	push	{r4, lr}
 800418e:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <global_stdio_init.part.0+0x30>)
 8004190:	4c0b      	ldr	r4, [pc, #44]	@ (80041c0 <global_stdio_init.part.0+0x34>)
 8004192:	4a0c      	ldr	r2, [pc, #48]	@ (80041c4 <global_stdio_init.part.0+0x38>)
 8004194:	4620      	mov	r0, r4
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	2104      	movs	r1, #4
 800419a:	2200      	movs	r2, #0
 800419c:	f7ff ff94 	bl	80040c8 <std>
 80041a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041a4:	2201      	movs	r2, #1
 80041a6:	2109      	movs	r1, #9
 80041a8:	f7ff ff8e 	bl	80040c8 <std>
 80041ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041b0:	2202      	movs	r2, #2
 80041b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b6:	2112      	movs	r1, #18
 80041b8:	f7ff bf86 	b.w	80040c8 <std>
 80041bc:	20000458 	.word	0x20000458
 80041c0:	20000320 	.word	0x20000320
 80041c4:	08004135 	.word	0x08004135

080041c8 <__sfp_lock_acquire>:
 80041c8:	4801      	ldr	r0, [pc, #4]	@ (80041d0 <__sfp_lock_acquire+0x8>)
 80041ca:	f000 b962 	b.w	8004492 <__retarget_lock_acquire_recursive>
 80041ce:	bf00      	nop
 80041d0:	20000461 	.word	0x20000461

080041d4 <__sfp_lock_release>:
 80041d4:	4801      	ldr	r0, [pc, #4]	@ (80041dc <__sfp_lock_release+0x8>)
 80041d6:	f000 b95d 	b.w	8004494 <__retarget_lock_release_recursive>
 80041da:	bf00      	nop
 80041dc:	20000461 	.word	0x20000461

080041e0 <__sinit>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4604      	mov	r4, r0
 80041e4:	f7ff fff0 	bl	80041c8 <__sfp_lock_acquire>
 80041e8:	6a23      	ldr	r3, [r4, #32]
 80041ea:	b11b      	cbz	r3, 80041f4 <__sinit+0x14>
 80041ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f0:	f7ff bff0 	b.w	80041d4 <__sfp_lock_release>
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <__sinit+0x28>)
 80041f6:	6223      	str	r3, [r4, #32]
 80041f8:	4b04      	ldr	r3, [pc, #16]	@ (800420c <__sinit+0x2c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f5      	bne.n	80041ec <__sinit+0xc>
 8004200:	f7ff ffc4 	bl	800418c <global_stdio_init.part.0>
 8004204:	e7f2      	b.n	80041ec <__sinit+0xc>
 8004206:	bf00      	nop
 8004208:	0800414d 	.word	0x0800414d
 800420c:	20000458 	.word	0x20000458

08004210 <_fwalk_sglue>:
 8004210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004214:	4607      	mov	r7, r0
 8004216:	4688      	mov	r8, r1
 8004218:	4614      	mov	r4, r2
 800421a:	2600      	movs	r6, #0
 800421c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004220:	f1b9 0901 	subs.w	r9, r9, #1
 8004224:	d505      	bpl.n	8004232 <_fwalk_sglue+0x22>
 8004226:	6824      	ldr	r4, [r4, #0]
 8004228:	2c00      	cmp	r4, #0
 800422a:	d1f7      	bne.n	800421c <_fwalk_sglue+0xc>
 800422c:	4630      	mov	r0, r6
 800422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004232:	89ab      	ldrh	r3, [r5, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d907      	bls.n	8004248 <_fwalk_sglue+0x38>
 8004238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800423c:	3301      	adds	r3, #1
 800423e:	d003      	beq.n	8004248 <_fwalk_sglue+0x38>
 8004240:	4629      	mov	r1, r5
 8004242:	4638      	mov	r0, r7
 8004244:	47c0      	blx	r8
 8004246:	4306      	orrs	r6, r0
 8004248:	3568      	adds	r5, #104	@ 0x68
 800424a:	e7e9      	b.n	8004220 <_fwalk_sglue+0x10>

0800424c <siprintf>:
 800424c:	b40e      	push	{r1, r2, r3}
 800424e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004252:	b510      	push	{r4, lr}
 8004254:	2400      	movs	r4, #0
 8004256:	b09d      	sub	sp, #116	@ 0x74
 8004258:	ab1f      	add	r3, sp, #124	@ 0x7c
 800425a:	9002      	str	r0, [sp, #8]
 800425c:	9006      	str	r0, [sp, #24]
 800425e:	9107      	str	r1, [sp, #28]
 8004260:	9104      	str	r1, [sp, #16]
 8004262:	4809      	ldr	r0, [pc, #36]	@ (8004288 <siprintf+0x3c>)
 8004264:	4909      	ldr	r1, [pc, #36]	@ (800428c <siprintf+0x40>)
 8004266:	f853 2b04 	ldr.w	r2, [r3], #4
 800426a:	9105      	str	r1, [sp, #20]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	a902      	add	r1, sp, #8
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004274:	f002 fbf6 	bl	8006a64 <_svfiprintf_r>
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	701c      	strb	r4, [r3, #0]
 800427c:	b01d      	add	sp, #116	@ 0x74
 800427e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004282:	b003      	add	sp, #12
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000018 	.word	0x20000018
 800428c:	ffff0208 	.word	0xffff0208

08004290 <siscanf>:
 8004290:	b40e      	push	{r1, r2, r3}
 8004292:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004296:	b570      	push	{r4, r5, r6, lr}
 8004298:	2500      	movs	r5, #0
 800429a:	b09d      	sub	sp, #116	@ 0x74
 800429c:	ac21      	add	r4, sp, #132	@ 0x84
 800429e:	f854 6b04 	ldr.w	r6, [r4], #4
 80042a2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80042a6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80042a8:	9002      	str	r0, [sp, #8]
 80042aa:	9006      	str	r0, [sp, #24]
 80042ac:	f7fb ff50 	bl	8000150 <strlen>
 80042b0:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <siscanf+0x50>)
 80042b2:	9003      	str	r0, [sp, #12]
 80042b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042ba:	9007      	str	r0, [sp, #28]
 80042bc:	4809      	ldr	r0, [pc, #36]	@ (80042e4 <siscanf+0x54>)
 80042be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80042c2:	4632      	mov	r2, r6
 80042c4:	4623      	mov	r3, r4
 80042c6:	a902      	add	r1, sp, #8
 80042c8:	6800      	ldr	r0, [r0, #0]
 80042ca:	950f      	str	r5, [sp, #60]	@ 0x3c
 80042cc:	9514      	str	r5, [sp, #80]	@ 0x50
 80042ce:	9401      	str	r4, [sp, #4]
 80042d0:	f002 fd1e 	bl	8006d10 <__ssvfiscanf_r>
 80042d4:	b01d      	add	sp, #116	@ 0x74
 80042d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042da:	b003      	add	sp, #12
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	0800430b 	.word	0x0800430b
 80042e4:	20000018 	.word	0x20000018

080042e8 <__sread>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	460c      	mov	r4, r1
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	f000 f880 	bl	80043f4 <_read_r>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	bfab      	itete	ge
 80042f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042fa:	89a3      	ldrhlt	r3, [r4, #12]
 80042fc:	181b      	addge	r3, r3, r0
 80042fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004302:	bfac      	ite	ge
 8004304:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004306:	81a3      	strhlt	r3, [r4, #12]
 8004308:	bd10      	pop	{r4, pc}

0800430a <__seofread>:
 800430a:	2000      	movs	r0, #0
 800430c:	4770      	bx	lr

0800430e <__swrite>:
 800430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004312:	461f      	mov	r7, r3
 8004314:	898b      	ldrh	r3, [r1, #12]
 8004316:	4605      	mov	r5, r0
 8004318:	05db      	lsls	r3, r3, #23
 800431a:	460c      	mov	r4, r1
 800431c:	4616      	mov	r6, r2
 800431e:	d505      	bpl.n	800432c <__swrite+0x1e>
 8004320:	2302      	movs	r3, #2
 8004322:	2200      	movs	r2, #0
 8004324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004328:	f000 f852 	bl	80043d0 <_lseek_r>
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	4632      	mov	r2, r6
 8004330:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	4628      	mov	r0, r5
 8004338:	463b      	mov	r3, r7
 800433a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004342:	f000 b869 	b.w	8004418 <_write_r>

08004346 <__sseek>:
 8004346:	b510      	push	{r4, lr}
 8004348:	460c      	mov	r4, r1
 800434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434e:	f000 f83f 	bl	80043d0 <_lseek_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	bf15      	itete	ne
 8004358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800435a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800435e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004362:	81a3      	strheq	r3, [r4, #12]
 8004364:	bf18      	it	ne
 8004366:	81a3      	strhne	r3, [r4, #12]
 8004368:	bd10      	pop	{r4, pc}

0800436a <__sclose>:
 800436a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436e:	f000 b81f 	b.w	80043b0 <_close_r>

08004372 <memset>:
 8004372:	4603      	mov	r3, r0
 8004374:	4402      	add	r2, r0
 8004376:	4293      	cmp	r3, r2
 8004378:	d100      	bne.n	800437c <memset+0xa>
 800437a:	4770      	bx	lr
 800437c:	f803 1b01 	strb.w	r1, [r3], #1
 8004380:	e7f9      	b.n	8004376 <memset+0x4>

08004382 <strncmp>:
 8004382:	b510      	push	{r4, lr}
 8004384:	b16a      	cbz	r2, 80043a2 <strncmp+0x20>
 8004386:	3901      	subs	r1, #1
 8004388:	1884      	adds	r4, r0, r2
 800438a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800438e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004392:	429a      	cmp	r2, r3
 8004394:	d103      	bne.n	800439e <strncmp+0x1c>
 8004396:	42a0      	cmp	r0, r4
 8004398:	d001      	beq.n	800439e <strncmp+0x1c>
 800439a:	2a00      	cmp	r2, #0
 800439c:	d1f5      	bne.n	800438a <strncmp+0x8>
 800439e:	1ad0      	subs	r0, r2, r3
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	4610      	mov	r0, r2
 80043a4:	e7fc      	b.n	80043a0 <strncmp+0x1e>
	...

080043a8 <_localeconv_r>:
 80043a8:	4800      	ldr	r0, [pc, #0]	@ (80043ac <_localeconv_r+0x4>)
 80043aa:	4770      	bx	lr
 80043ac:	20000158 	.word	0x20000158

080043b0 <_close_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	2300      	movs	r3, #0
 80043b4:	4d05      	ldr	r5, [pc, #20]	@ (80043cc <_close_r+0x1c>)
 80043b6:	4604      	mov	r4, r0
 80043b8:	4608      	mov	r0, r1
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	f7fd fa37 	bl	800182e <_close>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d102      	bne.n	80043ca <_close_r+0x1a>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	b103      	cbz	r3, 80043ca <_close_r+0x1a>
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	2000045c 	.word	0x2000045c

080043d0 <_lseek_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	2200      	movs	r2, #0
 80043da:	4d05      	ldr	r5, [pc, #20]	@ (80043f0 <_lseek_r+0x20>)
 80043dc:	602a      	str	r2, [r5, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	f7fd fa49 	bl	8001876 <_lseek>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d102      	bne.n	80043ee <_lseek_r+0x1e>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	b103      	cbz	r3, 80043ee <_lseek_r+0x1e>
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	2000045c 	.word	0x2000045c

080043f4 <_read_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4604      	mov	r4, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	2200      	movs	r2, #0
 80043fe:	4d05      	ldr	r5, [pc, #20]	@ (8004414 <_read_r+0x20>)
 8004400:	602a      	str	r2, [r5, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f7fd f9da 	bl	80017bc <_read>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_read_r+0x1e>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_read_r+0x1e>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	2000045c 	.word	0x2000045c

08004418 <_write_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	2200      	movs	r2, #0
 8004422:	4d05      	ldr	r5, [pc, #20]	@ (8004438 <_write_r+0x20>)
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f7fd f9e5 	bl	80017f6 <_write>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_write_r+0x1e>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_write_r+0x1e>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	2000045c 	.word	0x2000045c

0800443c <__errno>:
 800443c:	4b01      	ldr	r3, [pc, #4]	@ (8004444 <__errno+0x8>)
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000018 	.word	0x20000018

08004448 <__libc_init_array>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	2600      	movs	r6, #0
 800444c:	4d0c      	ldr	r5, [pc, #48]	@ (8004480 <__libc_init_array+0x38>)
 800444e:	4c0d      	ldr	r4, [pc, #52]	@ (8004484 <__libc_init_array+0x3c>)
 8004450:	1b64      	subs	r4, r4, r5
 8004452:	10a4      	asrs	r4, r4, #2
 8004454:	42a6      	cmp	r6, r4
 8004456:	d109      	bne.n	800446c <__libc_init_array+0x24>
 8004458:	f003 ff58 	bl	800830c <_init>
 800445c:	2600      	movs	r6, #0
 800445e:	4d0a      	ldr	r5, [pc, #40]	@ (8004488 <__libc_init_array+0x40>)
 8004460:	4c0a      	ldr	r4, [pc, #40]	@ (800448c <__libc_init_array+0x44>)
 8004462:	1b64      	subs	r4, r4, r5
 8004464:	10a4      	asrs	r4, r4, #2
 8004466:	42a6      	cmp	r6, r4
 8004468:	d105      	bne.n	8004476 <__libc_init_array+0x2e>
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004470:	4798      	blx	r3
 8004472:	3601      	adds	r6, #1
 8004474:	e7ee      	b.n	8004454 <__libc_init_array+0xc>
 8004476:	f855 3b04 	ldr.w	r3, [r5], #4
 800447a:	4798      	blx	r3
 800447c:	3601      	adds	r6, #1
 800447e:	e7f2      	b.n	8004466 <__libc_init_array+0x1e>
 8004480:	08008854 	.word	0x08008854
 8004484:	08008854 	.word	0x08008854
 8004488:	08008854 	.word	0x08008854
 800448c:	08008858 	.word	0x08008858

08004490 <__retarget_lock_init_recursive>:
 8004490:	4770      	bx	lr

08004492 <__retarget_lock_acquire_recursive>:
 8004492:	4770      	bx	lr

08004494 <__retarget_lock_release_recursive>:
 8004494:	4770      	bx	lr

08004496 <memchr>:
 8004496:	4603      	mov	r3, r0
 8004498:	b510      	push	{r4, lr}
 800449a:	b2c9      	uxtb	r1, r1
 800449c:	4402      	add	r2, r0
 800449e:	4293      	cmp	r3, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	d101      	bne.n	80044a8 <memchr+0x12>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e003      	b.n	80044b0 <memchr+0x1a>
 80044a8:	7804      	ldrb	r4, [r0, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	428c      	cmp	r4, r1
 80044ae:	d1f6      	bne.n	800449e <memchr+0x8>
 80044b0:	bd10      	pop	{r4, pc}
	...

080044b4 <nanf>:
 80044b4:	4800      	ldr	r0, [pc, #0]	@ (80044b8 <nanf+0x4>)
 80044b6:	4770      	bx	lr
 80044b8:	7fc00000 	.word	0x7fc00000

080044bc <quorem>:
 80044bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	6903      	ldr	r3, [r0, #16]
 80044c2:	690c      	ldr	r4, [r1, #16]
 80044c4:	4607      	mov	r7, r0
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	db7e      	blt.n	80045c8 <quorem+0x10c>
 80044ca:	3c01      	subs	r4, #1
 80044cc:	00a3      	lsls	r3, r4, #2
 80044ce:	f100 0514 	add.w	r5, r0, #20
 80044d2:	f101 0814 	add.w	r8, r1, #20
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044e6:	3301      	adds	r3, #1
 80044e8:	429a      	cmp	r2, r3
 80044ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80044ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044f2:	d32e      	bcc.n	8004552 <quorem+0x96>
 80044f4:	f04f 0a00 	mov.w	sl, #0
 80044f8:	46c4      	mov	ip, r8
 80044fa:	46ae      	mov	lr, r5
 80044fc:	46d3      	mov	fp, sl
 80044fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004502:	b298      	uxth	r0, r3
 8004504:	fb06 a000 	mla	r0, r6, r0, sl
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	0c02      	lsrs	r2, r0, #16
 800450c:	fb06 2303 	mla	r3, r6, r3, r2
 8004510:	f8de 2000 	ldr.w	r2, [lr]
 8004514:	b280      	uxth	r0, r0
 8004516:	b292      	uxth	r2, r2
 8004518:	1a12      	subs	r2, r2, r0
 800451a:	445a      	add	r2, fp
 800451c:	f8de 0000 	ldr.w	r0, [lr]
 8004520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004524:	b29b      	uxth	r3, r3
 8004526:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800452a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800452e:	b292      	uxth	r2, r2
 8004530:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004534:	45e1      	cmp	r9, ip
 8004536:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800453a:	f84e 2b04 	str.w	r2, [lr], #4
 800453e:	d2de      	bcs.n	80044fe <quorem+0x42>
 8004540:	9b00      	ldr	r3, [sp, #0]
 8004542:	58eb      	ldr	r3, [r5, r3]
 8004544:	b92b      	cbnz	r3, 8004552 <quorem+0x96>
 8004546:	9b01      	ldr	r3, [sp, #4]
 8004548:	3b04      	subs	r3, #4
 800454a:	429d      	cmp	r5, r3
 800454c:	461a      	mov	r2, r3
 800454e:	d32f      	bcc.n	80045b0 <quorem+0xf4>
 8004550:	613c      	str	r4, [r7, #16]
 8004552:	4638      	mov	r0, r7
 8004554:	f001 f9ca 	bl	80058ec <__mcmp>
 8004558:	2800      	cmp	r0, #0
 800455a:	db25      	blt.n	80045a8 <quorem+0xec>
 800455c:	4629      	mov	r1, r5
 800455e:	2000      	movs	r0, #0
 8004560:	f858 2b04 	ldr.w	r2, [r8], #4
 8004564:	f8d1 c000 	ldr.w	ip, [r1]
 8004568:	fa1f fe82 	uxth.w	lr, r2
 800456c:	fa1f f38c 	uxth.w	r3, ip
 8004570:	eba3 030e 	sub.w	r3, r3, lr
 8004574:	4403      	add	r3, r0
 8004576:	0c12      	lsrs	r2, r2, #16
 8004578:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800457c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004580:	b29b      	uxth	r3, r3
 8004582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004586:	45c1      	cmp	r9, r8
 8004588:	ea4f 4022 	mov.w	r0, r2, asr #16
 800458c:	f841 3b04 	str.w	r3, [r1], #4
 8004590:	d2e6      	bcs.n	8004560 <quorem+0xa4>
 8004592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800459a:	b922      	cbnz	r2, 80045a6 <quorem+0xea>
 800459c:	3b04      	subs	r3, #4
 800459e:	429d      	cmp	r5, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	d30b      	bcc.n	80045bc <quorem+0x100>
 80045a4:	613c      	str	r4, [r7, #16]
 80045a6:	3601      	adds	r6, #1
 80045a8:	4630      	mov	r0, r6
 80045aa:	b003      	add	sp, #12
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	3b04      	subs	r3, #4
 80045b4:	2a00      	cmp	r2, #0
 80045b6:	d1cb      	bne.n	8004550 <quorem+0x94>
 80045b8:	3c01      	subs	r4, #1
 80045ba:	e7c6      	b.n	800454a <quorem+0x8e>
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	3b04      	subs	r3, #4
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	d1ef      	bne.n	80045a4 <quorem+0xe8>
 80045c4:	3c01      	subs	r4, #1
 80045c6:	e7ea      	b.n	800459e <quorem+0xe2>
 80045c8:	2000      	movs	r0, #0
 80045ca:	e7ee      	b.n	80045aa <quorem+0xee>
 80045cc:	0000      	movs	r0, r0
	...

080045d0 <_dtoa_r>:
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	4614      	mov	r4, r2
 80045d6:	461d      	mov	r5, r3
 80045d8:	69c7      	ldr	r7, [r0, #28]
 80045da:	b097      	sub	sp, #92	@ 0x5c
 80045dc:	4681      	mov	r9, r0
 80045de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80045e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80045e4:	b97f      	cbnz	r7, 8004606 <_dtoa_r+0x36>
 80045e6:	2010      	movs	r0, #16
 80045e8:	f000 fe0e 	bl	8005208 <malloc>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f8c9 001c 	str.w	r0, [r9, #28]
 80045f2:	b920      	cbnz	r0, 80045fe <_dtoa_r+0x2e>
 80045f4:	21ef      	movs	r1, #239	@ 0xef
 80045f6:	4bac      	ldr	r3, [pc, #688]	@ (80048a8 <_dtoa_r+0x2d8>)
 80045f8:	48ac      	ldr	r0, [pc, #688]	@ (80048ac <_dtoa_r+0x2dc>)
 80045fa:	f002 ffa1 	bl	8007540 <__assert_func>
 80045fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004602:	6007      	str	r7, [r0, #0]
 8004604:	60c7      	str	r7, [r0, #12]
 8004606:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800460a:	6819      	ldr	r1, [r3, #0]
 800460c:	b159      	cbz	r1, 8004626 <_dtoa_r+0x56>
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	2301      	movs	r3, #1
 8004612:	4093      	lsls	r3, r2
 8004614:	604a      	str	r2, [r1, #4]
 8004616:	608b      	str	r3, [r1, #8]
 8004618:	4648      	mov	r0, r9
 800461a:	f000 feeb 	bl	80053f4 <_Bfree>
 800461e:	2200      	movs	r2, #0
 8004620:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	1e2b      	subs	r3, r5, #0
 8004628:	bfaf      	iteee	ge
 800462a:	2300      	movge	r3, #0
 800462c:	2201      	movlt	r2, #1
 800462e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004632:	9307      	strlt	r3, [sp, #28]
 8004634:	bfa8      	it	ge
 8004636:	6033      	strge	r3, [r6, #0]
 8004638:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800463c:	4b9c      	ldr	r3, [pc, #624]	@ (80048b0 <_dtoa_r+0x2e0>)
 800463e:	bfb8      	it	lt
 8004640:	6032      	strlt	r2, [r6, #0]
 8004642:	ea33 0308 	bics.w	r3, r3, r8
 8004646:	d112      	bne.n	800466e <_dtoa_r+0x9e>
 8004648:	f242 730f 	movw	r3, #9999	@ 0x270f
 800464c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004654:	4323      	orrs	r3, r4
 8004656:	f000 855e 	beq.w	8005116 <_dtoa_r+0xb46>
 800465a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800465c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80048b4 <_dtoa_r+0x2e4>
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8560 	beq.w	8005126 <_dtoa_r+0xb56>
 8004666:	f10a 0303 	add.w	r3, sl, #3
 800466a:	f000 bd5a 	b.w	8005122 <_dtoa_r+0xb52>
 800466e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004672:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800467a:	2200      	movs	r2, #0
 800467c:	2300      	movs	r3, #0
 800467e:	f7fc f993 	bl	80009a8 <__aeabi_dcmpeq>
 8004682:	4607      	mov	r7, r0
 8004684:	b158      	cbz	r0, 800469e <_dtoa_r+0xce>
 8004686:	2301      	movs	r3, #1
 8004688:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800468e:	b113      	cbz	r3, 8004696 <_dtoa_r+0xc6>
 8004690:	4b89      	ldr	r3, [pc, #548]	@ (80048b8 <_dtoa_r+0x2e8>)
 8004692:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80048bc <_dtoa_r+0x2ec>
 800469a:	f000 bd44 	b.w	8005126 <_dtoa_r+0xb56>
 800469e:	ab14      	add	r3, sp, #80	@ 0x50
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	ab15      	add	r3, sp, #84	@ 0x54
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4648      	mov	r0, r9
 80046a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80046ac:	f001 fa36 	bl	8005b1c <__d2b>
 80046b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80046b4:	9003      	str	r0, [sp, #12]
 80046b6:	2e00      	cmp	r6, #0
 80046b8:	d078      	beq.n	80047ac <_dtoa_r+0x1dc>
 80046ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80046c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80046cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80046d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80046d2:	4619      	mov	r1, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	4b7a      	ldr	r3, [pc, #488]	@ (80048c0 <_dtoa_r+0x2f0>)
 80046d8:	f7fb fd46 	bl	8000168 <__aeabi_dsub>
 80046dc:	a36c      	add	r3, pc, #432	@ (adr r3, 8004890 <_dtoa_r+0x2c0>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fb fef9 	bl	80004d8 <__aeabi_dmul>
 80046e6:	a36c      	add	r3, pc, #432	@ (adr r3, 8004898 <_dtoa_r+0x2c8>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb fd3e 	bl	800016c <__adddf3>
 80046f0:	4604      	mov	r4, r0
 80046f2:	4630      	mov	r0, r6
 80046f4:	460d      	mov	r5, r1
 80046f6:	f7fb fe85 	bl	8000404 <__aeabi_i2d>
 80046fa:	a369      	add	r3, pc, #420	@ (adr r3, 80048a0 <_dtoa_r+0x2d0>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fb feea 	bl	80004d8 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4620      	mov	r0, r4
 800470a:	4629      	mov	r1, r5
 800470c:	f7fb fd2e 	bl	800016c <__adddf3>
 8004710:	4604      	mov	r4, r0
 8004712:	460d      	mov	r5, r1
 8004714:	f7fc f990 	bl	8000a38 <__aeabi_d2iz>
 8004718:	2200      	movs	r2, #0
 800471a:	4607      	mov	r7, r0
 800471c:	2300      	movs	r3, #0
 800471e:	4620      	mov	r0, r4
 8004720:	4629      	mov	r1, r5
 8004722:	f7fc f94b 	bl	80009bc <__aeabi_dcmplt>
 8004726:	b140      	cbz	r0, 800473a <_dtoa_r+0x16a>
 8004728:	4638      	mov	r0, r7
 800472a:	f7fb fe6b 	bl	8000404 <__aeabi_i2d>
 800472e:	4622      	mov	r2, r4
 8004730:	462b      	mov	r3, r5
 8004732:	f7fc f939 	bl	80009a8 <__aeabi_dcmpeq>
 8004736:	b900      	cbnz	r0, 800473a <_dtoa_r+0x16a>
 8004738:	3f01      	subs	r7, #1
 800473a:	2f16      	cmp	r7, #22
 800473c:	d854      	bhi.n	80047e8 <_dtoa_r+0x218>
 800473e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004742:	4b60      	ldr	r3, [pc, #384]	@ (80048c4 <_dtoa_r+0x2f4>)
 8004744:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f7fc f936 	bl	80009bc <__aeabi_dcmplt>
 8004750:	2800      	cmp	r0, #0
 8004752:	d04b      	beq.n	80047ec <_dtoa_r+0x21c>
 8004754:	2300      	movs	r3, #0
 8004756:	3f01      	subs	r7, #1
 8004758:	930f      	str	r3, [sp, #60]	@ 0x3c
 800475a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800475c:	1b9b      	subs	r3, r3, r6
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	bf49      	itett	mi
 8004762:	f1c3 0301 	rsbmi	r3, r3, #1
 8004766:	2300      	movpl	r3, #0
 8004768:	9304      	strmi	r3, [sp, #16]
 800476a:	2300      	movmi	r3, #0
 800476c:	9209      	str	r2, [sp, #36]	@ 0x24
 800476e:	bf54      	ite	pl
 8004770:	9304      	strpl	r3, [sp, #16]
 8004772:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004774:	2f00      	cmp	r7, #0
 8004776:	db3b      	blt.n	80047f0 <_dtoa_r+0x220>
 8004778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800477a:	970e      	str	r7, [sp, #56]	@ 0x38
 800477c:	443b      	add	r3, r7
 800477e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004780:	2300      	movs	r3, #0
 8004782:	930a      	str	r3, [sp, #40]	@ 0x28
 8004784:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004786:	2b09      	cmp	r3, #9
 8004788:	d865      	bhi.n	8004856 <_dtoa_r+0x286>
 800478a:	2b05      	cmp	r3, #5
 800478c:	bfc4      	itt	gt
 800478e:	3b04      	subgt	r3, #4
 8004790:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004794:	bfc8      	it	gt
 8004796:	2400      	movgt	r4, #0
 8004798:	f1a3 0302 	sub.w	r3, r3, #2
 800479c:	bfd8      	it	le
 800479e:	2401      	movle	r4, #1
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d864      	bhi.n	800486e <_dtoa_r+0x29e>
 80047a4:	e8df f003 	tbb	[pc, r3]
 80047a8:	2c385553 	.word	0x2c385553
 80047ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80047b0:	441e      	add	r6, r3
 80047b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	bfc1      	itttt	gt
 80047ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047be:	fa08 f803 	lslgt.w	r8, r8, r3
 80047c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80047c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80047ca:	bfd6      	itet	le
 80047cc:	f1c3 0320 	rsble	r3, r3, #32
 80047d0:	ea48 0003 	orrgt.w	r0, r8, r3
 80047d4:	fa04 f003 	lslle.w	r0, r4, r3
 80047d8:	f7fb fe04 	bl	80003e4 <__aeabi_ui2d>
 80047dc:	2201      	movs	r2, #1
 80047de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80047e2:	3e01      	subs	r6, #1
 80047e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80047e6:	e774      	b.n	80046d2 <_dtoa_r+0x102>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e7b5      	b.n	8004758 <_dtoa_r+0x188>
 80047ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 80047ee:	e7b4      	b.n	800475a <_dtoa_r+0x18a>
 80047f0:	9b04      	ldr	r3, [sp, #16]
 80047f2:	1bdb      	subs	r3, r3, r7
 80047f4:	9304      	str	r3, [sp, #16]
 80047f6:	427b      	negs	r3, r7
 80047f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80047fa:	2300      	movs	r3, #0
 80047fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80047fe:	e7c1      	b.n	8004784 <_dtoa_r+0x1b4>
 8004800:	2301      	movs	r3, #1
 8004802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004806:	eb07 0b03 	add.w	fp, r7, r3
 800480a:	f10b 0301 	add.w	r3, fp, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	9308      	str	r3, [sp, #32]
 8004812:	bfb8      	it	lt
 8004814:	2301      	movlt	r3, #1
 8004816:	e006      	b.n	8004826 <_dtoa_r+0x256>
 8004818:	2301      	movs	r3, #1
 800481a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800481c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800481e:	2b00      	cmp	r3, #0
 8004820:	dd28      	ble.n	8004874 <_dtoa_r+0x2a4>
 8004822:	469b      	mov	fp, r3
 8004824:	9308      	str	r3, [sp, #32]
 8004826:	2100      	movs	r1, #0
 8004828:	2204      	movs	r2, #4
 800482a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800482e:	f102 0514 	add.w	r5, r2, #20
 8004832:	429d      	cmp	r5, r3
 8004834:	d926      	bls.n	8004884 <_dtoa_r+0x2b4>
 8004836:	6041      	str	r1, [r0, #4]
 8004838:	4648      	mov	r0, r9
 800483a:	f000 fd9b 	bl	8005374 <_Balloc>
 800483e:	4682      	mov	sl, r0
 8004840:	2800      	cmp	r0, #0
 8004842:	d143      	bne.n	80048cc <_dtoa_r+0x2fc>
 8004844:	4602      	mov	r2, r0
 8004846:	f240 11af 	movw	r1, #431	@ 0x1af
 800484a:	4b1f      	ldr	r3, [pc, #124]	@ (80048c8 <_dtoa_r+0x2f8>)
 800484c:	e6d4      	b.n	80045f8 <_dtoa_r+0x28>
 800484e:	2300      	movs	r3, #0
 8004850:	e7e3      	b.n	800481a <_dtoa_r+0x24a>
 8004852:	2300      	movs	r3, #0
 8004854:	e7d5      	b.n	8004802 <_dtoa_r+0x232>
 8004856:	2401      	movs	r4, #1
 8004858:	2300      	movs	r3, #0
 800485a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800485c:	9320      	str	r3, [sp, #128]	@ 0x80
 800485e:	f04f 3bff 	mov.w	fp, #4294967295
 8004862:	2200      	movs	r2, #0
 8004864:	2312      	movs	r3, #18
 8004866:	f8cd b020 	str.w	fp, [sp, #32]
 800486a:	9221      	str	r2, [sp, #132]	@ 0x84
 800486c:	e7db      	b.n	8004826 <_dtoa_r+0x256>
 800486e:	2301      	movs	r3, #1
 8004870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004872:	e7f4      	b.n	800485e <_dtoa_r+0x28e>
 8004874:	f04f 0b01 	mov.w	fp, #1
 8004878:	465b      	mov	r3, fp
 800487a:	f8cd b020 	str.w	fp, [sp, #32]
 800487e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004882:	e7d0      	b.n	8004826 <_dtoa_r+0x256>
 8004884:	3101      	adds	r1, #1
 8004886:	0052      	lsls	r2, r2, #1
 8004888:	e7d1      	b.n	800482e <_dtoa_r+0x25e>
 800488a:	bf00      	nop
 800488c:	f3af 8000 	nop.w
 8004890:	636f4361 	.word	0x636f4361
 8004894:	3fd287a7 	.word	0x3fd287a7
 8004898:	8b60c8b3 	.word	0x8b60c8b3
 800489c:	3fc68a28 	.word	0x3fc68a28
 80048a0:	509f79fb 	.word	0x509f79fb
 80048a4:	3fd34413 	.word	0x3fd34413
 80048a8:	0800844e 	.word	0x0800844e
 80048ac:	08008465 	.word	0x08008465
 80048b0:	7ff00000 	.word	0x7ff00000
 80048b4:	0800844a 	.word	0x0800844a
 80048b8:	08008551 	.word	0x08008551
 80048bc:	08008550 	.word	0x08008550
 80048c0:	3ff80000 	.word	0x3ff80000
 80048c4:	08008630 	.word	0x08008630
 80048c8:	080084bd 	.word	0x080084bd
 80048cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80048d0:	6018      	str	r0, [r3, #0]
 80048d2:	9b08      	ldr	r3, [sp, #32]
 80048d4:	2b0e      	cmp	r3, #14
 80048d6:	f200 80a1 	bhi.w	8004a1c <_dtoa_r+0x44c>
 80048da:	2c00      	cmp	r4, #0
 80048dc:	f000 809e 	beq.w	8004a1c <_dtoa_r+0x44c>
 80048e0:	2f00      	cmp	r7, #0
 80048e2:	dd33      	ble.n	800494c <_dtoa_r+0x37c>
 80048e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004b58 <_dtoa_r+0x588>)
 80048e6:	f007 020f 	and.w	r2, r7, #15
 80048ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ee:	05f8      	lsls	r0, r7, #23
 80048f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80048f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80048fc:	d516      	bpl.n	800492c <_dtoa_r+0x35c>
 80048fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004902:	4b96      	ldr	r3, [pc, #600]	@ (8004b5c <_dtoa_r+0x58c>)
 8004904:	2603      	movs	r6, #3
 8004906:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800490a:	f7fb ff0f 	bl	800072c <__aeabi_ddiv>
 800490e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004912:	f004 040f 	and.w	r4, r4, #15
 8004916:	4d91      	ldr	r5, [pc, #580]	@ (8004b5c <_dtoa_r+0x58c>)
 8004918:	b954      	cbnz	r4, 8004930 <_dtoa_r+0x360>
 800491a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800491e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004922:	f7fb ff03 	bl	800072c <__aeabi_ddiv>
 8004926:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800492a:	e028      	b.n	800497e <_dtoa_r+0x3ae>
 800492c:	2602      	movs	r6, #2
 800492e:	e7f2      	b.n	8004916 <_dtoa_r+0x346>
 8004930:	07e1      	lsls	r1, r4, #31
 8004932:	d508      	bpl.n	8004946 <_dtoa_r+0x376>
 8004934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004938:	e9d5 2300 	ldrd	r2, r3, [r5]
 800493c:	f7fb fdcc 	bl	80004d8 <__aeabi_dmul>
 8004940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004944:	3601      	adds	r6, #1
 8004946:	1064      	asrs	r4, r4, #1
 8004948:	3508      	adds	r5, #8
 800494a:	e7e5      	b.n	8004918 <_dtoa_r+0x348>
 800494c:	f000 80af 	beq.w	8004aae <_dtoa_r+0x4de>
 8004950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004954:	427c      	negs	r4, r7
 8004956:	4b80      	ldr	r3, [pc, #512]	@ (8004b58 <_dtoa_r+0x588>)
 8004958:	f004 020f 	and.w	r2, r4, #15
 800495c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb fdb8 	bl	80004d8 <__aeabi_dmul>
 8004968:	2602      	movs	r6, #2
 800496a:	2300      	movs	r3, #0
 800496c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004970:	4d7a      	ldr	r5, [pc, #488]	@ (8004b5c <_dtoa_r+0x58c>)
 8004972:	1124      	asrs	r4, r4, #4
 8004974:	2c00      	cmp	r4, #0
 8004976:	f040 808f 	bne.w	8004a98 <_dtoa_r+0x4c8>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1d3      	bne.n	8004926 <_dtoa_r+0x356>
 800497e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8094 	beq.w	8004ab2 <_dtoa_r+0x4e2>
 800498a:	2200      	movs	r2, #0
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	4b73      	ldr	r3, [pc, #460]	@ (8004b60 <_dtoa_r+0x590>)
 8004992:	f7fc f813 	bl	80009bc <__aeabi_dcmplt>
 8004996:	2800      	cmp	r0, #0
 8004998:	f000 808b 	beq.w	8004ab2 <_dtoa_r+0x4e2>
 800499c:	9b08      	ldr	r3, [sp, #32]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8087 	beq.w	8004ab2 <_dtoa_r+0x4e2>
 80049a4:	f1bb 0f00 	cmp.w	fp, #0
 80049a8:	dd34      	ble.n	8004a14 <_dtoa_r+0x444>
 80049aa:	4620      	mov	r0, r4
 80049ac:	2200      	movs	r2, #0
 80049ae:	4629      	mov	r1, r5
 80049b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <_dtoa_r+0x594>)
 80049b2:	f7fb fd91 	bl	80004d8 <__aeabi_dmul>
 80049b6:	465c      	mov	r4, fp
 80049b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80049bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80049c0:	3601      	adds	r6, #1
 80049c2:	4630      	mov	r0, r6
 80049c4:	f7fb fd1e 	bl	8000404 <__aeabi_i2d>
 80049c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049cc:	f7fb fd84 	bl	80004d8 <__aeabi_dmul>
 80049d0:	2200      	movs	r2, #0
 80049d2:	4b65      	ldr	r3, [pc, #404]	@ (8004b68 <_dtoa_r+0x598>)
 80049d4:	f7fb fbca 	bl	800016c <__adddf3>
 80049d8:	4605      	mov	r5, r0
 80049da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80049de:	2c00      	cmp	r4, #0
 80049e0:	d16a      	bne.n	8004ab8 <_dtoa_r+0x4e8>
 80049e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049e6:	2200      	movs	r2, #0
 80049e8:	4b60      	ldr	r3, [pc, #384]	@ (8004b6c <_dtoa_r+0x59c>)
 80049ea:	f7fb fbbd 	bl	8000168 <__aeabi_dsub>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049f6:	462a      	mov	r2, r5
 80049f8:	4633      	mov	r3, r6
 80049fa:	f7fb fffd 	bl	80009f8 <__aeabi_dcmpgt>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f040 8298 	bne.w	8004f34 <_dtoa_r+0x964>
 8004a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a08:	462a      	mov	r2, r5
 8004a0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a0e:	f7fb ffd5 	bl	80009bc <__aeabi_dcmplt>
 8004a12:	bb38      	cbnz	r0, 8004a64 <_dtoa_r+0x494>
 8004a14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004a1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f2c0 8157 	blt.w	8004cd2 <_dtoa_r+0x702>
 8004a24:	2f0e      	cmp	r7, #14
 8004a26:	f300 8154 	bgt.w	8004cd2 <_dtoa_r+0x702>
 8004a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b58 <_dtoa_r+0x588>)
 8004a2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f280 80e5 	bge.w	8004c0a <_dtoa_r+0x63a>
 8004a40:	9b08      	ldr	r3, [sp, #32]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f300 80e1 	bgt.w	8004c0a <_dtoa_r+0x63a>
 8004a48:	d10c      	bne.n	8004a64 <_dtoa_r+0x494>
 8004a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4b46      	ldr	r3, [pc, #280]	@ (8004b6c <_dtoa_r+0x59c>)
 8004a52:	f7fb fd41 	bl	80004d8 <__aeabi_dmul>
 8004a56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a5a:	f7fb ffc3 	bl	80009e4 <__aeabi_dcmpge>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	f000 8266 	beq.w	8004f30 <_dtoa_r+0x960>
 8004a64:	2400      	movs	r4, #0
 8004a66:	4625      	mov	r5, r4
 8004a68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a6a:	4656      	mov	r6, sl
 8004a6c:	ea6f 0803 	mvn.w	r8, r3
 8004a70:	2700      	movs	r7, #0
 8004a72:	4621      	mov	r1, r4
 8004a74:	4648      	mov	r0, r9
 8004a76:	f000 fcbd 	bl	80053f4 <_Bfree>
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	f000 80bd 	beq.w	8004bfa <_dtoa_r+0x62a>
 8004a80:	b12f      	cbz	r7, 8004a8e <_dtoa_r+0x4be>
 8004a82:	42af      	cmp	r7, r5
 8004a84:	d003      	beq.n	8004a8e <_dtoa_r+0x4be>
 8004a86:	4639      	mov	r1, r7
 8004a88:	4648      	mov	r0, r9
 8004a8a:	f000 fcb3 	bl	80053f4 <_Bfree>
 8004a8e:	4629      	mov	r1, r5
 8004a90:	4648      	mov	r0, r9
 8004a92:	f000 fcaf 	bl	80053f4 <_Bfree>
 8004a96:	e0b0      	b.n	8004bfa <_dtoa_r+0x62a>
 8004a98:	07e2      	lsls	r2, r4, #31
 8004a9a:	d505      	bpl.n	8004aa8 <_dtoa_r+0x4d8>
 8004a9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004aa0:	f7fb fd1a 	bl	80004d8 <__aeabi_dmul>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	1064      	asrs	r4, r4, #1
 8004aaa:	3508      	adds	r5, #8
 8004aac:	e762      	b.n	8004974 <_dtoa_r+0x3a4>
 8004aae:	2602      	movs	r6, #2
 8004ab0:	e765      	b.n	800497e <_dtoa_r+0x3ae>
 8004ab2:	46b8      	mov	r8, r7
 8004ab4:	9c08      	ldr	r4, [sp, #32]
 8004ab6:	e784      	b.n	80049c2 <_dtoa_r+0x3f2>
 8004ab8:	4b27      	ldr	r3, [pc, #156]	@ (8004b58 <_dtoa_r+0x588>)
 8004aba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004abc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ac0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ac4:	4454      	add	r4, sl
 8004ac6:	2900      	cmp	r1, #0
 8004ac8:	d054      	beq.n	8004b74 <_dtoa_r+0x5a4>
 8004aca:	2000      	movs	r0, #0
 8004acc:	4928      	ldr	r1, [pc, #160]	@ (8004b70 <_dtoa_r+0x5a0>)
 8004ace:	f7fb fe2d 	bl	800072c <__aeabi_ddiv>
 8004ad2:	4633      	mov	r3, r6
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	f7fb fb47 	bl	8000168 <__aeabi_dsub>
 8004ada:	4656      	mov	r6, sl
 8004adc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ae4:	f7fb ffa8 	bl	8000a38 <__aeabi_d2iz>
 8004ae8:	4605      	mov	r5, r0
 8004aea:	f7fb fc8b 	bl	8000404 <__aeabi_i2d>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004af6:	f7fb fb37 	bl	8000168 <__aeabi_dsub>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	3530      	adds	r5, #48	@ 0x30
 8004b00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b08:	f806 5b01 	strb.w	r5, [r6], #1
 8004b0c:	f7fb ff56 	bl	80009bc <__aeabi_dcmplt>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d172      	bne.n	8004bfa <_dtoa_r+0x62a>
 8004b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b18:	2000      	movs	r0, #0
 8004b1a:	4911      	ldr	r1, [pc, #68]	@ (8004b60 <_dtoa_r+0x590>)
 8004b1c:	f7fb fb24 	bl	8000168 <__aeabi_dsub>
 8004b20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b24:	f7fb ff4a 	bl	80009bc <__aeabi_dcmplt>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f040 80b4 	bne.w	8004c96 <_dtoa_r+0x6c6>
 8004b2e:	42a6      	cmp	r6, r4
 8004b30:	f43f af70 	beq.w	8004a14 <_dtoa_r+0x444>
 8004b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <_dtoa_r+0x594>)
 8004b3c:	f7fb fccc 	bl	80004d8 <__aeabi_dmul>
 8004b40:	2200      	movs	r2, #0
 8004b42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b4a:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <_dtoa_r+0x594>)
 8004b4c:	f7fb fcc4 	bl	80004d8 <__aeabi_dmul>
 8004b50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b54:	e7c4      	b.n	8004ae0 <_dtoa_r+0x510>
 8004b56:	bf00      	nop
 8004b58:	08008630 	.word	0x08008630
 8004b5c:	08008608 	.word	0x08008608
 8004b60:	3ff00000 	.word	0x3ff00000
 8004b64:	40240000 	.word	0x40240000
 8004b68:	401c0000 	.word	0x401c0000
 8004b6c:	40140000 	.word	0x40140000
 8004b70:	3fe00000 	.word	0x3fe00000
 8004b74:	4631      	mov	r1, r6
 8004b76:	4628      	mov	r0, r5
 8004b78:	f7fb fcae 	bl	80004d8 <__aeabi_dmul>
 8004b7c:	4656      	mov	r6, sl
 8004b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b82:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b88:	f7fb ff56 	bl	8000a38 <__aeabi_d2iz>
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	f7fb fc39 	bl	8000404 <__aeabi_i2d>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b9a:	f7fb fae5 	bl	8000168 <__aeabi_dsub>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	3530      	adds	r5, #48	@ 0x30
 8004ba4:	f806 5b01 	strb.w	r5, [r6], #1
 8004ba8:	42a6      	cmp	r6, r4
 8004baa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	d124      	bne.n	8004bfe <_dtoa_r+0x62e>
 8004bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bb8:	4bae      	ldr	r3, [pc, #696]	@ (8004e74 <_dtoa_r+0x8a4>)
 8004bba:	f7fb fad7 	bl	800016c <__adddf3>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bc6:	f7fb ff17 	bl	80009f8 <__aeabi_dcmpgt>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d163      	bne.n	8004c96 <_dtoa_r+0x6c6>
 8004bce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	49a7      	ldr	r1, [pc, #668]	@ (8004e74 <_dtoa_r+0x8a4>)
 8004bd6:	f7fb fac7 	bl	8000168 <__aeabi_dsub>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004be2:	f7fb feeb 	bl	80009bc <__aeabi_dcmplt>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f43f af14 	beq.w	8004a14 <_dtoa_r+0x444>
 8004bec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004bee:	1e73      	subs	r3, r6, #1
 8004bf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004bf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004bf6:	2b30      	cmp	r3, #48	@ 0x30
 8004bf8:	d0f8      	beq.n	8004bec <_dtoa_r+0x61c>
 8004bfa:	4647      	mov	r7, r8
 8004bfc:	e03b      	b.n	8004c76 <_dtoa_r+0x6a6>
 8004bfe:	4b9e      	ldr	r3, [pc, #632]	@ (8004e78 <_dtoa_r+0x8a8>)
 8004c00:	f7fb fc6a 	bl	80004d8 <__aeabi_dmul>
 8004c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c08:	e7bc      	b.n	8004b84 <_dtoa_r+0x5b4>
 8004c0a:	4656      	mov	r6, sl
 8004c0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb fd88 	bl	800072c <__aeabi_ddiv>
 8004c1c:	f7fb ff0c 	bl	8000a38 <__aeabi_d2iz>
 8004c20:	4680      	mov	r8, r0
 8004c22:	f7fb fbef 	bl	8000404 <__aeabi_i2d>
 8004c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2a:	f7fb fc55 	bl	80004d8 <__aeabi_dmul>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4620      	mov	r0, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	f7fb fa97 	bl	8000168 <__aeabi_dsub>
 8004c3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004c3e:	9d08      	ldr	r5, [sp, #32]
 8004c40:	f806 4b01 	strb.w	r4, [r6], #1
 8004c44:	eba6 040a 	sub.w	r4, r6, sl
 8004c48:	42a5      	cmp	r5, r4
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	d133      	bne.n	8004cb8 <_dtoa_r+0x6e8>
 8004c50:	f7fb fa8c 	bl	800016c <__adddf3>
 8004c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	f7fb fecc 	bl	80009f8 <__aeabi_dcmpgt>
 8004c60:	b9c0      	cbnz	r0, 8004c94 <_dtoa_r+0x6c4>
 8004c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f7fb fe9d 	bl	80009a8 <__aeabi_dcmpeq>
 8004c6e:	b110      	cbz	r0, 8004c76 <_dtoa_r+0x6a6>
 8004c70:	f018 0f01 	tst.w	r8, #1
 8004c74:	d10e      	bne.n	8004c94 <_dtoa_r+0x6c4>
 8004c76:	4648      	mov	r0, r9
 8004c78:	9903      	ldr	r1, [sp, #12]
 8004c7a:	f000 fbbb 	bl	80053f4 <_Bfree>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	7033      	strb	r3, [r6, #0]
 8004c82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004c84:	3701      	adds	r7, #1
 8004c86:	601f      	str	r7, [r3, #0]
 8004c88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 824b 	beq.w	8005126 <_dtoa_r+0xb56>
 8004c90:	601e      	str	r6, [r3, #0]
 8004c92:	e248      	b.n	8005126 <_dtoa_r+0xb56>
 8004c94:	46b8      	mov	r8, r7
 8004c96:	4633      	mov	r3, r6
 8004c98:	461e      	mov	r6, r3
 8004c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c9e:	2a39      	cmp	r2, #57	@ 0x39
 8004ca0:	d106      	bne.n	8004cb0 <_dtoa_r+0x6e0>
 8004ca2:	459a      	cmp	sl, r3
 8004ca4:	d1f8      	bne.n	8004c98 <_dtoa_r+0x6c8>
 8004ca6:	2230      	movs	r2, #48	@ 0x30
 8004ca8:	f108 0801 	add.w	r8, r8, #1
 8004cac:	f88a 2000 	strb.w	r2, [sl]
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	3201      	adds	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e7a0      	b.n	8004bfa <_dtoa_r+0x62a>
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4b6f      	ldr	r3, [pc, #444]	@ (8004e78 <_dtoa_r+0x8a8>)
 8004cbc:	f7fb fc0c 	bl	80004d8 <__aeabi_dmul>
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	f7fb fe6e 	bl	80009a8 <__aeabi_dcmpeq>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d09f      	beq.n	8004c10 <_dtoa_r+0x640>
 8004cd0:	e7d1      	b.n	8004c76 <_dtoa_r+0x6a6>
 8004cd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	f000 80ea 	beq.w	8004eae <_dtoa_r+0x8de>
 8004cda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004cdc:	2a01      	cmp	r2, #1
 8004cde:	f300 80cd 	bgt.w	8004e7c <_dtoa_r+0x8ac>
 8004ce2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	f000 80c1 	beq.w	8004e6c <_dtoa_r+0x89c>
 8004cea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004cee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004cf0:	9e04      	ldr	r6, [sp, #16]
 8004cf2:	9a04      	ldr	r2, [sp, #16]
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	441a      	add	r2, r3
 8004cf8:	9204      	str	r2, [sp, #16]
 8004cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cfc:	4648      	mov	r0, r9
 8004cfe:	441a      	add	r2, r3
 8004d00:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d02:	f000 fc75 	bl	80055f0 <__i2b>
 8004d06:	4605      	mov	r5, r0
 8004d08:	b166      	cbz	r6, 8004d24 <_dtoa_r+0x754>
 8004d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dd09      	ble.n	8004d24 <_dtoa_r+0x754>
 8004d10:	42b3      	cmp	r3, r6
 8004d12:	bfa8      	it	ge
 8004d14:	4633      	movge	r3, r6
 8004d16:	9a04      	ldr	r2, [sp, #16]
 8004d18:	1af6      	subs	r6, r6, r3
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	9204      	str	r2, [sp, #16]
 8004d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d26:	b30b      	cbz	r3, 8004d6c <_dtoa_r+0x79c>
 8004d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80c6 	beq.w	8004ebc <_dtoa_r+0x8ec>
 8004d30:	2c00      	cmp	r4, #0
 8004d32:	f000 80c0 	beq.w	8004eb6 <_dtoa_r+0x8e6>
 8004d36:	4629      	mov	r1, r5
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4648      	mov	r0, r9
 8004d3c:	f000 fd10 	bl	8005760 <__pow5mult>
 8004d40:	9a03      	ldr	r2, [sp, #12]
 8004d42:	4601      	mov	r1, r0
 8004d44:	4605      	mov	r5, r0
 8004d46:	4648      	mov	r0, r9
 8004d48:	f000 fc68 	bl	800561c <__multiply>
 8004d4c:	9903      	ldr	r1, [sp, #12]
 8004d4e:	4680      	mov	r8, r0
 8004d50:	4648      	mov	r0, r9
 8004d52:	f000 fb4f 	bl	80053f4 <_Bfree>
 8004d56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d58:	1b1b      	subs	r3, r3, r4
 8004d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d5c:	f000 80b1 	beq.w	8004ec2 <_dtoa_r+0x8f2>
 8004d60:	4641      	mov	r1, r8
 8004d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d64:	4648      	mov	r0, r9
 8004d66:	f000 fcfb 	bl	8005760 <__pow5mult>
 8004d6a:	9003      	str	r0, [sp, #12]
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4648      	mov	r0, r9
 8004d70:	f000 fc3e 	bl	80055f0 <__i2b>
 8004d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d76:	4604      	mov	r4, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 81d8 	beq.w	800512e <_dtoa_r+0xb5e>
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4601      	mov	r1, r0
 8004d82:	4648      	mov	r0, r9
 8004d84:	f000 fcec 	bl	8005760 <__pow5mult>
 8004d88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f300 809f 	bgt.w	8004ed0 <_dtoa_r+0x900>
 8004d92:	9b06      	ldr	r3, [sp, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8097 	bne.w	8004ec8 <_dtoa_r+0x8f8>
 8004d9a:	9b07      	ldr	r3, [sp, #28]
 8004d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 8093 	bne.w	8004ecc <_dtoa_r+0x8fc>
 8004da6:	9b07      	ldr	r3, [sp, #28]
 8004da8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dac:	0d1b      	lsrs	r3, r3, #20
 8004dae:	051b      	lsls	r3, r3, #20
 8004db0:	b133      	cbz	r3, 8004dc0 <_dtoa_r+0x7f0>
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	3301      	adds	r3, #1
 8004db6:	9304      	str	r3, [sp, #16]
 8004db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dba:	3301      	adds	r3, #1
 8004dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 81b8 	beq.w	800513a <_dtoa_r+0xb6a>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004dd0:	6918      	ldr	r0, [r3, #16]
 8004dd2:	f000 fbc1 	bl	8005558 <__hi0bits>
 8004dd6:	f1c0 0020 	rsb	r0, r0, #32
 8004dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ddc:	4418      	add	r0, r3
 8004dde:	f010 001f 	ands.w	r0, r0, #31
 8004de2:	f000 8082 	beq.w	8004eea <_dtoa_r+0x91a>
 8004de6:	f1c0 0320 	rsb	r3, r0, #32
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	dd73      	ble.n	8004ed6 <_dtoa_r+0x906>
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	f1c0 001c 	rsb	r0, r0, #28
 8004df4:	4403      	add	r3, r0
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfa:	4406      	add	r6, r0
 8004dfc:	4403      	add	r3, r0
 8004dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e00:	9b04      	ldr	r3, [sp, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	dd05      	ble.n	8004e12 <_dtoa_r+0x842>
 8004e06:	461a      	mov	r2, r3
 8004e08:	4648      	mov	r0, r9
 8004e0a:	9903      	ldr	r1, [sp, #12]
 8004e0c:	f000 fd02 	bl	8005814 <__lshift>
 8004e10:	9003      	str	r0, [sp, #12]
 8004e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dd05      	ble.n	8004e24 <_dtoa_r+0x854>
 8004e18:	4621      	mov	r1, r4
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4648      	mov	r0, r9
 8004e1e:	f000 fcf9 	bl	8005814 <__lshift>
 8004e22:	4604      	mov	r4, r0
 8004e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d061      	beq.n	8004eee <_dtoa_r+0x91e>
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	9803      	ldr	r0, [sp, #12]
 8004e2e:	f000 fd5d 	bl	80058ec <__mcmp>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	da5b      	bge.n	8004eee <_dtoa_r+0x91e>
 8004e36:	2300      	movs	r3, #0
 8004e38:	220a      	movs	r2, #10
 8004e3a:	4648      	mov	r0, r9
 8004e3c:	9903      	ldr	r1, [sp, #12]
 8004e3e:	f000 fafb 	bl	8005438 <__multadd>
 8004e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e44:	f107 38ff 	add.w	r8, r7, #4294967295
 8004e48:	9003      	str	r0, [sp, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8177 	beq.w	800513e <_dtoa_r+0xb6e>
 8004e50:	4629      	mov	r1, r5
 8004e52:	2300      	movs	r3, #0
 8004e54:	220a      	movs	r2, #10
 8004e56:	4648      	mov	r0, r9
 8004e58:	f000 faee 	bl	8005438 <__multadd>
 8004e5c:	f1bb 0f00 	cmp.w	fp, #0
 8004e60:	4605      	mov	r5, r0
 8004e62:	dc6f      	bgt.n	8004f44 <_dtoa_r+0x974>
 8004e64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	dc49      	bgt.n	8004efe <_dtoa_r+0x92e>
 8004e6a:	e06b      	b.n	8004f44 <_dtoa_r+0x974>
 8004e6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e72:	e73c      	b.n	8004cee <_dtoa_r+0x71e>
 8004e74:	3fe00000 	.word	0x3fe00000
 8004e78:	40240000 	.word	0x40240000
 8004e7c:	9b08      	ldr	r3, [sp, #32]
 8004e7e:	1e5c      	subs	r4, r3, #1
 8004e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	db09      	blt.n	8004e9a <_dtoa_r+0x8ca>
 8004e86:	1b1c      	subs	r4, r3, r4
 8004e88:	9b08      	ldr	r3, [sp, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f6bf af30 	bge.w	8004cf0 <_dtoa_r+0x720>
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	9a08      	ldr	r2, [sp, #32]
 8004e94:	1a9e      	subs	r6, r3, r2
 8004e96:	2300      	movs	r3, #0
 8004e98:	e72b      	b.n	8004cf2 <_dtoa_r+0x722>
 8004e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e9e:	1ae3      	subs	r3, r4, r3
 8004ea0:	441a      	add	r2, r3
 8004ea2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ea4:	9e04      	ldr	r6, [sp, #16]
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	920e      	str	r2, [sp, #56]	@ 0x38
 8004eac:	e721      	b.n	8004cf2 <_dtoa_r+0x722>
 8004eae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004eb0:	9e04      	ldr	r6, [sp, #16]
 8004eb2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004eb4:	e728      	b.n	8004d08 <_dtoa_r+0x738>
 8004eb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004eba:	e751      	b.n	8004d60 <_dtoa_r+0x790>
 8004ebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ebe:	9903      	ldr	r1, [sp, #12]
 8004ec0:	e750      	b.n	8004d64 <_dtoa_r+0x794>
 8004ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ec6:	e751      	b.n	8004d6c <_dtoa_r+0x79c>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e779      	b.n	8004dc0 <_dtoa_r+0x7f0>
 8004ecc:	9b06      	ldr	r3, [sp, #24]
 8004ece:	e777      	b.n	8004dc0 <_dtoa_r+0x7f0>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ed4:	e779      	b.n	8004dca <_dtoa_r+0x7fa>
 8004ed6:	d093      	beq.n	8004e00 <_dtoa_r+0x830>
 8004ed8:	9a04      	ldr	r2, [sp, #16]
 8004eda:	331c      	adds	r3, #28
 8004edc:	441a      	add	r2, r3
 8004ede:	9204      	str	r2, [sp, #16]
 8004ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee2:	441e      	add	r6, r3
 8004ee4:	441a      	add	r2, r3
 8004ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ee8:	e78a      	b.n	8004e00 <_dtoa_r+0x830>
 8004eea:	4603      	mov	r3, r0
 8004eec:	e7f4      	b.n	8004ed8 <_dtoa_r+0x908>
 8004eee:	9b08      	ldr	r3, [sp, #32]
 8004ef0:	46b8      	mov	r8, r7
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dc20      	bgt.n	8004f38 <_dtoa_r+0x968>
 8004ef6:	469b      	mov	fp, r3
 8004ef8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	dd1e      	ble.n	8004f3c <_dtoa_r+0x96c>
 8004efe:	f1bb 0f00 	cmp.w	fp, #0
 8004f02:	f47f adb1 	bne.w	8004a68 <_dtoa_r+0x498>
 8004f06:	4621      	mov	r1, r4
 8004f08:	465b      	mov	r3, fp
 8004f0a:	2205      	movs	r2, #5
 8004f0c:	4648      	mov	r0, r9
 8004f0e:	f000 fa93 	bl	8005438 <__multadd>
 8004f12:	4601      	mov	r1, r0
 8004f14:	4604      	mov	r4, r0
 8004f16:	9803      	ldr	r0, [sp, #12]
 8004f18:	f000 fce8 	bl	80058ec <__mcmp>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f77f ada3 	ble.w	8004a68 <_dtoa_r+0x498>
 8004f22:	4656      	mov	r6, sl
 8004f24:	2331      	movs	r3, #49	@ 0x31
 8004f26:	f108 0801 	add.w	r8, r8, #1
 8004f2a:	f806 3b01 	strb.w	r3, [r6], #1
 8004f2e:	e59f      	b.n	8004a70 <_dtoa_r+0x4a0>
 8004f30:	46b8      	mov	r8, r7
 8004f32:	9c08      	ldr	r4, [sp, #32]
 8004f34:	4625      	mov	r5, r4
 8004f36:	e7f4      	b.n	8004f22 <_dtoa_r+0x952>
 8004f38:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8101 	beq.w	8005146 <_dtoa_r+0xb76>
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	dd05      	ble.n	8004f54 <_dtoa_r+0x984>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	4648      	mov	r0, r9
 8004f4e:	f000 fc61 	bl	8005814 <__lshift>
 8004f52:	4605      	mov	r5, r0
 8004f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d05c      	beq.n	8005014 <_dtoa_r+0xa44>
 8004f5a:	4648      	mov	r0, r9
 8004f5c:	6869      	ldr	r1, [r5, #4]
 8004f5e:	f000 fa09 	bl	8005374 <_Balloc>
 8004f62:	4606      	mov	r6, r0
 8004f64:	b928      	cbnz	r0, 8004f72 <_dtoa_r+0x9a2>
 8004f66:	4602      	mov	r2, r0
 8004f68:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f6c:	4b80      	ldr	r3, [pc, #512]	@ (8005170 <_dtoa_r+0xba0>)
 8004f6e:	f7ff bb43 	b.w	80045f8 <_dtoa_r+0x28>
 8004f72:	692a      	ldr	r2, [r5, #16]
 8004f74:	f105 010c 	add.w	r1, r5, #12
 8004f78:	3202      	adds	r2, #2
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	300c      	adds	r0, #12
 8004f7e:	f002 facb 	bl	8007518 <memcpy>
 8004f82:	2201      	movs	r2, #1
 8004f84:	4631      	mov	r1, r6
 8004f86:	4648      	mov	r0, r9
 8004f88:	f000 fc44 	bl	8005814 <__lshift>
 8004f8c:	462f      	mov	r7, r5
 8004f8e:	4605      	mov	r5, r0
 8004f90:	f10a 0301 	add.w	r3, sl, #1
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	eb0a 030b 	add.w	r3, sl, fp
 8004f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f9c:	9b06      	ldr	r3, [sp, #24]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	9803      	ldr	r0, [sp, #12]
 8004faa:	f103 3bff 	add.w	fp, r3, #4294967295
 8004fae:	f7ff fa85 	bl	80044bc <quorem>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	3330      	adds	r3, #48	@ 0x30
 8004fb8:	9006      	str	r0, [sp, #24]
 8004fba:	9803      	ldr	r0, [sp, #12]
 8004fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fbe:	f000 fc95 	bl	80058ec <__mcmp>
 8004fc2:	462a      	mov	r2, r5
 8004fc4:	9008      	str	r0, [sp, #32]
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4648      	mov	r0, r9
 8004fca:	f000 fcab 	bl	8005924 <__mdiff>
 8004fce:	68c2      	ldr	r2, [r0, #12]
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fd4:	bb02      	cbnz	r2, 8005018 <_dtoa_r+0xa48>
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	9803      	ldr	r0, [sp, #12]
 8004fda:	f000 fc87 	bl	80058ec <__mcmp>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4648      	mov	r0, r9
 8004fe6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004fea:	f000 fa03 	bl	80053f4 <_Bfree>
 8004fee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ff0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ff2:	9e04      	ldr	r6, [sp, #16]
 8004ff4:	ea42 0103 	orr.w	r1, r2, r3
 8004ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ffa:	4319      	orrs	r1, r3
 8004ffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ffe:	d10d      	bne.n	800501c <_dtoa_r+0xa4c>
 8005000:	2b39      	cmp	r3, #57	@ 0x39
 8005002:	d027      	beq.n	8005054 <_dtoa_r+0xa84>
 8005004:	9a08      	ldr	r2, [sp, #32]
 8005006:	2a00      	cmp	r2, #0
 8005008:	dd01      	ble.n	800500e <_dtoa_r+0xa3e>
 800500a:	9b06      	ldr	r3, [sp, #24]
 800500c:	3331      	adds	r3, #49	@ 0x31
 800500e:	f88b 3000 	strb.w	r3, [fp]
 8005012:	e52e      	b.n	8004a72 <_dtoa_r+0x4a2>
 8005014:	4628      	mov	r0, r5
 8005016:	e7b9      	b.n	8004f8c <_dtoa_r+0x9bc>
 8005018:	2201      	movs	r2, #1
 800501a:	e7e2      	b.n	8004fe2 <_dtoa_r+0xa12>
 800501c:	9908      	ldr	r1, [sp, #32]
 800501e:	2900      	cmp	r1, #0
 8005020:	db04      	blt.n	800502c <_dtoa_r+0xa5c>
 8005022:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005024:	4301      	orrs	r1, r0
 8005026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005028:	4301      	orrs	r1, r0
 800502a:	d120      	bne.n	800506e <_dtoa_r+0xa9e>
 800502c:	2a00      	cmp	r2, #0
 800502e:	ddee      	ble.n	800500e <_dtoa_r+0xa3e>
 8005030:	2201      	movs	r2, #1
 8005032:	9903      	ldr	r1, [sp, #12]
 8005034:	4648      	mov	r0, r9
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	f000 fbec 	bl	8005814 <__lshift>
 800503c:	4621      	mov	r1, r4
 800503e:	9003      	str	r0, [sp, #12]
 8005040:	f000 fc54 	bl	80058ec <__mcmp>
 8005044:	2800      	cmp	r0, #0
 8005046:	9b04      	ldr	r3, [sp, #16]
 8005048:	dc02      	bgt.n	8005050 <_dtoa_r+0xa80>
 800504a:	d1e0      	bne.n	800500e <_dtoa_r+0xa3e>
 800504c:	07da      	lsls	r2, r3, #31
 800504e:	d5de      	bpl.n	800500e <_dtoa_r+0xa3e>
 8005050:	2b39      	cmp	r3, #57	@ 0x39
 8005052:	d1da      	bne.n	800500a <_dtoa_r+0xa3a>
 8005054:	2339      	movs	r3, #57	@ 0x39
 8005056:	f88b 3000 	strb.w	r3, [fp]
 800505a:	4633      	mov	r3, r6
 800505c:	461e      	mov	r6, r3
 800505e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005062:	3b01      	subs	r3, #1
 8005064:	2a39      	cmp	r2, #57	@ 0x39
 8005066:	d04e      	beq.n	8005106 <_dtoa_r+0xb36>
 8005068:	3201      	adds	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e501      	b.n	8004a72 <_dtoa_r+0x4a2>
 800506e:	2a00      	cmp	r2, #0
 8005070:	dd03      	ble.n	800507a <_dtoa_r+0xaaa>
 8005072:	2b39      	cmp	r3, #57	@ 0x39
 8005074:	d0ee      	beq.n	8005054 <_dtoa_r+0xa84>
 8005076:	3301      	adds	r3, #1
 8005078:	e7c9      	b.n	800500e <_dtoa_r+0xa3e>
 800507a:	9a04      	ldr	r2, [sp, #16]
 800507c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800507e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005082:	428a      	cmp	r2, r1
 8005084:	d028      	beq.n	80050d8 <_dtoa_r+0xb08>
 8005086:	2300      	movs	r3, #0
 8005088:	220a      	movs	r2, #10
 800508a:	9903      	ldr	r1, [sp, #12]
 800508c:	4648      	mov	r0, r9
 800508e:	f000 f9d3 	bl	8005438 <__multadd>
 8005092:	42af      	cmp	r7, r5
 8005094:	9003      	str	r0, [sp, #12]
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f04f 020a 	mov.w	r2, #10
 800509e:	4639      	mov	r1, r7
 80050a0:	4648      	mov	r0, r9
 80050a2:	d107      	bne.n	80050b4 <_dtoa_r+0xae4>
 80050a4:	f000 f9c8 	bl	8005438 <__multadd>
 80050a8:	4607      	mov	r7, r0
 80050aa:	4605      	mov	r5, r0
 80050ac:	9b04      	ldr	r3, [sp, #16]
 80050ae:	3301      	adds	r3, #1
 80050b0:	9304      	str	r3, [sp, #16]
 80050b2:	e777      	b.n	8004fa4 <_dtoa_r+0x9d4>
 80050b4:	f000 f9c0 	bl	8005438 <__multadd>
 80050b8:	4629      	mov	r1, r5
 80050ba:	4607      	mov	r7, r0
 80050bc:	2300      	movs	r3, #0
 80050be:	220a      	movs	r2, #10
 80050c0:	4648      	mov	r0, r9
 80050c2:	f000 f9b9 	bl	8005438 <__multadd>
 80050c6:	4605      	mov	r5, r0
 80050c8:	e7f0      	b.n	80050ac <_dtoa_r+0xadc>
 80050ca:	f1bb 0f00 	cmp.w	fp, #0
 80050ce:	bfcc      	ite	gt
 80050d0:	465e      	movgt	r6, fp
 80050d2:	2601      	movle	r6, #1
 80050d4:	2700      	movs	r7, #0
 80050d6:	4456      	add	r6, sl
 80050d8:	2201      	movs	r2, #1
 80050da:	9903      	ldr	r1, [sp, #12]
 80050dc:	4648      	mov	r0, r9
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	f000 fb98 	bl	8005814 <__lshift>
 80050e4:	4621      	mov	r1, r4
 80050e6:	9003      	str	r0, [sp, #12]
 80050e8:	f000 fc00 	bl	80058ec <__mcmp>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	dcb4      	bgt.n	800505a <_dtoa_r+0xa8a>
 80050f0:	d102      	bne.n	80050f8 <_dtoa_r+0xb28>
 80050f2:	9b04      	ldr	r3, [sp, #16]
 80050f4:	07db      	lsls	r3, r3, #31
 80050f6:	d4b0      	bmi.n	800505a <_dtoa_r+0xa8a>
 80050f8:	4633      	mov	r3, r6
 80050fa:	461e      	mov	r6, r3
 80050fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005100:	2a30      	cmp	r2, #48	@ 0x30
 8005102:	d0fa      	beq.n	80050fa <_dtoa_r+0xb2a>
 8005104:	e4b5      	b.n	8004a72 <_dtoa_r+0x4a2>
 8005106:	459a      	cmp	sl, r3
 8005108:	d1a8      	bne.n	800505c <_dtoa_r+0xa8c>
 800510a:	2331      	movs	r3, #49	@ 0x31
 800510c:	f108 0801 	add.w	r8, r8, #1
 8005110:	f88a 3000 	strb.w	r3, [sl]
 8005114:	e4ad      	b.n	8004a72 <_dtoa_r+0x4a2>
 8005116:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005118:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005174 <_dtoa_r+0xba4>
 800511c:	b11b      	cbz	r3, 8005126 <_dtoa_r+0xb56>
 800511e:	f10a 0308 	add.w	r3, sl, #8
 8005122:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4650      	mov	r0, sl
 8005128:	b017      	add	sp, #92	@ 0x5c
 800512a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005130:	2b01      	cmp	r3, #1
 8005132:	f77f ae2e 	ble.w	8004d92 <_dtoa_r+0x7c2>
 8005136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005138:	930a      	str	r3, [sp, #40]	@ 0x28
 800513a:	2001      	movs	r0, #1
 800513c:	e64d      	b.n	8004dda <_dtoa_r+0x80a>
 800513e:	f1bb 0f00 	cmp.w	fp, #0
 8005142:	f77f aed9 	ble.w	8004ef8 <_dtoa_r+0x928>
 8005146:	4656      	mov	r6, sl
 8005148:	4621      	mov	r1, r4
 800514a:	9803      	ldr	r0, [sp, #12]
 800514c:	f7ff f9b6 	bl	80044bc <quorem>
 8005150:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005154:	f806 3b01 	strb.w	r3, [r6], #1
 8005158:	eba6 020a 	sub.w	r2, r6, sl
 800515c:	4593      	cmp	fp, r2
 800515e:	ddb4      	ble.n	80050ca <_dtoa_r+0xafa>
 8005160:	2300      	movs	r3, #0
 8005162:	220a      	movs	r2, #10
 8005164:	4648      	mov	r0, r9
 8005166:	9903      	ldr	r1, [sp, #12]
 8005168:	f000 f966 	bl	8005438 <__multadd>
 800516c:	9003      	str	r0, [sp, #12]
 800516e:	e7eb      	b.n	8005148 <_dtoa_r+0xb78>
 8005170:	080084bd 	.word	0x080084bd
 8005174:	08008441 	.word	0x08008441

08005178 <_free_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4605      	mov	r5, r0
 800517c:	2900      	cmp	r1, #0
 800517e:	d040      	beq.n	8005202 <_free_r+0x8a>
 8005180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005184:	1f0c      	subs	r4, r1, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfb8      	it	lt
 800518a:	18e4      	addlt	r4, r4, r3
 800518c:	f000 f8e6 	bl	800535c <__malloc_lock>
 8005190:	4a1c      	ldr	r2, [pc, #112]	@ (8005204 <_free_r+0x8c>)
 8005192:	6813      	ldr	r3, [r2, #0]
 8005194:	b933      	cbnz	r3, 80051a4 <_free_r+0x2c>
 8005196:	6063      	str	r3, [r4, #4]
 8005198:	6014      	str	r4, [r2, #0]
 800519a:	4628      	mov	r0, r5
 800519c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051a0:	f000 b8e2 	b.w	8005368 <__malloc_unlock>
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	d908      	bls.n	80051ba <_free_r+0x42>
 80051a8:	6820      	ldr	r0, [r4, #0]
 80051aa:	1821      	adds	r1, r4, r0
 80051ac:	428b      	cmp	r3, r1
 80051ae:	bf01      	itttt	eq
 80051b0:	6819      	ldreq	r1, [r3, #0]
 80051b2:	685b      	ldreq	r3, [r3, #4]
 80051b4:	1809      	addeq	r1, r1, r0
 80051b6:	6021      	streq	r1, [r4, #0]
 80051b8:	e7ed      	b.n	8005196 <_free_r+0x1e>
 80051ba:	461a      	mov	r2, r3
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	b10b      	cbz	r3, 80051c4 <_free_r+0x4c>
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	d9fa      	bls.n	80051ba <_free_r+0x42>
 80051c4:	6811      	ldr	r1, [r2, #0]
 80051c6:	1850      	adds	r0, r2, r1
 80051c8:	42a0      	cmp	r0, r4
 80051ca:	d10b      	bne.n	80051e4 <_free_r+0x6c>
 80051cc:	6820      	ldr	r0, [r4, #0]
 80051ce:	4401      	add	r1, r0
 80051d0:	1850      	adds	r0, r2, r1
 80051d2:	4283      	cmp	r3, r0
 80051d4:	6011      	str	r1, [r2, #0]
 80051d6:	d1e0      	bne.n	800519a <_free_r+0x22>
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4408      	add	r0, r1
 80051de:	6010      	str	r0, [r2, #0]
 80051e0:	6053      	str	r3, [r2, #4]
 80051e2:	e7da      	b.n	800519a <_free_r+0x22>
 80051e4:	d902      	bls.n	80051ec <_free_r+0x74>
 80051e6:	230c      	movs	r3, #12
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	e7d6      	b.n	800519a <_free_r+0x22>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	1821      	adds	r1, r4, r0
 80051f0:	428b      	cmp	r3, r1
 80051f2:	bf01      	itttt	eq
 80051f4:	6819      	ldreq	r1, [r3, #0]
 80051f6:	685b      	ldreq	r3, [r3, #4]
 80051f8:	1809      	addeq	r1, r1, r0
 80051fa:	6021      	streq	r1, [r4, #0]
 80051fc:	6063      	str	r3, [r4, #4]
 80051fe:	6054      	str	r4, [r2, #4]
 8005200:	e7cb      	b.n	800519a <_free_r+0x22>
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000468 	.word	0x20000468

08005208 <malloc>:
 8005208:	4b02      	ldr	r3, [pc, #8]	@ (8005214 <malloc+0xc>)
 800520a:	4601      	mov	r1, r0
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	f000 b825 	b.w	800525c <_malloc_r>
 8005212:	bf00      	nop
 8005214:	20000018 	.word	0x20000018

08005218 <sbrk_aligned>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4e0f      	ldr	r6, [pc, #60]	@ (8005258 <sbrk_aligned+0x40>)
 800521c:	460c      	mov	r4, r1
 800521e:	6831      	ldr	r1, [r6, #0]
 8005220:	4605      	mov	r5, r0
 8005222:	b911      	cbnz	r1, 800522a <sbrk_aligned+0x12>
 8005224:	f002 f968 	bl	80074f8 <_sbrk_r>
 8005228:	6030      	str	r0, [r6, #0]
 800522a:	4621      	mov	r1, r4
 800522c:	4628      	mov	r0, r5
 800522e:	f002 f963 	bl	80074f8 <_sbrk_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d103      	bne.n	800523e <sbrk_aligned+0x26>
 8005236:	f04f 34ff 	mov.w	r4, #4294967295
 800523a:	4620      	mov	r0, r4
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d0f8      	beq.n	800523a <sbrk_aligned+0x22>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f002 f954 	bl	80074f8 <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d1f2      	bne.n	800523a <sbrk_aligned+0x22>
 8005254:	e7ef      	b.n	8005236 <sbrk_aligned+0x1e>
 8005256:	bf00      	nop
 8005258:	20000464 	.word	0x20000464

0800525c <_malloc_r>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	1ccd      	adds	r5, r1, #3
 8005262:	f025 0503 	bic.w	r5, r5, #3
 8005266:	3508      	adds	r5, #8
 8005268:	2d0c      	cmp	r5, #12
 800526a:	bf38      	it	cc
 800526c:	250c      	movcc	r5, #12
 800526e:	2d00      	cmp	r5, #0
 8005270:	4606      	mov	r6, r0
 8005272:	db01      	blt.n	8005278 <_malloc_r+0x1c>
 8005274:	42a9      	cmp	r1, r5
 8005276:	d904      	bls.n	8005282 <_malloc_r+0x26>
 8005278:	230c      	movs	r3, #12
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	2000      	movs	r0, #0
 800527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005358 <_malloc_r+0xfc>
 8005286:	f000 f869 	bl	800535c <__malloc_lock>
 800528a:	f8d8 3000 	ldr.w	r3, [r8]
 800528e:	461c      	mov	r4, r3
 8005290:	bb44      	cbnz	r4, 80052e4 <_malloc_r+0x88>
 8005292:	4629      	mov	r1, r5
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff ffbf 	bl	8005218 <sbrk_aligned>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	4604      	mov	r4, r0
 800529e:	d158      	bne.n	8005352 <_malloc_r+0xf6>
 80052a0:	f8d8 4000 	ldr.w	r4, [r8]
 80052a4:	4627      	mov	r7, r4
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d143      	bne.n	8005332 <_malloc_r+0xd6>
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d04b      	beq.n	8005346 <_malloc_r+0xea>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	eb04 0903 	add.w	r9, r4, r3
 80052b8:	f002 f91e 	bl	80074f8 <_sbrk_r>
 80052bc:	4581      	cmp	r9, r0
 80052be:	d142      	bne.n	8005346 <_malloc_r+0xea>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	4630      	mov	r0, r6
 80052c4:	1a6d      	subs	r5, r5, r1
 80052c6:	4629      	mov	r1, r5
 80052c8:	f7ff ffa6 	bl	8005218 <sbrk_aligned>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d03a      	beq.n	8005346 <_malloc_r+0xea>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	442b      	add	r3, r5
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	f8d8 3000 	ldr.w	r3, [r8]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	bb62      	cbnz	r2, 8005338 <_malloc_r+0xdc>
 80052de:	f8c8 7000 	str.w	r7, [r8]
 80052e2:	e00f      	b.n	8005304 <_malloc_r+0xa8>
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	1b52      	subs	r2, r2, r5
 80052e8:	d420      	bmi.n	800532c <_malloc_r+0xd0>
 80052ea:	2a0b      	cmp	r2, #11
 80052ec:	d917      	bls.n	800531e <_malloc_r+0xc2>
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	6025      	str	r5, [r4, #0]
 80052f4:	bf18      	it	ne
 80052f6:	6059      	strne	r1, [r3, #4]
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	bf08      	it	eq
 80052fc:	f8c8 1000 	streq.w	r1, [r8]
 8005300:	5162      	str	r2, [r4, r5]
 8005302:	604b      	str	r3, [r1, #4]
 8005304:	4630      	mov	r0, r6
 8005306:	f000 f82f 	bl	8005368 <__malloc_unlock>
 800530a:	f104 000b 	add.w	r0, r4, #11
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	f020 0007 	bic.w	r0, r0, #7
 8005314:	1ac2      	subs	r2, r0, r3
 8005316:	bf1c      	itt	ne
 8005318:	1a1b      	subne	r3, r3, r0
 800531a:	50a3      	strne	r3, [r4, r2]
 800531c:	e7af      	b.n	800527e <_malloc_r+0x22>
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	42a3      	cmp	r3, r4
 8005322:	bf0c      	ite	eq
 8005324:	f8c8 2000 	streq.w	r2, [r8]
 8005328:	605a      	strne	r2, [r3, #4]
 800532a:	e7eb      	b.n	8005304 <_malloc_r+0xa8>
 800532c:	4623      	mov	r3, r4
 800532e:	6864      	ldr	r4, [r4, #4]
 8005330:	e7ae      	b.n	8005290 <_malloc_r+0x34>
 8005332:	463c      	mov	r4, r7
 8005334:	687f      	ldr	r7, [r7, #4]
 8005336:	e7b6      	b.n	80052a6 <_malloc_r+0x4a>
 8005338:	461a      	mov	r2, r3
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	42a3      	cmp	r3, r4
 800533e:	d1fb      	bne.n	8005338 <_malloc_r+0xdc>
 8005340:	2300      	movs	r3, #0
 8005342:	6053      	str	r3, [r2, #4]
 8005344:	e7de      	b.n	8005304 <_malloc_r+0xa8>
 8005346:	230c      	movs	r3, #12
 8005348:	4630      	mov	r0, r6
 800534a:	6033      	str	r3, [r6, #0]
 800534c:	f000 f80c 	bl	8005368 <__malloc_unlock>
 8005350:	e794      	b.n	800527c <_malloc_r+0x20>
 8005352:	6005      	str	r5, [r0, #0]
 8005354:	e7d6      	b.n	8005304 <_malloc_r+0xa8>
 8005356:	bf00      	nop
 8005358:	20000468 	.word	0x20000468

0800535c <__malloc_lock>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__malloc_lock+0x8>)
 800535e:	f7ff b898 	b.w	8004492 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	20000460 	.word	0x20000460

08005368 <__malloc_unlock>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__malloc_unlock+0x8>)
 800536a:	f7ff b893 	b.w	8004494 <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	20000460 	.word	0x20000460

08005374 <_Balloc>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	69c6      	ldr	r6, [r0, #28]
 8005378:	4604      	mov	r4, r0
 800537a:	460d      	mov	r5, r1
 800537c:	b976      	cbnz	r6, 800539c <_Balloc+0x28>
 800537e:	2010      	movs	r0, #16
 8005380:	f7ff ff42 	bl	8005208 <malloc>
 8005384:	4602      	mov	r2, r0
 8005386:	61e0      	str	r0, [r4, #28]
 8005388:	b920      	cbnz	r0, 8005394 <_Balloc+0x20>
 800538a:	216b      	movs	r1, #107	@ 0x6b
 800538c:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <_Balloc+0x78>)
 800538e:	4818      	ldr	r0, [pc, #96]	@ (80053f0 <_Balloc+0x7c>)
 8005390:	f002 f8d6 	bl	8007540 <__assert_func>
 8005394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005398:	6006      	str	r6, [r0, #0]
 800539a:	60c6      	str	r6, [r0, #12]
 800539c:	69e6      	ldr	r6, [r4, #28]
 800539e:	68f3      	ldr	r3, [r6, #12]
 80053a0:	b183      	cbz	r3, 80053c4 <_Balloc+0x50>
 80053a2:	69e3      	ldr	r3, [r4, #28]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053aa:	b9b8      	cbnz	r0, 80053dc <_Balloc+0x68>
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f605 	lsl.w	r6, r1, r5
 80053b2:	1d72      	adds	r2, r6, #5
 80053b4:	4620      	mov	r0, r4
 80053b6:	0092      	lsls	r2, r2, #2
 80053b8:	f002 f8e0 	bl	800757c <_calloc_r>
 80053bc:	b160      	cbz	r0, 80053d8 <_Balloc+0x64>
 80053be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053c2:	e00e      	b.n	80053e2 <_Balloc+0x6e>
 80053c4:	2221      	movs	r2, #33	@ 0x21
 80053c6:	2104      	movs	r1, #4
 80053c8:	4620      	mov	r0, r4
 80053ca:	f002 f8d7 	bl	800757c <_calloc_r>
 80053ce:	69e3      	ldr	r3, [r4, #28]
 80053d0:	60f0      	str	r0, [r6, #12]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e4      	bne.n	80053a2 <_Balloc+0x2e>
 80053d8:	2000      	movs	r0, #0
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	6802      	ldr	r2, [r0, #0]
 80053de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053e2:	2300      	movs	r3, #0
 80053e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053e8:	e7f7      	b.n	80053da <_Balloc+0x66>
 80053ea:	bf00      	nop
 80053ec:	0800844e 	.word	0x0800844e
 80053f0:	080084ce 	.word	0x080084ce

080053f4 <_Bfree>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	69c6      	ldr	r6, [r0, #28]
 80053f8:	4605      	mov	r5, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	b976      	cbnz	r6, 800541c <_Bfree+0x28>
 80053fe:	2010      	movs	r0, #16
 8005400:	f7ff ff02 	bl	8005208 <malloc>
 8005404:	4602      	mov	r2, r0
 8005406:	61e8      	str	r0, [r5, #28]
 8005408:	b920      	cbnz	r0, 8005414 <_Bfree+0x20>
 800540a:	218f      	movs	r1, #143	@ 0x8f
 800540c:	4b08      	ldr	r3, [pc, #32]	@ (8005430 <_Bfree+0x3c>)
 800540e:	4809      	ldr	r0, [pc, #36]	@ (8005434 <_Bfree+0x40>)
 8005410:	f002 f896 	bl	8007540 <__assert_func>
 8005414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005418:	6006      	str	r6, [r0, #0]
 800541a:	60c6      	str	r6, [r0, #12]
 800541c:	b13c      	cbz	r4, 800542e <_Bfree+0x3a>
 800541e:	69eb      	ldr	r3, [r5, #28]
 8005420:	6862      	ldr	r2, [r4, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005428:	6021      	str	r1, [r4, #0]
 800542a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	0800844e 	.word	0x0800844e
 8005434:	080084ce 	.word	0x080084ce

08005438 <__multadd>:
 8005438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543c:	4607      	mov	r7, r0
 800543e:	460c      	mov	r4, r1
 8005440:	461e      	mov	r6, r3
 8005442:	2000      	movs	r0, #0
 8005444:	690d      	ldr	r5, [r1, #16]
 8005446:	f101 0c14 	add.w	ip, r1, #20
 800544a:	f8dc 3000 	ldr.w	r3, [ip]
 800544e:	3001      	adds	r0, #1
 8005450:	b299      	uxth	r1, r3
 8005452:	fb02 6101 	mla	r1, r2, r1, r6
 8005456:	0c1e      	lsrs	r6, r3, #16
 8005458:	0c0b      	lsrs	r3, r1, #16
 800545a:	fb02 3306 	mla	r3, r2, r6, r3
 800545e:	b289      	uxth	r1, r1
 8005460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005464:	4285      	cmp	r5, r0
 8005466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800546a:	f84c 1b04 	str.w	r1, [ip], #4
 800546e:	dcec      	bgt.n	800544a <__multadd+0x12>
 8005470:	b30e      	cbz	r6, 80054b6 <__multadd+0x7e>
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	42ab      	cmp	r3, r5
 8005476:	dc19      	bgt.n	80054ac <__multadd+0x74>
 8005478:	6861      	ldr	r1, [r4, #4]
 800547a:	4638      	mov	r0, r7
 800547c:	3101      	adds	r1, #1
 800547e:	f7ff ff79 	bl	8005374 <_Balloc>
 8005482:	4680      	mov	r8, r0
 8005484:	b928      	cbnz	r0, 8005492 <__multadd+0x5a>
 8005486:	4602      	mov	r2, r0
 8005488:	21ba      	movs	r1, #186	@ 0xba
 800548a:	4b0c      	ldr	r3, [pc, #48]	@ (80054bc <__multadd+0x84>)
 800548c:	480c      	ldr	r0, [pc, #48]	@ (80054c0 <__multadd+0x88>)
 800548e:	f002 f857 	bl	8007540 <__assert_func>
 8005492:	6922      	ldr	r2, [r4, #16]
 8005494:	f104 010c 	add.w	r1, r4, #12
 8005498:	3202      	adds	r2, #2
 800549a:	0092      	lsls	r2, r2, #2
 800549c:	300c      	adds	r0, #12
 800549e:	f002 f83b 	bl	8007518 <memcpy>
 80054a2:	4621      	mov	r1, r4
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff ffa5 	bl	80053f4 <_Bfree>
 80054aa:	4644      	mov	r4, r8
 80054ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054b0:	3501      	adds	r5, #1
 80054b2:	615e      	str	r6, [r3, #20]
 80054b4:	6125      	str	r5, [r4, #16]
 80054b6:	4620      	mov	r0, r4
 80054b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054bc:	080084bd 	.word	0x080084bd
 80054c0:	080084ce 	.word	0x080084ce

080054c4 <__s2b>:
 80054c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c8:	4615      	mov	r5, r2
 80054ca:	2209      	movs	r2, #9
 80054cc:	461f      	mov	r7, r3
 80054ce:	3308      	adds	r3, #8
 80054d0:	460c      	mov	r4, r1
 80054d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054d6:	4606      	mov	r6, r0
 80054d8:	2201      	movs	r2, #1
 80054da:	2100      	movs	r1, #0
 80054dc:	429a      	cmp	r2, r3
 80054de:	db09      	blt.n	80054f4 <__s2b+0x30>
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff ff47 	bl	8005374 <_Balloc>
 80054e6:	b940      	cbnz	r0, 80054fa <__s2b+0x36>
 80054e8:	4602      	mov	r2, r0
 80054ea:	21d3      	movs	r1, #211	@ 0xd3
 80054ec:	4b18      	ldr	r3, [pc, #96]	@ (8005550 <__s2b+0x8c>)
 80054ee:	4819      	ldr	r0, [pc, #100]	@ (8005554 <__s2b+0x90>)
 80054f0:	f002 f826 	bl	8007540 <__assert_func>
 80054f4:	0052      	lsls	r2, r2, #1
 80054f6:	3101      	adds	r1, #1
 80054f8:	e7f0      	b.n	80054dc <__s2b+0x18>
 80054fa:	9b08      	ldr	r3, [sp, #32]
 80054fc:	2d09      	cmp	r5, #9
 80054fe:	6143      	str	r3, [r0, #20]
 8005500:	f04f 0301 	mov.w	r3, #1
 8005504:	6103      	str	r3, [r0, #16]
 8005506:	dd16      	ble.n	8005536 <__s2b+0x72>
 8005508:	f104 0909 	add.w	r9, r4, #9
 800550c:	46c8      	mov	r8, r9
 800550e:	442c      	add	r4, r5
 8005510:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005514:	4601      	mov	r1, r0
 8005516:	220a      	movs	r2, #10
 8005518:	4630      	mov	r0, r6
 800551a:	3b30      	subs	r3, #48	@ 0x30
 800551c:	f7ff ff8c 	bl	8005438 <__multadd>
 8005520:	45a0      	cmp	r8, r4
 8005522:	d1f5      	bne.n	8005510 <__s2b+0x4c>
 8005524:	f1a5 0408 	sub.w	r4, r5, #8
 8005528:	444c      	add	r4, r9
 800552a:	1b2d      	subs	r5, r5, r4
 800552c:	1963      	adds	r3, r4, r5
 800552e:	42bb      	cmp	r3, r7
 8005530:	db04      	blt.n	800553c <__s2b+0x78>
 8005532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005536:	2509      	movs	r5, #9
 8005538:	340a      	adds	r4, #10
 800553a:	e7f6      	b.n	800552a <__s2b+0x66>
 800553c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005540:	4601      	mov	r1, r0
 8005542:	220a      	movs	r2, #10
 8005544:	4630      	mov	r0, r6
 8005546:	3b30      	subs	r3, #48	@ 0x30
 8005548:	f7ff ff76 	bl	8005438 <__multadd>
 800554c:	e7ee      	b.n	800552c <__s2b+0x68>
 800554e:	bf00      	nop
 8005550:	080084bd 	.word	0x080084bd
 8005554:	080084ce 	.word	0x080084ce

08005558 <__hi0bits>:
 8005558:	4603      	mov	r3, r0
 800555a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800555e:	bf3a      	itte	cc
 8005560:	0403      	lslcc	r3, r0, #16
 8005562:	2010      	movcc	r0, #16
 8005564:	2000      	movcs	r0, #0
 8005566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800556a:	bf3c      	itt	cc
 800556c:	021b      	lslcc	r3, r3, #8
 800556e:	3008      	addcc	r0, #8
 8005570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005574:	bf3c      	itt	cc
 8005576:	011b      	lslcc	r3, r3, #4
 8005578:	3004      	addcc	r0, #4
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557e:	bf3c      	itt	cc
 8005580:	009b      	lslcc	r3, r3, #2
 8005582:	3002      	addcc	r0, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	db05      	blt.n	8005594 <__hi0bits+0x3c>
 8005588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800558c:	f100 0001 	add.w	r0, r0, #1
 8005590:	bf08      	it	eq
 8005592:	2020      	moveq	r0, #32
 8005594:	4770      	bx	lr

08005596 <__lo0bits>:
 8005596:	6803      	ldr	r3, [r0, #0]
 8005598:	4602      	mov	r2, r0
 800559a:	f013 0007 	ands.w	r0, r3, #7
 800559e:	d00b      	beq.n	80055b8 <__lo0bits+0x22>
 80055a0:	07d9      	lsls	r1, r3, #31
 80055a2:	d421      	bmi.n	80055e8 <__lo0bits+0x52>
 80055a4:	0798      	lsls	r0, r3, #30
 80055a6:	bf49      	itett	mi
 80055a8:	085b      	lsrmi	r3, r3, #1
 80055aa:	089b      	lsrpl	r3, r3, #2
 80055ac:	2001      	movmi	r0, #1
 80055ae:	6013      	strmi	r3, [r2, #0]
 80055b0:	bf5c      	itt	pl
 80055b2:	2002      	movpl	r0, #2
 80055b4:	6013      	strpl	r3, [r2, #0]
 80055b6:	4770      	bx	lr
 80055b8:	b299      	uxth	r1, r3
 80055ba:	b909      	cbnz	r1, 80055c0 <__lo0bits+0x2a>
 80055bc:	2010      	movs	r0, #16
 80055be:	0c1b      	lsrs	r3, r3, #16
 80055c0:	b2d9      	uxtb	r1, r3
 80055c2:	b909      	cbnz	r1, 80055c8 <__lo0bits+0x32>
 80055c4:	3008      	adds	r0, #8
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	0719      	lsls	r1, r3, #28
 80055ca:	bf04      	itt	eq
 80055cc:	091b      	lsreq	r3, r3, #4
 80055ce:	3004      	addeq	r0, #4
 80055d0:	0799      	lsls	r1, r3, #30
 80055d2:	bf04      	itt	eq
 80055d4:	089b      	lsreq	r3, r3, #2
 80055d6:	3002      	addeq	r0, #2
 80055d8:	07d9      	lsls	r1, r3, #31
 80055da:	d403      	bmi.n	80055e4 <__lo0bits+0x4e>
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	f100 0001 	add.w	r0, r0, #1
 80055e2:	d003      	beq.n	80055ec <__lo0bits+0x56>
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	4770      	bx	lr
 80055e8:	2000      	movs	r0, #0
 80055ea:	4770      	bx	lr
 80055ec:	2020      	movs	r0, #32
 80055ee:	4770      	bx	lr

080055f0 <__i2b>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	460c      	mov	r4, r1
 80055f4:	2101      	movs	r1, #1
 80055f6:	f7ff febd 	bl	8005374 <_Balloc>
 80055fa:	4602      	mov	r2, r0
 80055fc:	b928      	cbnz	r0, 800560a <__i2b+0x1a>
 80055fe:	f240 1145 	movw	r1, #325	@ 0x145
 8005602:	4b04      	ldr	r3, [pc, #16]	@ (8005614 <__i2b+0x24>)
 8005604:	4804      	ldr	r0, [pc, #16]	@ (8005618 <__i2b+0x28>)
 8005606:	f001 ff9b 	bl	8007540 <__assert_func>
 800560a:	2301      	movs	r3, #1
 800560c:	6144      	str	r4, [r0, #20]
 800560e:	6103      	str	r3, [r0, #16]
 8005610:	bd10      	pop	{r4, pc}
 8005612:	bf00      	nop
 8005614:	080084bd 	.word	0x080084bd
 8005618:	080084ce 	.word	0x080084ce

0800561c <__multiply>:
 800561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	4617      	mov	r7, r2
 8005622:	690a      	ldr	r2, [r1, #16]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4689      	mov	r9, r1
 8005628:	429a      	cmp	r2, r3
 800562a:	bfa2      	ittt	ge
 800562c:	463b      	movge	r3, r7
 800562e:	460f      	movge	r7, r1
 8005630:	4699      	movge	r9, r3
 8005632:	693d      	ldr	r5, [r7, #16]
 8005634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	eb05 060a 	add.w	r6, r5, sl
 8005640:	42b3      	cmp	r3, r6
 8005642:	b085      	sub	sp, #20
 8005644:	bfb8      	it	lt
 8005646:	3101      	addlt	r1, #1
 8005648:	f7ff fe94 	bl	8005374 <_Balloc>
 800564c:	b930      	cbnz	r0, 800565c <__multiply+0x40>
 800564e:	4602      	mov	r2, r0
 8005650:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005654:	4b40      	ldr	r3, [pc, #256]	@ (8005758 <__multiply+0x13c>)
 8005656:	4841      	ldr	r0, [pc, #260]	@ (800575c <__multiply+0x140>)
 8005658:	f001 ff72 	bl	8007540 <__assert_func>
 800565c:	f100 0414 	add.w	r4, r0, #20
 8005660:	4623      	mov	r3, r4
 8005662:	2200      	movs	r2, #0
 8005664:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005668:	4573      	cmp	r3, lr
 800566a:	d320      	bcc.n	80056ae <__multiply+0x92>
 800566c:	f107 0814 	add.w	r8, r7, #20
 8005670:	f109 0114 	add.w	r1, r9, #20
 8005674:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005678:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800567c:	9302      	str	r3, [sp, #8]
 800567e:	1beb      	subs	r3, r5, r7
 8005680:	3b15      	subs	r3, #21
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	3304      	adds	r3, #4
 8005688:	3715      	adds	r7, #21
 800568a:	42bd      	cmp	r5, r7
 800568c:	bf38      	it	cc
 800568e:	2304      	movcc	r3, #4
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	9b02      	ldr	r3, [sp, #8]
 8005694:	9103      	str	r1, [sp, #12]
 8005696:	428b      	cmp	r3, r1
 8005698:	d80c      	bhi.n	80056b4 <__multiply+0x98>
 800569a:	2e00      	cmp	r6, #0
 800569c:	dd03      	ble.n	80056a6 <__multiply+0x8a>
 800569e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d055      	beq.n	8005752 <__multiply+0x136>
 80056a6:	6106      	str	r6, [r0, #16]
 80056a8:	b005      	add	sp, #20
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	f843 2b04 	str.w	r2, [r3], #4
 80056b2:	e7d9      	b.n	8005668 <__multiply+0x4c>
 80056b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80056b8:	f1ba 0f00 	cmp.w	sl, #0
 80056bc:	d01f      	beq.n	80056fe <__multiply+0xe2>
 80056be:	46c4      	mov	ip, r8
 80056c0:	46a1      	mov	r9, r4
 80056c2:	2700      	movs	r7, #0
 80056c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80056c8:	f8d9 3000 	ldr.w	r3, [r9]
 80056cc:	fa1f fb82 	uxth.w	fp, r2
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	fb0a 330b 	mla	r3, sl, fp, r3
 80056d6:	443b      	add	r3, r7
 80056d8:	f8d9 7000 	ldr.w	r7, [r9]
 80056dc:	0c12      	lsrs	r2, r2, #16
 80056de:	0c3f      	lsrs	r7, r7, #16
 80056e0:	fb0a 7202 	mla	r2, sl, r2, r7
 80056e4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ee:	4565      	cmp	r5, ip
 80056f0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80056f4:	f849 3b04 	str.w	r3, [r9], #4
 80056f8:	d8e4      	bhi.n	80056c4 <__multiply+0xa8>
 80056fa:	9b01      	ldr	r3, [sp, #4]
 80056fc:	50e7      	str	r7, [r4, r3]
 80056fe:	9b03      	ldr	r3, [sp, #12]
 8005700:	3104      	adds	r1, #4
 8005702:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005706:	f1b9 0f00 	cmp.w	r9, #0
 800570a:	d020      	beq.n	800574e <__multiply+0x132>
 800570c:	4647      	mov	r7, r8
 800570e:	46a4      	mov	ip, r4
 8005710:	f04f 0a00 	mov.w	sl, #0
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	f8b7 b000 	ldrh.w	fp, [r7]
 800571a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800571e:	b29b      	uxth	r3, r3
 8005720:	fb09 220b 	mla	r2, r9, fp, r2
 8005724:	4452      	add	r2, sl
 8005726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800572a:	f84c 3b04 	str.w	r3, [ip], #4
 800572e:	f857 3b04 	ldr.w	r3, [r7], #4
 8005732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005736:	f8bc 3000 	ldrh.w	r3, [ip]
 800573a:	42bd      	cmp	r5, r7
 800573c:	fb09 330a 	mla	r3, r9, sl, r3
 8005740:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005744:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005748:	d8e5      	bhi.n	8005716 <__multiply+0xfa>
 800574a:	9a01      	ldr	r2, [sp, #4]
 800574c:	50a3      	str	r3, [r4, r2]
 800574e:	3404      	adds	r4, #4
 8005750:	e79f      	b.n	8005692 <__multiply+0x76>
 8005752:	3e01      	subs	r6, #1
 8005754:	e7a1      	b.n	800569a <__multiply+0x7e>
 8005756:	bf00      	nop
 8005758:	080084bd 	.word	0x080084bd
 800575c:	080084ce 	.word	0x080084ce

08005760 <__pow5mult>:
 8005760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005764:	4615      	mov	r5, r2
 8005766:	f012 0203 	ands.w	r2, r2, #3
 800576a:	4607      	mov	r7, r0
 800576c:	460e      	mov	r6, r1
 800576e:	d007      	beq.n	8005780 <__pow5mult+0x20>
 8005770:	4c25      	ldr	r4, [pc, #148]	@ (8005808 <__pow5mult+0xa8>)
 8005772:	3a01      	subs	r2, #1
 8005774:	2300      	movs	r3, #0
 8005776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800577a:	f7ff fe5d 	bl	8005438 <__multadd>
 800577e:	4606      	mov	r6, r0
 8005780:	10ad      	asrs	r5, r5, #2
 8005782:	d03d      	beq.n	8005800 <__pow5mult+0xa0>
 8005784:	69fc      	ldr	r4, [r7, #28]
 8005786:	b97c      	cbnz	r4, 80057a8 <__pow5mult+0x48>
 8005788:	2010      	movs	r0, #16
 800578a:	f7ff fd3d 	bl	8005208 <malloc>
 800578e:	4602      	mov	r2, r0
 8005790:	61f8      	str	r0, [r7, #28]
 8005792:	b928      	cbnz	r0, 80057a0 <__pow5mult+0x40>
 8005794:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005798:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <__pow5mult+0xac>)
 800579a:	481d      	ldr	r0, [pc, #116]	@ (8005810 <__pow5mult+0xb0>)
 800579c:	f001 fed0 	bl	8007540 <__assert_func>
 80057a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057a4:	6004      	str	r4, [r0, #0]
 80057a6:	60c4      	str	r4, [r0, #12]
 80057a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80057ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057b0:	b94c      	cbnz	r4, 80057c6 <__pow5mult+0x66>
 80057b2:	f240 2171 	movw	r1, #625	@ 0x271
 80057b6:	4638      	mov	r0, r7
 80057b8:	f7ff ff1a 	bl	80055f0 <__i2b>
 80057bc:	2300      	movs	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80057c4:	6003      	str	r3, [r0, #0]
 80057c6:	f04f 0900 	mov.w	r9, #0
 80057ca:	07eb      	lsls	r3, r5, #31
 80057cc:	d50a      	bpl.n	80057e4 <__pow5mult+0x84>
 80057ce:	4631      	mov	r1, r6
 80057d0:	4622      	mov	r2, r4
 80057d2:	4638      	mov	r0, r7
 80057d4:	f7ff ff22 	bl	800561c <__multiply>
 80057d8:	4680      	mov	r8, r0
 80057da:	4631      	mov	r1, r6
 80057dc:	4638      	mov	r0, r7
 80057de:	f7ff fe09 	bl	80053f4 <_Bfree>
 80057e2:	4646      	mov	r6, r8
 80057e4:	106d      	asrs	r5, r5, #1
 80057e6:	d00b      	beq.n	8005800 <__pow5mult+0xa0>
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	b938      	cbnz	r0, 80057fc <__pow5mult+0x9c>
 80057ec:	4622      	mov	r2, r4
 80057ee:	4621      	mov	r1, r4
 80057f0:	4638      	mov	r0, r7
 80057f2:	f7ff ff13 	bl	800561c <__multiply>
 80057f6:	6020      	str	r0, [r4, #0]
 80057f8:	f8c0 9000 	str.w	r9, [r0]
 80057fc:	4604      	mov	r4, r0
 80057fe:	e7e4      	b.n	80057ca <__pow5mult+0x6a>
 8005800:	4630      	mov	r0, r6
 8005802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005806:	bf00      	nop
 8005808:	080085fc 	.word	0x080085fc
 800580c:	0800844e 	.word	0x0800844e
 8005810:	080084ce 	.word	0x080084ce

08005814 <__lshift>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	460c      	mov	r4, r1
 800581a:	4607      	mov	r7, r0
 800581c:	4691      	mov	r9, r2
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	6849      	ldr	r1, [r1, #4]
 8005822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005826:	68a3      	ldr	r3, [r4, #8]
 8005828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800582c:	f108 0601 	add.w	r6, r8, #1
 8005830:	42b3      	cmp	r3, r6
 8005832:	db0b      	blt.n	800584c <__lshift+0x38>
 8005834:	4638      	mov	r0, r7
 8005836:	f7ff fd9d 	bl	8005374 <_Balloc>
 800583a:	4605      	mov	r5, r0
 800583c:	b948      	cbnz	r0, 8005852 <__lshift+0x3e>
 800583e:	4602      	mov	r2, r0
 8005840:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005844:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <__lshift+0xd0>)
 8005846:	4828      	ldr	r0, [pc, #160]	@ (80058e8 <__lshift+0xd4>)
 8005848:	f001 fe7a 	bl	8007540 <__assert_func>
 800584c:	3101      	adds	r1, #1
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	e7ee      	b.n	8005830 <__lshift+0x1c>
 8005852:	2300      	movs	r3, #0
 8005854:	f100 0114 	add.w	r1, r0, #20
 8005858:	f100 0210 	add.w	r2, r0, #16
 800585c:	4618      	mov	r0, r3
 800585e:	4553      	cmp	r3, sl
 8005860:	db33      	blt.n	80058ca <__lshift+0xb6>
 8005862:	6920      	ldr	r0, [r4, #16]
 8005864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005868:	f104 0314 	add.w	r3, r4, #20
 800586c:	f019 091f 	ands.w	r9, r9, #31
 8005870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005878:	d02b      	beq.n	80058d2 <__lshift+0xbe>
 800587a:	468a      	mov	sl, r1
 800587c:	2200      	movs	r2, #0
 800587e:	f1c9 0e20 	rsb	lr, r9, #32
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	fa00 f009 	lsl.w	r0, r0, r9
 8005888:	4310      	orrs	r0, r2
 800588a:	f84a 0b04 	str.w	r0, [sl], #4
 800588e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005892:	459c      	cmp	ip, r3
 8005894:	fa22 f20e 	lsr.w	r2, r2, lr
 8005898:	d8f3      	bhi.n	8005882 <__lshift+0x6e>
 800589a:	ebac 0304 	sub.w	r3, ip, r4
 800589e:	3b15      	subs	r3, #21
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	3304      	adds	r3, #4
 80058a6:	f104 0015 	add.w	r0, r4, #21
 80058aa:	4560      	cmp	r0, ip
 80058ac:	bf88      	it	hi
 80058ae:	2304      	movhi	r3, #4
 80058b0:	50ca      	str	r2, [r1, r3]
 80058b2:	b10a      	cbz	r2, 80058b8 <__lshift+0xa4>
 80058b4:	f108 0602 	add.w	r6, r8, #2
 80058b8:	3e01      	subs	r6, #1
 80058ba:	4638      	mov	r0, r7
 80058bc:	4621      	mov	r1, r4
 80058be:	612e      	str	r6, [r5, #16]
 80058c0:	f7ff fd98 	bl	80053f4 <_Bfree>
 80058c4:	4628      	mov	r0, r5
 80058c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80058ce:	3301      	adds	r3, #1
 80058d0:	e7c5      	b.n	800585e <__lshift+0x4a>
 80058d2:	3904      	subs	r1, #4
 80058d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d8:	459c      	cmp	ip, r3
 80058da:	f841 2f04 	str.w	r2, [r1, #4]!
 80058de:	d8f9      	bhi.n	80058d4 <__lshift+0xc0>
 80058e0:	e7ea      	b.n	80058b8 <__lshift+0xa4>
 80058e2:	bf00      	nop
 80058e4:	080084bd 	.word	0x080084bd
 80058e8:	080084ce 	.word	0x080084ce

080058ec <__mcmp>:
 80058ec:	4603      	mov	r3, r0
 80058ee:	690a      	ldr	r2, [r1, #16]
 80058f0:	6900      	ldr	r0, [r0, #16]
 80058f2:	b530      	push	{r4, r5, lr}
 80058f4:	1a80      	subs	r0, r0, r2
 80058f6:	d10e      	bne.n	8005916 <__mcmp+0x2a>
 80058f8:	3314      	adds	r3, #20
 80058fa:	3114      	adds	r1, #20
 80058fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005900:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005904:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005908:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800590c:	4295      	cmp	r5, r2
 800590e:	d003      	beq.n	8005918 <__mcmp+0x2c>
 8005910:	d205      	bcs.n	800591e <__mcmp+0x32>
 8005912:	f04f 30ff 	mov.w	r0, #4294967295
 8005916:	bd30      	pop	{r4, r5, pc}
 8005918:	42a3      	cmp	r3, r4
 800591a:	d3f3      	bcc.n	8005904 <__mcmp+0x18>
 800591c:	e7fb      	b.n	8005916 <__mcmp+0x2a>
 800591e:	2001      	movs	r0, #1
 8005920:	e7f9      	b.n	8005916 <__mcmp+0x2a>
	...

08005924 <__mdiff>:
 8005924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	4689      	mov	r9, r1
 800592a:	4606      	mov	r6, r0
 800592c:	4611      	mov	r1, r2
 800592e:	4648      	mov	r0, r9
 8005930:	4614      	mov	r4, r2
 8005932:	f7ff ffdb 	bl	80058ec <__mcmp>
 8005936:	1e05      	subs	r5, r0, #0
 8005938:	d112      	bne.n	8005960 <__mdiff+0x3c>
 800593a:	4629      	mov	r1, r5
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff fd19 	bl	8005374 <_Balloc>
 8005942:	4602      	mov	r2, r0
 8005944:	b928      	cbnz	r0, 8005952 <__mdiff+0x2e>
 8005946:	f240 2137 	movw	r1, #567	@ 0x237
 800594a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a44 <__mdiff+0x120>)
 800594c:	483e      	ldr	r0, [pc, #248]	@ (8005a48 <__mdiff+0x124>)
 800594e:	f001 fdf7 	bl	8007540 <__assert_func>
 8005952:	2301      	movs	r3, #1
 8005954:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005958:	4610      	mov	r0, r2
 800595a:	b003      	add	sp, #12
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	bfbc      	itt	lt
 8005962:	464b      	movlt	r3, r9
 8005964:	46a1      	movlt	r9, r4
 8005966:	4630      	mov	r0, r6
 8005968:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800596c:	bfba      	itte	lt
 800596e:	461c      	movlt	r4, r3
 8005970:	2501      	movlt	r5, #1
 8005972:	2500      	movge	r5, #0
 8005974:	f7ff fcfe 	bl	8005374 <_Balloc>
 8005978:	4602      	mov	r2, r0
 800597a:	b918      	cbnz	r0, 8005984 <__mdiff+0x60>
 800597c:	f240 2145 	movw	r1, #581	@ 0x245
 8005980:	4b30      	ldr	r3, [pc, #192]	@ (8005a44 <__mdiff+0x120>)
 8005982:	e7e3      	b.n	800594c <__mdiff+0x28>
 8005984:	f100 0b14 	add.w	fp, r0, #20
 8005988:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800598c:	f109 0310 	add.w	r3, r9, #16
 8005990:	60c5      	str	r5, [r0, #12]
 8005992:	f04f 0c00 	mov.w	ip, #0
 8005996:	f109 0514 	add.w	r5, r9, #20
 800599a:	46d9      	mov	r9, fp
 800599c:	6926      	ldr	r6, [r4, #16]
 800599e:	f104 0e14 	add.w	lr, r4, #20
 80059a2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80059a6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80059b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80059b6:	b281      	uxth	r1, r0
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	fa1f f38a 	uxth.w	r3, sl
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	0c00      	lsrs	r0, r0, #16
 80059c2:	4463      	add	r3, ip
 80059c4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80059c8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059d2:	4576      	cmp	r6, lr
 80059d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059d8:	f849 3b04 	str.w	r3, [r9], #4
 80059dc:	d8e6      	bhi.n	80059ac <__mdiff+0x88>
 80059de:	1b33      	subs	r3, r6, r4
 80059e0:	3b15      	subs	r3, #21
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	3415      	adds	r4, #21
 80059e8:	3304      	adds	r3, #4
 80059ea:	42a6      	cmp	r6, r4
 80059ec:	bf38      	it	cc
 80059ee:	2304      	movcc	r3, #4
 80059f0:	441d      	add	r5, r3
 80059f2:	445b      	add	r3, fp
 80059f4:	461e      	mov	r6, r3
 80059f6:	462c      	mov	r4, r5
 80059f8:	4544      	cmp	r4, r8
 80059fa:	d30e      	bcc.n	8005a1a <__mdiff+0xf6>
 80059fc:	f108 0103 	add.w	r1, r8, #3
 8005a00:	1b49      	subs	r1, r1, r5
 8005a02:	f021 0103 	bic.w	r1, r1, #3
 8005a06:	3d03      	subs	r5, #3
 8005a08:	45a8      	cmp	r8, r5
 8005a0a:	bf38      	it	cc
 8005a0c:	2100      	movcc	r1, #0
 8005a0e:	440b      	add	r3, r1
 8005a10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a14:	b199      	cbz	r1, 8005a3e <__mdiff+0x11a>
 8005a16:	6117      	str	r7, [r2, #16]
 8005a18:	e79e      	b.n	8005958 <__mdiff+0x34>
 8005a1a:	46e6      	mov	lr, ip
 8005a1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a20:	fa1f fc81 	uxth.w	ip, r1
 8005a24:	44f4      	add	ip, lr
 8005a26:	0c08      	lsrs	r0, r1, #16
 8005a28:	4471      	add	r1, lr
 8005a2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a2e:	b289      	uxth	r1, r1
 8005a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a38:	f846 1b04 	str.w	r1, [r6], #4
 8005a3c:	e7dc      	b.n	80059f8 <__mdiff+0xd4>
 8005a3e:	3f01      	subs	r7, #1
 8005a40:	e7e6      	b.n	8005a10 <__mdiff+0xec>
 8005a42:	bf00      	nop
 8005a44:	080084bd 	.word	0x080084bd
 8005a48:	080084ce 	.word	0x080084ce

08005a4c <__ulp>:
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a88 <__ulp+0x3c>)
 8005a4e:	400b      	ands	r3, r1
 8005a50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dc08      	bgt.n	8005a6a <__ulp+0x1e>
 8005a58:	425b      	negs	r3, r3
 8005a5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005a5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005a62:	da04      	bge.n	8005a6e <__ulp+0x22>
 8005a64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a68:	4113      	asrs	r3, r2
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	e008      	b.n	8005a80 <__ulp+0x34>
 8005a6e:	f1a2 0314 	sub.w	r3, r2, #20
 8005a72:	2b1e      	cmp	r3, #30
 8005a74:	bfd6      	itet	le
 8005a76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005a7a:	2201      	movgt	r2, #1
 8005a7c:	40da      	lsrle	r2, r3
 8005a7e:	2300      	movs	r3, #0
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	7ff00000 	.word	0x7ff00000

08005a8c <__b2d>:
 8005a8c:	6902      	ldr	r2, [r0, #16]
 8005a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a90:	f100 0614 	add.w	r6, r0, #20
 8005a94:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005a98:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005a9c:	4f1e      	ldr	r7, [pc, #120]	@ (8005b18 <__b2d+0x8c>)
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fd5a 	bl	8005558 <__hi0bits>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f1c0 0020 	rsb	r0, r0, #32
 8005aaa:	2b0a      	cmp	r3, #10
 8005aac:	f1a2 0504 	sub.w	r5, r2, #4
 8005ab0:	6008      	str	r0, [r1, #0]
 8005ab2:	dc12      	bgt.n	8005ada <__b2d+0x4e>
 8005ab4:	42ae      	cmp	r6, r5
 8005ab6:	bf2c      	ite	cs
 8005ab8:	2200      	movcs	r2, #0
 8005aba:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005abe:	f1c3 0c0b 	rsb	ip, r3, #11
 8005ac2:	3315      	adds	r3, #21
 8005ac4:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005ac8:	fa04 f303 	lsl.w	r3, r4, r3
 8005acc:	fa22 f20c 	lsr.w	r2, r2, ip
 8005ad0:	ea4e 0107 	orr.w	r1, lr, r7
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ada:	42ae      	cmp	r6, r5
 8005adc:	bf36      	itet	cc
 8005ade:	f1a2 0508 	subcc.w	r5, r2, #8
 8005ae2:	2200      	movcs	r2, #0
 8005ae4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005ae8:	3b0b      	subs	r3, #11
 8005aea:	d012      	beq.n	8005b12 <__b2d+0x86>
 8005aec:	f1c3 0720 	rsb	r7, r3, #32
 8005af0:	fa22 f107 	lsr.w	r1, r2, r7
 8005af4:	409c      	lsls	r4, r3
 8005af6:	430c      	orrs	r4, r1
 8005af8:	42b5      	cmp	r5, r6
 8005afa:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005afe:	bf94      	ite	ls
 8005b00:	2400      	movls	r4, #0
 8005b02:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005b06:	409a      	lsls	r2, r3
 8005b08:	40fc      	lsrs	r4, r7
 8005b0a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005b0e:	4322      	orrs	r2, r4
 8005b10:	e7e1      	b.n	8005ad6 <__b2d+0x4a>
 8005b12:	ea44 0107 	orr.w	r1, r4, r7
 8005b16:	e7de      	b.n	8005ad6 <__b2d+0x4a>
 8005b18:	3ff00000 	.word	0x3ff00000

08005b1c <__d2b>:
 8005b1c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005b20:	2101      	movs	r1, #1
 8005b22:	4690      	mov	r8, r2
 8005b24:	4699      	mov	r9, r3
 8005b26:	9e08      	ldr	r6, [sp, #32]
 8005b28:	f7ff fc24 	bl	8005374 <_Balloc>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	b930      	cbnz	r0, 8005b3e <__d2b+0x22>
 8005b30:	4602      	mov	r2, r0
 8005b32:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b36:	4b23      	ldr	r3, [pc, #140]	@ (8005bc4 <__d2b+0xa8>)
 8005b38:	4823      	ldr	r0, [pc, #140]	@ (8005bc8 <__d2b+0xac>)
 8005b3a:	f001 fd01 	bl	8007540 <__assert_func>
 8005b3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b46:	b10d      	cbz	r5, 8005b4c <__d2b+0x30>
 8005b48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	f1b8 0300 	subs.w	r3, r8, #0
 8005b52:	d024      	beq.n	8005b9e <__d2b+0x82>
 8005b54:	4668      	mov	r0, sp
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	f7ff fd1d 	bl	8005596 <__lo0bits>
 8005b5c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b60:	b1d8      	cbz	r0, 8005b9a <__d2b+0x7e>
 8005b62:	f1c0 0320 	rsb	r3, r0, #32
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	40c2      	lsrs	r2, r0
 8005b6e:	6163      	str	r3, [r4, #20]
 8005b70:	9201      	str	r2, [sp, #4]
 8005b72:	9b01      	ldr	r3, [sp, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf0c      	ite	eq
 8005b78:	2201      	moveq	r2, #1
 8005b7a:	2202      	movne	r2, #2
 8005b7c:	61a3      	str	r3, [r4, #24]
 8005b7e:	6122      	str	r2, [r4, #16]
 8005b80:	b1ad      	cbz	r5, 8005bae <__d2b+0x92>
 8005b82:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b86:	4405      	add	r5, r0
 8005b88:	6035      	str	r5, [r6, #0]
 8005b8a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b90:	6018      	str	r0, [r3, #0]
 8005b92:	4620      	mov	r0, r4
 8005b94:	b002      	add	sp, #8
 8005b96:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005b9a:	6161      	str	r1, [r4, #20]
 8005b9c:	e7e9      	b.n	8005b72 <__d2b+0x56>
 8005b9e:	a801      	add	r0, sp, #4
 8005ba0:	f7ff fcf9 	bl	8005596 <__lo0bits>
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	6163      	str	r3, [r4, #20]
 8005baa:	3020      	adds	r0, #32
 8005bac:	e7e7      	b.n	8005b7e <__d2b+0x62>
 8005bae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005bb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bb6:	6030      	str	r0, [r6, #0]
 8005bb8:	6918      	ldr	r0, [r3, #16]
 8005bba:	f7ff fccd 	bl	8005558 <__hi0bits>
 8005bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005bc2:	e7e4      	b.n	8005b8e <__d2b+0x72>
 8005bc4:	080084bd 	.word	0x080084bd
 8005bc8:	080084ce 	.word	0x080084ce

08005bcc <__ratio>:
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	e9cd 1000 	strd	r1, r0, [sp]
 8005bd6:	a902      	add	r1, sp, #8
 8005bd8:	f7ff ff58 	bl	8005a8c <__b2d>
 8005bdc:	468b      	mov	fp, r1
 8005bde:	4606      	mov	r6, r0
 8005be0:	460f      	mov	r7, r1
 8005be2:	9800      	ldr	r0, [sp, #0]
 8005be4:	a903      	add	r1, sp, #12
 8005be6:	f7ff ff51 	bl	8005a8c <__b2d>
 8005bea:	460d      	mov	r5, r1
 8005bec:	9b01      	ldr	r3, [sp, #4]
 8005bee:	4689      	mov	r9, r1
 8005bf0:	6919      	ldr	r1, [r3, #16]
 8005bf2:	9b00      	ldr	r3, [sp, #0]
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	1ac9      	subs	r1, r1, r3
 8005bfc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bfcd      	iteet	gt
 8005c0a:	463a      	movgt	r2, r7
 8005c0c:	462a      	movle	r2, r5
 8005c0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005c12:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005c16:	bfd8      	it	le
 8005c18:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	4622      	mov	r2, r4
 8005c20:	4659      	mov	r1, fp
 8005c22:	f7fa fd83 	bl	800072c <__aeabi_ddiv>
 8005c26:	b005      	add	sp, #20
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c2c <__copybits>:
 8005c2c:	3901      	subs	r1, #1
 8005c2e:	b570      	push	{r4, r5, r6, lr}
 8005c30:	1149      	asrs	r1, r1, #5
 8005c32:	6914      	ldr	r4, [r2, #16]
 8005c34:	3101      	adds	r1, #1
 8005c36:	f102 0314 	add.w	r3, r2, #20
 8005c3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005c3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005c42:	1f05      	subs	r5, r0, #4
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d30c      	bcc.n	8005c62 <__copybits+0x36>
 8005c48:	1aa3      	subs	r3, r4, r2
 8005c4a:	3b11      	subs	r3, #17
 8005c4c:	f023 0303 	bic.w	r3, r3, #3
 8005c50:	3211      	adds	r2, #17
 8005c52:	42a2      	cmp	r2, r4
 8005c54:	bf88      	it	hi
 8005c56:	2300      	movhi	r3, #0
 8005c58:	4418      	add	r0, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4288      	cmp	r0, r1
 8005c5e:	d305      	bcc.n	8005c6c <__copybits+0x40>
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	f853 6b04 	ldr.w	r6, [r3], #4
 8005c66:	f845 6f04 	str.w	r6, [r5, #4]!
 8005c6a:	e7eb      	b.n	8005c44 <__copybits+0x18>
 8005c6c:	f840 3b04 	str.w	r3, [r0], #4
 8005c70:	e7f4      	b.n	8005c5c <__copybits+0x30>

08005c72 <__any_on>:
 8005c72:	f100 0214 	add.w	r2, r0, #20
 8005c76:	6900      	ldr	r0, [r0, #16]
 8005c78:	114b      	asrs	r3, r1, #5
 8005c7a:	4298      	cmp	r0, r3
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	db11      	blt.n	8005ca4 <__any_on+0x32>
 8005c80:	dd0a      	ble.n	8005c98 <__any_on+0x26>
 8005c82:	f011 011f 	ands.w	r1, r1, #31
 8005c86:	d007      	beq.n	8005c98 <__any_on+0x26>
 8005c88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005c8c:	fa24 f001 	lsr.w	r0, r4, r1
 8005c90:	fa00 f101 	lsl.w	r1, r0, r1
 8005c94:	428c      	cmp	r4, r1
 8005c96:	d10b      	bne.n	8005cb0 <__any_on+0x3e>
 8005c98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d803      	bhi.n	8005ca8 <__any_on+0x36>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	bd10      	pop	{r4, pc}
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	e7f7      	b.n	8005c98 <__any_on+0x26>
 8005ca8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d0f5      	beq.n	8005c9c <__any_on+0x2a>
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	e7f6      	b.n	8005ca2 <__any_on+0x30>

08005cb4 <sulp>:
 8005cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb8:	460f      	mov	r7, r1
 8005cba:	4690      	mov	r8, r2
 8005cbc:	f7ff fec6 	bl	8005a4c <__ulp>
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	f1b8 0f00 	cmp.w	r8, #0
 8005cc8:	d011      	beq.n	8005cee <sulp+0x3a>
 8005cca:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005cce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dd0b      	ble.n	8005cee <sulp+0x3a>
 8005cd6:	2400      	movs	r4, #0
 8005cd8:	051b      	lsls	r3, r3, #20
 8005cda:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005cde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	f7fa fbf7 	bl	80004d8 <__aeabi_dmul>
 8005cea:	4604      	mov	r4, r0
 8005cec:	460d      	mov	r5, r1
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005cf8 <_strtod_l>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	b09f      	sub	sp, #124	@ 0x7c
 8005cfe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005d00:	2200      	movs	r2, #0
 8005d02:	460c      	mov	r4, r1
 8005d04:	921a      	str	r2, [sp, #104]	@ 0x68
 8005d06:	f04f 0a00 	mov.w	sl, #0
 8005d0a:	f04f 0b00 	mov.w	fp, #0
 8005d0e:	460a      	mov	r2, r1
 8005d10:	9005      	str	r0, [sp, #20]
 8005d12:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d14:	7811      	ldrb	r1, [r2, #0]
 8005d16:	292b      	cmp	r1, #43	@ 0x2b
 8005d18:	d048      	beq.n	8005dac <_strtod_l+0xb4>
 8005d1a:	d836      	bhi.n	8005d8a <_strtod_l+0x92>
 8005d1c:	290d      	cmp	r1, #13
 8005d1e:	d830      	bhi.n	8005d82 <_strtod_l+0x8a>
 8005d20:	2908      	cmp	r1, #8
 8005d22:	d830      	bhi.n	8005d86 <_strtod_l+0x8e>
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d039      	beq.n	8005d9c <_strtod_l+0xa4>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005d2e:	782a      	ldrb	r2, [r5, #0]
 8005d30:	2a30      	cmp	r2, #48	@ 0x30
 8005d32:	f040 80b0 	bne.w	8005e96 <_strtod_l+0x19e>
 8005d36:	786a      	ldrb	r2, [r5, #1]
 8005d38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d3c:	2a58      	cmp	r2, #88	@ 0x58
 8005d3e:	d16c      	bne.n	8005e1a <_strtod_l+0x122>
 8005d40:	9302      	str	r3, [sp, #8]
 8005d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d44:	4a8f      	ldr	r2, [pc, #572]	@ (8005f84 <_strtod_l+0x28c>)
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	ab1a      	add	r3, sp, #104	@ 0x68
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	9805      	ldr	r0, [sp, #20]
 8005d4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005d50:	a919      	add	r1, sp, #100	@ 0x64
 8005d52:	f001 fc8f 	bl	8007674 <__gethex>
 8005d56:	f010 060f 	ands.w	r6, r0, #15
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	d005      	beq.n	8005d6a <_strtod_l+0x72>
 8005d5e:	2e06      	cmp	r6, #6
 8005d60:	d126      	bne.n	8005db0 <_strtod_l+0xb8>
 8005d62:	2300      	movs	r3, #0
 8005d64:	3501      	adds	r5, #1
 8005d66:	9519      	str	r5, [sp, #100]	@ 0x64
 8005d68:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8582 	bne.w	8006876 <_strtod_l+0xb7e>
 8005d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d74:	b1bb      	cbz	r3, 8005da6 <_strtod_l+0xae>
 8005d76:	4650      	mov	r0, sl
 8005d78:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005d7c:	b01f      	add	sp, #124	@ 0x7c
 8005d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d82:	2920      	cmp	r1, #32
 8005d84:	d1d0      	bne.n	8005d28 <_strtod_l+0x30>
 8005d86:	3201      	adds	r2, #1
 8005d88:	e7c3      	b.n	8005d12 <_strtod_l+0x1a>
 8005d8a:	292d      	cmp	r1, #45	@ 0x2d
 8005d8c:	d1cc      	bne.n	8005d28 <_strtod_l+0x30>
 8005d8e:	2101      	movs	r1, #1
 8005d90:	910e      	str	r1, [sp, #56]	@ 0x38
 8005d92:	1c51      	adds	r1, r2, #1
 8005d94:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d96:	7852      	ldrb	r2, [r2, #1]
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d1c7      	bne.n	8005d2c <_strtod_l+0x34>
 8005d9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d9e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 8566 	bne.w	8006872 <_strtod_l+0xb7a>
 8005da6:	4650      	mov	r0, sl
 8005da8:	4659      	mov	r1, fp
 8005daa:	e7e7      	b.n	8005d7c <_strtod_l+0x84>
 8005dac:	2100      	movs	r1, #0
 8005dae:	e7ef      	b.n	8005d90 <_strtod_l+0x98>
 8005db0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005db2:	b13a      	cbz	r2, 8005dc4 <_strtod_l+0xcc>
 8005db4:	2135      	movs	r1, #53	@ 0x35
 8005db6:	a81c      	add	r0, sp, #112	@ 0x70
 8005db8:	f7ff ff38 	bl	8005c2c <__copybits>
 8005dbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005dbe:	9805      	ldr	r0, [sp, #20]
 8005dc0:	f7ff fb18 	bl	80053f4 <_Bfree>
 8005dc4:	3e01      	subs	r6, #1
 8005dc6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005dc8:	2e04      	cmp	r6, #4
 8005dca:	d806      	bhi.n	8005dda <_strtod_l+0xe2>
 8005dcc:	e8df f006 	tbb	[pc, r6]
 8005dd0:	201d0314 	.word	0x201d0314
 8005dd4:	14          	.byte	0x14
 8005dd5:	00          	.byte	0x00
 8005dd6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005dda:	05e1      	lsls	r1, r4, #23
 8005ddc:	bf48      	it	mi
 8005dde:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005de2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005de6:	0d1b      	lsrs	r3, r3, #20
 8005de8:	051b      	lsls	r3, r3, #20
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1bd      	bne.n	8005d6a <_strtod_l+0x72>
 8005dee:	f7fe fb25 	bl	800443c <__errno>
 8005df2:	2322      	movs	r3, #34	@ 0x22
 8005df4:	6003      	str	r3, [r0, #0]
 8005df6:	e7b8      	b.n	8005d6a <_strtod_l+0x72>
 8005df8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005dfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005e00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e04:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e08:	e7e7      	b.n	8005dda <_strtod_l+0xe2>
 8005e0a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005f88 <_strtod_l+0x290>
 8005e0e:	e7e4      	b.n	8005dda <_strtod_l+0xe2>
 8005e10:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005e14:	f04f 3aff 	mov.w	sl, #4294967295
 8005e18:	e7df      	b.n	8005dda <_strtod_l+0xe2>
 8005e1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b30      	cmp	r3, #48	@ 0x30
 8005e24:	d0f9      	beq.n	8005e1a <_strtod_l+0x122>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d09f      	beq.n	8005d6a <_strtod_l+0x72>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	2700      	movs	r7, #0
 8005e2e:	220a      	movs	r2, #10
 8005e30:	46b9      	mov	r9, r7
 8005e32:	9308      	str	r3, [sp, #32]
 8005e34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e36:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005e38:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e3a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005e3c:	7805      	ldrb	r5, [r0, #0]
 8005e3e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005e42:	b2d9      	uxtb	r1, r3
 8005e44:	2909      	cmp	r1, #9
 8005e46:	d928      	bls.n	8005e9a <_strtod_l+0x1a2>
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4950      	ldr	r1, [pc, #320]	@ (8005f8c <_strtod_l+0x294>)
 8005e4c:	f7fe fa99 	bl	8004382 <strncmp>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d032      	beq.n	8005eba <_strtod_l+0x1c2>
 8005e54:	2000      	movs	r0, #0
 8005e56:	462a      	mov	r2, r5
 8005e58:	4603      	mov	r3, r0
 8005e5a:	464d      	mov	r5, r9
 8005e5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e5e:	2a65      	cmp	r2, #101	@ 0x65
 8005e60:	d001      	beq.n	8005e66 <_strtod_l+0x16e>
 8005e62:	2a45      	cmp	r2, #69	@ 0x45
 8005e64:	d114      	bne.n	8005e90 <_strtod_l+0x198>
 8005e66:	b91d      	cbnz	r5, 8005e70 <_strtod_l+0x178>
 8005e68:	9a08      	ldr	r2, [sp, #32]
 8005e6a:	4302      	orrs	r2, r0
 8005e6c:	d096      	beq.n	8005d9c <_strtod_l+0xa4>
 8005e6e:	2500      	movs	r5, #0
 8005e70:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005e72:	1c62      	adds	r2, r4, #1
 8005e74:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e76:	7862      	ldrb	r2, [r4, #1]
 8005e78:	2a2b      	cmp	r2, #43	@ 0x2b
 8005e7a:	d07a      	beq.n	8005f72 <_strtod_l+0x27a>
 8005e7c:	2a2d      	cmp	r2, #45	@ 0x2d
 8005e7e:	d07e      	beq.n	8005f7e <_strtod_l+0x286>
 8005e80:	f04f 0c00 	mov.w	ip, #0
 8005e84:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005e88:	2909      	cmp	r1, #9
 8005e8a:	f240 8085 	bls.w	8005f98 <_strtod_l+0x2a0>
 8005e8e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005e90:	f04f 0800 	mov.w	r8, #0
 8005e94:	e0a5      	b.n	8005fe2 <_strtod_l+0x2ea>
 8005e96:	2300      	movs	r3, #0
 8005e98:	e7c8      	b.n	8005e2c <_strtod_l+0x134>
 8005e9a:	f1b9 0f08 	cmp.w	r9, #8
 8005e9e:	bfd8      	it	le
 8005ea0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005ea2:	f100 0001 	add.w	r0, r0, #1
 8005ea6:	bfd6      	itet	le
 8005ea8:	fb02 3301 	mlale	r3, r2, r1, r3
 8005eac:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005eb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005eb2:	f109 0901 	add.w	r9, r9, #1
 8005eb6:	9019      	str	r0, [sp, #100]	@ 0x64
 8005eb8:	e7bf      	b.n	8005e3a <_strtod_l+0x142>
 8005eba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ec0:	785a      	ldrb	r2, [r3, #1]
 8005ec2:	f1b9 0f00 	cmp.w	r9, #0
 8005ec6:	d03b      	beq.n	8005f40 <_strtod_l+0x248>
 8005ec8:	464d      	mov	r5, r9
 8005eca:	900a      	str	r0, [sp, #40]	@ 0x28
 8005ecc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005ed0:	2b09      	cmp	r3, #9
 8005ed2:	d912      	bls.n	8005efa <_strtod_l+0x202>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e7c2      	b.n	8005e5e <_strtod_l+0x166>
 8005ed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005eda:	3001      	adds	r0, #1
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ee0:	785a      	ldrb	r2, [r3, #1]
 8005ee2:	2a30      	cmp	r2, #48	@ 0x30
 8005ee4:	d0f8      	beq.n	8005ed8 <_strtod_l+0x1e0>
 8005ee6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	f200 84c8 	bhi.w	8006880 <_strtod_l+0xb88>
 8005ef0:	900a      	str	r0, [sp, #40]	@ 0x28
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ef8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005efa:	3a30      	subs	r2, #48	@ 0x30
 8005efc:	f100 0301 	add.w	r3, r0, #1
 8005f00:	d018      	beq.n	8005f34 <_strtod_l+0x23c>
 8005f02:	462e      	mov	r6, r5
 8005f04:	f04f 0e0a 	mov.w	lr, #10
 8005f08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f0a:	4419      	add	r1, r3
 8005f0c:	910a      	str	r1, [sp, #40]	@ 0x28
 8005f0e:	1c71      	adds	r1, r6, #1
 8005f10:	eba1 0c05 	sub.w	ip, r1, r5
 8005f14:	4563      	cmp	r3, ip
 8005f16:	dc15      	bgt.n	8005f44 <_strtod_l+0x24c>
 8005f18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005f1c:	182b      	adds	r3, r5, r0
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	f105 0501 	add.w	r5, r5, #1
 8005f24:	4405      	add	r5, r0
 8005f26:	dc1a      	bgt.n	8005f5e <_strtod_l+0x266>
 8005f28:	230a      	movs	r3, #10
 8005f2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f2c:	fb03 2301 	mla	r3, r3, r1, r2
 8005f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f32:	2300      	movs	r3, #0
 8005f34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f36:	4618      	mov	r0, r3
 8005f38:	1c51      	adds	r1, r2, #1
 8005f3a:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f3c:	7852      	ldrb	r2, [r2, #1]
 8005f3e:	e7c5      	b.n	8005ecc <_strtod_l+0x1d4>
 8005f40:	4648      	mov	r0, r9
 8005f42:	e7ce      	b.n	8005ee2 <_strtod_l+0x1ea>
 8005f44:	2e08      	cmp	r6, #8
 8005f46:	dc05      	bgt.n	8005f54 <_strtod_l+0x25c>
 8005f48:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005f4a:	fb0e f606 	mul.w	r6, lr, r6
 8005f4e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005f50:	460e      	mov	r6, r1
 8005f52:	e7dc      	b.n	8005f0e <_strtod_l+0x216>
 8005f54:	2910      	cmp	r1, #16
 8005f56:	bfd8      	it	le
 8005f58:	fb0e f707 	mulle.w	r7, lr, r7
 8005f5c:	e7f8      	b.n	8005f50 <_strtod_l+0x258>
 8005f5e:	2b0f      	cmp	r3, #15
 8005f60:	bfdc      	itt	le
 8005f62:	230a      	movle	r3, #10
 8005f64:	fb03 2707 	mlale	r7, r3, r7, r2
 8005f68:	e7e3      	b.n	8005f32 <_strtod_l+0x23a>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e77a      	b.n	8005e68 <_strtod_l+0x170>
 8005f72:	f04f 0c00 	mov.w	ip, #0
 8005f76:	1ca2      	adds	r2, r4, #2
 8005f78:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f7a:	78a2      	ldrb	r2, [r4, #2]
 8005f7c:	e782      	b.n	8005e84 <_strtod_l+0x18c>
 8005f7e:	f04f 0c01 	mov.w	ip, #1
 8005f82:	e7f8      	b.n	8005f76 <_strtod_l+0x27e>
 8005f84:	0800870c 	.word	0x0800870c
 8005f88:	7ff00000 	.word	0x7ff00000
 8005f8c:	08008527 	.word	0x08008527
 8005f90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f92:	1c51      	adds	r1, r2, #1
 8005f94:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f96:	7852      	ldrb	r2, [r2, #1]
 8005f98:	2a30      	cmp	r2, #48	@ 0x30
 8005f9a:	d0f9      	beq.n	8005f90 <_strtod_l+0x298>
 8005f9c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005fa0:	2908      	cmp	r1, #8
 8005fa2:	f63f af75 	bhi.w	8005e90 <_strtod_l+0x198>
 8005fa6:	f04f 080a 	mov.w	r8, #10
 8005faa:	3a30      	subs	r2, #48	@ 0x30
 8005fac:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005fb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fb4:	1c56      	adds	r6, r2, #1
 8005fb6:	9619      	str	r6, [sp, #100]	@ 0x64
 8005fb8:	7852      	ldrb	r2, [r2, #1]
 8005fba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005fbe:	f1be 0f09 	cmp.w	lr, #9
 8005fc2:	d939      	bls.n	8006038 <_strtod_l+0x340>
 8005fc4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005fc6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005fca:	1a76      	subs	r6, r6, r1
 8005fcc:	2e08      	cmp	r6, #8
 8005fce:	dc03      	bgt.n	8005fd8 <_strtod_l+0x2e0>
 8005fd0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fd2:	4588      	cmp	r8, r1
 8005fd4:	bfa8      	it	ge
 8005fd6:	4688      	movge	r8, r1
 8005fd8:	f1bc 0f00 	cmp.w	ip, #0
 8005fdc:	d001      	beq.n	8005fe2 <_strtod_l+0x2ea>
 8005fde:	f1c8 0800 	rsb	r8, r8, #0
 8005fe2:	2d00      	cmp	r5, #0
 8005fe4:	d14e      	bne.n	8006084 <_strtod_l+0x38c>
 8005fe6:	9908      	ldr	r1, [sp, #32]
 8005fe8:	4308      	orrs	r0, r1
 8005fea:	f47f aebe 	bne.w	8005d6a <_strtod_l+0x72>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f47f aed4 	bne.w	8005d9c <_strtod_l+0xa4>
 8005ff4:	2a69      	cmp	r2, #105	@ 0x69
 8005ff6:	d028      	beq.n	800604a <_strtod_l+0x352>
 8005ff8:	dc25      	bgt.n	8006046 <_strtod_l+0x34e>
 8005ffa:	2a49      	cmp	r2, #73	@ 0x49
 8005ffc:	d025      	beq.n	800604a <_strtod_l+0x352>
 8005ffe:	2a4e      	cmp	r2, #78	@ 0x4e
 8006000:	f47f aecc 	bne.w	8005d9c <_strtod_l+0xa4>
 8006004:	4999      	ldr	r1, [pc, #612]	@ (800626c <_strtod_l+0x574>)
 8006006:	a819      	add	r0, sp, #100	@ 0x64
 8006008:	f001 fd56 	bl	8007ab8 <__match>
 800600c:	2800      	cmp	r0, #0
 800600e:	f43f aec5 	beq.w	8005d9c <_strtod_l+0xa4>
 8006012:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b28      	cmp	r3, #40	@ 0x28
 8006018:	d12e      	bne.n	8006078 <_strtod_l+0x380>
 800601a:	4995      	ldr	r1, [pc, #596]	@ (8006270 <_strtod_l+0x578>)
 800601c:	aa1c      	add	r2, sp, #112	@ 0x70
 800601e:	a819      	add	r0, sp, #100	@ 0x64
 8006020:	f001 fd5e 	bl	8007ae0 <__hexnan>
 8006024:	2805      	cmp	r0, #5
 8006026:	d127      	bne.n	8006078 <_strtod_l+0x380>
 8006028:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800602a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800602e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006032:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006036:	e698      	b.n	8005d6a <_strtod_l+0x72>
 8006038:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800603a:	fb08 2101 	mla	r1, r8, r1, r2
 800603e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006042:	9209      	str	r2, [sp, #36]	@ 0x24
 8006044:	e7b5      	b.n	8005fb2 <_strtod_l+0x2ba>
 8006046:	2a6e      	cmp	r2, #110	@ 0x6e
 8006048:	e7da      	b.n	8006000 <_strtod_l+0x308>
 800604a:	498a      	ldr	r1, [pc, #552]	@ (8006274 <_strtod_l+0x57c>)
 800604c:	a819      	add	r0, sp, #100	@ 0x64
 800604e:	f001 fd33 	bl	8007ab8 <__match>
 8006052:	2800      	cmp	r0, #0
 8006054:	f43f aea2 	beq.w	8005d9c <_strtod_l+0xa4>
 8006058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800605a:	4987      	ldr	r1, [pc, #540]	@ (8006278 <_strtod_l+0x580>)
 800605c:	3b01      	subs	r3, #1
 800605e:	a819      	add	r0, sp, #100	@ 0x64
 8006060:	9319      	str	r3, [sp, #100]	@ 0x64
 8006062:	f001 fd29 	bl	8007ab8 <__match>
 8006066:	b910      	cbnz	r0, 800606e <_strtod_l+0x376>
 8006068:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800606a:	3301      	adds	r3, #1
 800606c:	9319      	str	r3, [sp, #100]	@ 0x64
 800606e:	f04f 0a00 	mov.w	sl, #0
 8006072:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800627c <_strtod_l+0x584>
 8006076:	e678      	b.n	8005d6a <_strtod_l+0x72>
 8006078:	4881      	ldr	r0, [pc, #516]	@ (8006280 <_strtod_l+0x588>)
 800607a:	f001 fa5b 	bl	8007534 <nan>
 800607e:	4682      	mov	sl, r0
 8006080:	468b      	mov	fp, r1
 8006082:	e672      	b.n	8005d6a <_strtod_l+0x72>
 8006084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006086:	f1b9 0f00 	cmp.w	r9, #0
 800608a:	bf08      	it	eq
 800608c:	46a9      	moveq	r9, r5
 800608e:	eba8 0303 	sub.w	r3, r8, r3
 8006092:	2d10      	cmp	r5, #16
 8006094:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006096:	462c      	mov	r4, r5
 8006098:	9309      	str	r3, [sp, #36]	@ 0x24
 800609a:	bfa8      	it	ge
 800609c:	2410      	movge	r4, #16
 800609e:	f7fa f9a1 	bl	80003e4 <__aeabi_ui2d>
 80060a2:	2d09      	cmp	r5, #9
 80060a4:	4682      	mov	sl, r0
 80060a6:	468b      	mov	fp, r1
 80060a8:	dc11      	bgt.n	80060ce <_strtod_l+0x3d6>
 80060aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f43f ae5c 	beq.w	8005d6a <_strtod_l+0x72>
 80060b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b4:	dd76      	ble.n	80061a4 <_strtod_l+0x4ac>
 80060b6:	2b16      	cmp	r3, #22
 80060b8:	dc5d      	bgt.n	8006176 <_strtod_l+0x47e>
 80060ba:	4972      	ldr	r1, [pc, #456]	@ (8006284 <_strtod_l+0x58c>)
 80060bc:	4652      	mov	r2, sl
 80060be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060c2:	465b      	mov	r3, fp
 80060c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c8:	f7fa fa06 	bl	80004d8 <__aeabi_dmul>
 80060cc:	e7d7      	b.n	800607e <_strtod_l+0x386>
 80060ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006284 <_strtod_l+0x58c>)
 80060d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80060d8:	f7fa f9fe 	bl	80004d8 <__aeabi_dmul>
 80060dc:	4682      	mov	sl, r0
 80060de:	4638      	mov	r0, r7
 80060e0:	468b      	mov	fp, r1
 80060e2:	f7fa f97f 	bl	80003e4 <__aeabi_ui2d>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4650      	mov	r0, sl
 80060ec:	4659      	mov	r1, fp
 80060ee:	f7fa f83d 	bl	800016c <__adddf3>
 80060f2:	2d0f      	cmp	r5, #15
 80060f4:	4682      	mov	sl, r0
 80060f6:	468b      	mov	fp, r1
 80060f8:	ddd7      	ble.n	80060aa <_strtod_l+0x3b2>
 80060fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060fc:	1b2c      	subs	r4, r5, r4
 80060fe:	441c      	add	r4, r3
 8006100:	2c00      	cmp	r4, #0
 8006102:	f340 8093 	ble.w	800622c <_strtod_l+0x534>
 8006106:	f014 030f 	ands.w	r3, r4, #15
 800610a:	d00a      	beq.n	8006122 <_strtod_l+0x42a>
 800610c:	495d      	ldr	r1, [pc, #372]	@ (8006284 <_strtod_l+0x58c>)
 800610e:	4652      	mov	r2, sl
 8006110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006118:	465b      	mov	r3, fp
 800611a:	f7fa f9dd 	bl	80004d8 <__aeabi_dmul>
 800611e:	4682      	mov	sl, r0
 8006120:	468b      	mov	fp, r1
 8006122:	f034 040f 	bics.w	r4, r4, #15
 8006126:	d073      	beq.n	8006210 <_strtod_l+0x518>
 8006128:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800612c:	dd49      	ble.n	80061c2 <_strtod_l+0x4ca>
 800612e:	2400      	movs	r4, #0
 8006130:	46a0      	mov	r8, r4
 8006132:	46a1      	mov	r9, r4
 8006134:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006136:	2322      	movs	r3, #34	@ 0x22
 8006138:	f04f 0a00 	mov.w	sl, #0
 800613c:	9a05      	ldr	r2, [sp, #20]
 800613e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800627c <_strtod_l+0x584>
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006146:	2b00      	cmp	r3, #0
 8006148:	f43f ae0f 	beq.w	8005d6a <_strtod_l+0x72>
 800614c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800614e:	9805      	ldr	r0, [sp, #20]
 8006150:	f7ff f950 	bl	80053f4 <_Bfree>
 8006154:	4649      	mov	r1, r9
 8006156:	9805      	ldr	r0, [sp, #20]
 8006158:	f7ff f94c 	bl	80053f4 <_Bfree>
 800615c:	4641      	mov	r1, r8
 800615e:	9805      	ldr	r0, [sp, #20]
 8006160:	f7ff f948 	bl	80053f4 <_Bfree>
 8006164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006166:	9805      	ldr	r0, [sp, #20]
 8006168:	f7ff f944 	bl	80053f4 <_Bfree>
 800616c:	4621      	mov	r1, r4
 800616e:	9805      	ldr	r0, [sp, #20]
 8006170:	f7ff f940 	bl	80053f4 <_Bfree>
 8006174:	e5f9      	b.n	8005d6a <_strtod_l+0x72>
 8006176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006178:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800617c:	4293      	cmp	r3, r2
 800617e:	dbbc      	blt.n	80060fa <_strtod_l+0x402>
 8006180:	4c40      	ldr	r4, [pc, #256]	@ (8006284 <_strtod_l+0x58c>)
 8006182:	f1c5 050f 	rsb	r5, r5, #15
 8006186:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800618a:	4652      	mov	r2, sl
 800618c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006190:	465b      	mov	r3, fp
 8006192:	f7fa f9a1 	bl	80004d8 <__aeabi_dmul>
 8006196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006198:	1b5d      	subs	r5, r3, r5
 800619a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800619e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80061a2:	e791      	b.n	80060c8 <_strtod_l+0x3d0>
 80061a4:	3316      	adds	r3, #22
 80061a6:	dba8      	blt.n	80060fa <_strtod_l+0x402>
 80061a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061aa:	4650      	mov	r0, sl
 80061ac:	eba3 0808 	sub.w	r8, r3, r8
 80061b0:	4b34      	ldr	r3, [pc, #208]	@ (8006284 <_strtod_l+0x58c>)
 80061b2:	4659      	mov	r1, fp
 80061b4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80061b8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80061bc:	f7fa fab6 	bl	800072c <__aeabi_ddiv>
 80061c0:	e75d      	b.n	800607e <_strtod_l+0x386>
 80061c2:	2300      	movs	r3, #0
 80061c4:	4650      	mov	r0, sl
 80061c6:	4659      	mov	r1, fp
 80061c8:	461e      	mov	r6, r3
 80061ca:	4f2f      	ldr	r7, [pc, #188]	@ (8006288 <_strtod_l+0x590>)
 80061cc:	1124      	asrs	r4, r4, #4
 80061ce:	2c01      	cmp	r4, #1
 80061d0:	dc21      	bgt.n	8006216 <_strtod_l+0x51e>
 80061d2:	b10b      	cbz	r3, 80061d8 <_strtod_l+0x4e0>
 80061d4:	4682      	mov	sl, r0
 80061d6:	468b      	mov	fp, r1
 80061d8:	492b      	ldr	r1, [pc, #172]	@ (8006288 <_strtod_l+0x590>)
 80061da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80061de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80061e2:	4652      	mov	r2, sl
 80061e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e8:	465b      	mov	r3, fp
 80061ea:	f7fa f975 	bl	80004d8 <__aeabi_dmul>
 80061ee:	4b23      	ldr	r3, [pc, #140]	@ (800627c <_strtod_l+0x584>)
 80061f0:	460a      	mov	r2, r1
 80061f2:	400b      	ands	r3, r1
 80061f4:	4925      	ldr	r1, [pc, #148]	@ (800628c <_strtod_l+0x594>)
 80061f6:	4682      	mov	sl, r0
 80061f8:	428b      	cmp	r3, r1
 80061fa:	d898      	bhi.n	800612e <_strtod_l+0x436>
 80061fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006200:	428b      	cmp	r3, r1
 8006202:	bf86      	itte	hi
 8006204:	f04f 3aff 	movhi.w	sl, #4294967295
 8006208:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006290 <_strtod_l+0x598>
 800620c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006210:	2300      	movs	r3, #0
 8006212:	9308      	str	r3, [sp, #32]
 8006214:	e076      	b.n	8006304 <_strtod_l+0x60c>
 8006216:	07e2      	lsls	r2, r4, #31
 8006218:	d504      	bpl.n	8006224 <_strtod_l+0x52c>
 800621a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621e:	f7fa f95b 	bl	80004d8 <__aeabi_dmul>
 8006222:	2301      	movs	r3, #1
 8006224:	3601      	adds	r6, #1
 8006226:	1064      	asrs	r4, r4, #1
 8006228:	3708      	adds	r7, #8
 800622a:	e7d0      	b.n	80061ce <_strtod_l+0x4d6>
 800622c:	d0f0      	beq.n	8006210 <_strtod_l+0x518>
 800622e:	4264      	negs	r4, r4
 8006230:	f014 020f 	ands.w	r2, r4, #15
 8006234:	d00a      	beq.n	800624c <_strtod_l+0x554>
 8006236:	4b13      	ldr	r3, [pc, #76]	@ (8006284 <_strtod_l+0x58c>)
 8006238:	4650      	mov	r0, sl
 800623a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800623e:	4659      	mov	r1, fp
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7fa fa72 	bl	800072c <__aeabi_ddiv>
 8006248:	4682      	mov	sl, r0
 800624a:	468b      	mov	fp, r1
 800624c:	1124      	asrs	r4, r4, #4
 800624e:	d0df      	beq.n	8006210 <_strtod_l+0x518>
 8006250:	2c1f      	cmp	r4, #31
 8006252:	dd1f      	ble.n	8006294 <_strtod_l+0x59c>
 8006254:	2400      	movs	r4, #0
 8006256:	46a0      	mov	r8, r4
 8006258:	46a1      	mov	r9, r4
 800625a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800625c:	2322      	movs	r3, #34	@ 0x22
 800625e:	9a05      	ldr	r2, [sp, #20]
 8006260:	f04f 0a00 	mov.w	sl, #0
 8006264:	f04f 0b00 	mov.w	fp, #0
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e76b      	b.n	8006144 <_strtod_l+0x44c>
 800626c:	08008417 	.word	0x08008417
 8006270:	080086f8 	.word	0x080086f8
 8006274:	0800840f 	.word	0x0800840f
 8006278:	08008444 	.word	0x08008444
 800627c:	7ff00000 	.word	0x7ff00000
 8006280:	08008598 	.word	0x08008598
 8006284:	08008630 	.word	0x08008630
 8006288:	08008608 	.word	0x08008608
 800628c:	7ca00000 	.word	0x7ca00000
 8006290:	7fefffff 	.word	0x7fefffff
 8006294:	f014 0310 	ands.w	r3, r4, #16
 8006298:	bf18      	it	ne
 800629a:	236a      	movne	r3, #106	@ 0x6a
 800629c:	4650      	mov	r0, sl
 800629e:	9308      	str	r3, [sp, #32]
 80062a0:	4659      	mov	r1, fp
 80062a2:	2300      	movs	r3, #0
 80062a4:	4e77      	ldr	r6, [pc, #476]	@ (8006484 <_strtod_l+0x78c>)
 80062a6:	07e7      	lsls	r7, r4, #31
 80062a8:	d504      	bpl.n	80062b4 <_strtod_l+0x5bc>
 80062aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062ae:	f7fa f913 	bl	80004d8 <__aeabi_dmul>
 80062b2:	2301      	movs	r3, #1
 80062b4:	1064      	asrs	r4, r4, #1
 80062b6:	f106 0608 	add.w	r6, r6, #8
 80062ba:	d1f4      	bne.n	80062a6 <_strtod_l+0x5ae>
 80062bc:	b10b      	cbz	r3, 80062c2 <_strtod_l+0x5ca>
 80062be:	4682      	mov	sl, r0
 80062c0:	468b      	mov	fp, r1
 80062c2:	9b08      	ldr	r3, [sp, #32]
 80062c4:	b1b3      	cbz	r3, 80062f4 <_strtod_l+0x5fc>
 80062c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80062ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	4659      	mov	r1, fp
 80062d2:	dd0f      	ble.n	80062f4 <_strtod_l+0x5fc>
 80062d4:	2b1f      	cmp	r3, #31
 80062d6:	dd58      	ble.n	800638a <_strtod_l+0x692>
 80062d8:	2b34      	cmp	r3, #52	@ 0x34
 80062da:	bfd8      	it	le
 80062dc:	f04f 33ff 	movle.w	r3, #4294967295
 80062e0:	f04f 0a00 	mov.w	sl, #0
 80062e4:	bfcf      	iteee	gt
 80062e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80062ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80062ee:	4093      	lslle	r3, r2
 80062f0:	ea03 0b01 	andle.w	fp, r3, r1
 80062f4:	2200      	movs	r2, #0
 80062f6:	2300      	movs	r3, #0
 80062f8:	4650      	mov	r0, sl
 80062fa:	4659      	mov	r1, fp
 80062fc:	f7fa fb54 	bl	80009a8 <__aeabi_dcmpeq>
 8006300:	2800      	cmp	r0, #0
 8006302:	d1a7      	bne.n	8006254 <_strtod_l+0x55c>
 8006304:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006306:	464a      	mov	r2, r9
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800630c:	462b      	mov	r3, r5
 800630e:	9805      	ldr	r0, [sp, #20]
 8006310:	f7ff f8d8 	bl	80054c4 <__s2b>
 8006314:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006316:	2800      	cmp	r0, #0
 8006318:	f43f af09 	beq.w	800612e <_strtod_l+0x436>
 800631c:	2400      	movs	r4, #0
 800631e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006322:	2a00      	cmp	r2, #0
 8006324:	eba3 0308 	sub.w	r3, r3, r8
 8006328:	bfa8      	it	ge
 800632a:	2300      	movge	r3, #0
 800632c:	46a0      	mov	r8, r4
 800632e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006330:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006334:	9316      	str	r3, [sp, #88]	@ 0x58
 8006336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006338:	9805      	ldr	r0, [sp, #20]
 800633a:	6859      	ldr	r1, [r3, #4]
 800633c:	f7ff f81a 	bl	8005374 <_Balloc>
 8006340:	4681      	mov	r9, r0
 8006342:	2800      	cmp	r0, #0
 8006344:	f43f aef7 	beq.w	8006136 <_strtod_l+0x43e>
 8006348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800634a:	300c      	adds	r0, #12
 800634c:	691a      	ldr	r2, [r3, #16]
 800634e:	f103 010c 	add.w	r1, r3, #12
 8006352:	3202      	adds	r2, #2
 8006354:	0092      	lsls	r2, r2, #2
 8006356:	f001 f8df 	bl	8007518 <memcpy>
 800635a:	ab1c      	add	r3, sp, #112	@ 0x70
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	4652      	mov	r2, sl
 8006364:	465b      	mov	r3, fp
 8006366:	9805      	ldr	r0, [sp, #20]
 8006368:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800636c:	f7ff fbd6 	bl	8005b1c <__d2b>
 8006370:	901a      	str	r0, [sp, #104]	@ 0x68
 8006372:	2800      	cmp	r0, #0
 8006374:	f43f aedf 	beq.w	8006136 <_strtod_l+0x43e>
 8006378:	2101      	movs	r1, #1
 800637a:	9805      	ldr	r0, [sp, #20]
 800637c:	f7ff f938 	bl	80055f0 <__i2b>
 8006380:	4680      	mov	r8, r0
 8006382:	b948      	cbnz	r0, 8006398 <_strtod_l+0x6a0>
 8006384:	f04f 0800 	mov.w	r8, #0
 8006388:	e6d5      	b.n	8006136 <_strtod_l+0x43e>
 800638a:	f04f 32ff 	mov.w	r2, #4294967295
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	ea03 0a0a 	and.w	sl, r3, sl
 8006396:	e7ad      	b.n	80062f4 <_strtod_l+0x5fc>
 8006398:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800639a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800639c:	2d00      	cmp	r5, #0
 800639e:	bfab      	itete	ge
 80063a0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80063a2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80063a4:	18ef      	addge	r7, r5, r3
 80063a6:	1b5e      	sublt	r6, r3, r5
 80063a8:	9b08      	ldr	r3, [sp, #32]
 80063aa:	bfa8      	it	ge
 80063ac:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80063ae:	eba5 0503 	sub.w	r5, r5, r3
 80063b2:	4415      	add	r5, r2
 80063b4:	4b34      	ldr	r3, [pc, #208]	@ (8006488 <_strtod_l+0x790>)
 80063b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80063ba:	bfb8      	it	lt
 80063bc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80063be:	429d      	cmp	r5, r3
 80063c0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80063c4:	da50      	bge.n	8006468 <_strtod_l+0x770>
 80063c6:	1b5b      	subs	r3, r3, r5
 80063c8:	2b1f      	cmp	r3, #31
 80063ca:	f04f 0101 	mov.w	r1, #1
 80063ce:	eba2 0203 	sub.w	r2, r2, r3
 80063d2:	dc3d      	bgt.n	8006450 <_strtod_l+0x758>
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063da:	2300      	movs	r3, #0
 80063dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80063de:	18bd      	adds	r5, r7, r2
 80063e0:	9b08      	ldr	r3, [sp, #32]
 80063e2:	42af      	cmp	r7, r5
 80063e4:	4416      	add	r6, r2
 80063e6:	441e      	add	r6, r3
 80063e8:	463b      	mov	r3, r7
 80063ea:	bfa8      	it	ge
 80063ec:	462b      	movge	r3, r5
 80063ee:	42b3      	cmp	r3, r6
 80063f0:	bfa8      	it	ge
 80063f2:	4633      	movge	r3, r6
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfc2      	ittt	gt
 80063f8:	1aed      	subgt	r5, r5, r3
 80063fa:	1af6      	subgt	r6, r6, r3
 80063fc:	1aff      	subgt	r7, r7, r3
 80063fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006400:	2b00      	cmp	r3, #0
 8006402:	dd16      	ble.n	8006432 <_strtod_l+0x73a>
 8006404:	4641      	mov	r1, r8
 8006406:	461a      	mov	r2, r3
 8006408:	9805      	ldr	r0, [sp, #20]
 800640a:	f7ff f9a9 	bl	8005760 <__pow5mult>
 800640e:	4680      	mov	r8, r0
 8006410:	2800      	cmp	r0, #0
 8006412:	d0b7      	beq.n	8006384 <_strtod_l+0x68c>
 8006414:	4601      	mov	r1, r0
 8006416:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006418:	9805      	ldr	r0, [sp, #20]
 800641a:	f7ff f8ff 	bl	800561c <__multiply>
 800641e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006420:	2800      	cmp	r0, #0
 8006422:	f43f ae88 	beq.w	8006136 <_strtod_l+0x43e>
 8006426:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006428:	9805      	ldr	r0, [sp, #20]
 800642a:	f7fe ffe3 	bl	80053f4 <_Bfree>
 800642e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006430:	931a      	str	r3, [sp, #104]	@ 0x68
 8006432:	2d00      	cmp	r5, #0
 8006434:	dc1d      	bgt.n	8006472 <_strtod_l+0x77a>
 8006436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006438:	2b00      	cmp	r3, #0
 800643a:	dd27      	ble.n	800648c <_strtod_l+0x794>
 800643c:	4649      	mov	r1, r9
 800643e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006440:	9805      	ldr	r0, [sp, #20]
 8006442:	f7ff f98d 	bl	8005760 <__pow5mult>
 8006446:	4681      	mov	r9, r0
 8006448:	bb00      	cbnz	r0, 800648c <_strtod_l+0x794>
 800644a:	f04f 0900 	mov.w	r9, #0
 800644e:	e672      	b.n	8006136 <_strtod_l+0x43e>
 8006450:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006454:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006458:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800645c:	35e2      	adds	r5, #226	@ 0xe2
 800645e:	fa01 f305 	lsl.w	r3, r1, r5
 8006462:	9310      	str	r3, [sp, #64]	@ 0x40
 8006464:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006466:	e7ba      	b.n	80063de <_strtod_l+0x6e6>
 8006468:	2300      	movs	r3, #0
 800646a:	9310      	str	r3, [sp, #64]	@ 0x40
 800646c:	2301      	movs	r3, #1
 800646e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006470:	e7b5      	b.n	80063de <_strtod_l+0x6e6>
 8006472:	462a      	mov	r2, r5
 8006474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006476:	9805      	ldr	r0, [sp, #20]
 8006478:	f7ff f9cc 	bl	8005814 <__lshift>
 800647c:	901a      	str	r0, [sp, #104]	@ 0x68
 800647e:	2800      	cmp	r0, #0
 8006480:	d1d9      	bne.n	8006436 <_strtod_l+0x73e>
 8006482:	e658      	b.n	8006136 <_strtod_l+0x43e>
 8006484:	08008720 	.word	0x08008720
 8006488:	fffffc02 	.word	0xfffffc02
 800648c:	2e00      	cmp	r6, #0
 800648e:	dd07      	ble.n	80064a0 <_strtod_l+0x7a8>
 8006490:	4649      	mov	r1, r9
 8006492:	4632      	mov	r2, r6
 8006494:	9805      	ldr	r0, [sp, #20]
 8006496:	f7ff f9bd 	bl	8005814 <__lshift>
 800649a:	4681      	mov	r9, r0
 800649c:	2800      	cmp	r0, #0
 800649e:	d0d4      	beq.n	800644a <_strtod_l+0x752>
 80064a0:	2f00      	cmp	r7, #0
 80064a2:	dd08      	ble.n	80064b6 <_strtod_l+0x7be>
 80064a4:	4641      	mov	r1, r8
 80064a6:	463a      	mov	r2, r7
 80064a8:	9805      	ldr	r0, [sp, #20]
 80064aa:	f7ff f9b3 	bl	8005814 <__lshift>
 80064ae:	4680      	mov	r8, r0
 80064b0:	2800      	cmp	r0, #0
 80064b2:	f43f ae40 	beq.w	8006136 <_strtod_l+0x43e>
 80064b6:	464a      	mov	r2, r9
 80064b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064ba:	9805      	ldr	r0, [sp, #20]
 80064bc:	f7ff fa32 	bl	8005924 <__mdiff>
 80064c0:	4604      	mov	r4, r0
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f43f ae37 	beq.w	8006136 <_strtod_l+0x43e>
 80064c8:	68c3      	ldr	r3, [r0, #12]
 80064ca:	4641      	mov	r1, r8
 80064cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80064ce:	2300      	movs	r3, #0
 80064d0:	60c3      	str	r3, [r0, #12]
 80064d2:	f7ff fa0b 	bl	80058ec <__mcmp>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	da3d      	bge.n	8006556 <_strtod_l+0x85e>
 80064da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064dc:	ea53 030a 	orrs.w	r3, r3, sl
 80064e0:	d163      	bne.n	80065aa <_strtod_l+0x8b2>
 80064e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d15f      	bne.n	80065aa <_strtod_l+0x8b2>
 80064ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80064ee:	0d1b      	lsrs	r3, r3, #20
 80064f0:	051b      	lsls	r3, r3, #20
 80064f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80064f6:	d958      	bls.n	80065aa <_strtod_l+0x8b2>
 80064f8:	6963      	ldr	r3, [r4, #20]
 80064fa:	b913      	cbnz	r3, 8006502 <_strtod_l+0x80a>
 80064fc:	6923      	ldr	r3, [r4, #16]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	dd53      	ble.n	80065aa <_strtod_l+0x8b2>
 8006502:	4621      	mov	r1, r4
 8006504:	2201      	movs	r2, #1
 8006506:	9805      	ldr	r0, [sp, #20]
 8006508:	f7ff f984 	bl	8005814 <__lshift>
 800650c:	4641      	mov	r1, r8
 800650e:	4604      	mov	r4, r0
 8006510:	f7ff f9ec 	bl	80058ec <__mcmp>
 8006514:	2800      	cmp	r0, #0
 8006516:	dd48      	ble.n	80065aa <_strtod_l+0x8b2>
 8006518:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800651c:	9a08      	ldr	r2, [sp, #32]
 800651e:	0d1b      	lsrs	r3, r3, #20
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	2a00      	cmp	r2, #0
 8006524:	d062      	beq.n	80065ec <_strtod_l+0x8f4>
 8006526:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800652a:	d85f      	bhi.n	80065ec <_strtod_l+0x8f4>
 800652c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006530:	f67f ae94 	bls.w	800625c <_strtod_l+0x564>
 8006534:	4650      	mov	r0, sl
 8006536:	4659      	mov	r1, fp
 8006538:	4ba3      	ldr	r3, [pc, #652]	@ (80067c8 <_strtod_l+0xad0>)
 800653a:	2200      	movs	r2, #0
 800653c:	f7f9 ffcc 	bl	80004d8 <__aeabi_dmul>
 8006540:	4ba2      	ldr	r3, [pc, #648]	@ (80067cc <_strtod_l+0xad4>)
 8006542:	4682      	mov	sl, r0
 8006544:	400b      	ands	r3, r1
 8006546:	468b      	mov	fp, r1
 8006548:	2b00      	cmp	r3, #0
 800654a:	f47f adff 	bne.w	800614c <_strtod_l+0x454>
 800654e:	2322      	movs	r3, #34	@ 0x22
 8006550:	9a05      	ldr	r2, [sp, #20]
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	e5fa      	b.n	800614c <_strtod_l+0x454>
 8006556:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800655a:	d165      	bne.n	8006628 <_strtod_l+0x930>
 800655c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800655e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006562:	b35a      	cbz	r2, 80065bc <_strtod_l+0x8c4>
 8006564:	4a9a      	ldr	r2, [pc, #616]	@ (80067d0 <_strtod_l+0xad8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d12b      	bne.n	80065c2 <_strtod_l+0x8ca>
 800656a:	9b08      	ldr	r3, [sp, #32]
 800656c:	4651      	mov	r1, sl
 800656e:	b303      	cbz	r3, 80065b2 <_strtod_l+0x8ba>
 8006570:	465a      	mov	r2, fp
 8006572:	4b96      	ldr	r3, [pc, #600]	@ (80067cc <_strtod_l+0xad4>)
 8006574:	4013      	ands	r3, r2
 8006576:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800657a:	f04f 32ff 	mov.w	r2, #4294967295
 800657e:	d81b      	bhi.n	80065b8 <_strtod_l+0x8c0>
 8006580:	0d1b      	lsrs	r3, r3, #20
 8006582:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	4299      	cmp	r1, r3
 800658c:	d119      	bne.n	80065c2 <_strtod_l+0x8ca>
 800658e:	4b91      	ldr	r3, [pc, #580]	@ (80067d4 <_strtod_l+0xadc>)
 8006590:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006592:	429a      	cmp	r2, r3
 8006594:	d102      	bne.n	800659c <_strtod_l+0x8a4>
 8006596:	3101      	adds	r1, #1
 8006598:	f43f adcd 	beq.w	8006136 <_strtod_l+0x43e>
 800659c:	f04f 0a00 	mov.w	sl, #0
 80065a0:	4b8a      	ldr	r3, [pc, #552]	@ (80067cc <_strtod_l+0xad4>)
 80065a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065a4:	401a      	ands	r2, r3
 80065a6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80065aa:	9b08      	ldr	r3, [sp, #32]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1c1      	bne.n	8006534 <_strtod_l+0x83c>
 80065b0:	e5cc      	b.n	800614c <_strtod_l+0x454>
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	e7e8      	b.n	800658a <_strtod_l+0x892>
 80065b8:	4613      	mov	r3, r2
 80065ba:	e7e6      	b.n	800658a <_strtod_l+0x892>
 80065bc:	ea53 030a 	orrs.w	r3, r3, sl
 80065c0:	d0aa      	beq.n	8006518 <_strtod_l+0x820>
 80065c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065c4:	b1db      	cbz	r3, 80065fe <_strtod_l+0x906>
 80065c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065c8:	4213      	tst	r3, r2
 80065ca:	d0ee      	beq.n	80065aa <_strtod_l+0x8b2>
 80065cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065ce:	4650      	mov	r0, sl
 80065d0:	4659      	mov	r1, fp
 80065d2:	9a08      	ldr	r2, [sp, #32]
 80065d4:	b1bb      	cbz	r3, 8006606 <_strtod_l+0x90e>
 80065d6:	f7ff fb6d 	bl	8005cb4 <sulp>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065e2:	f7f9 fdc3 	bl	800016c <__adddf3>
 80065e6:	4682      	mov	sl, r0
 80065e8:	468b      	mov	fp, r1
 80065ea:	e7de      	b.n	80065aa <_strtod_l+0x8b2>
 80065ec:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80065f0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80065f4:	f04f 3aff 	mov.w	sl, #4294967295
 80065f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80065fc:	e7d5      	b.n	80065aa <_strtod_l+0x8b2>
 80065fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006600:	ea13 0f0a 	tst.w	r3, sl
 8006604:	e7e1      	b.n	80065ca <_strtod_l+0x8d2>
 8006606:	f7ff fb55 	bl	8005cb4 <sulp>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006612:	f7f9 fda9 	bl	8000168 <__aeabi_dsub>
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	4682      	mov	sl, r0
 800661c:	468b      	mov	fp, r1
 800661e:	f7fa f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 8006622:	2800      	cmp	r0, #0
 8006624:	d0c1      	beq.n	80065aa <_strtod_l+0x8b2>
 8006626:	e619      	b.n	800625c <_strtod_l+0x564>
 8006628:	4641      	mov	r1, r8
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff face 	bl	8005bcc <__ratio>
 8006630:	2200      	movs	r2, #0
 8006632:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006636:	4606      	mov	r6, r0
 8006638:	460f      	mov	r7, r1
 800663a:	f7fa f9c9 	bl	80009d0 <__aeabi_dcmple>
 800663e:	2800      	cmp	r0, #0
 8006640:	d06d      	beq.n	800671e <_strtod_l+0xa26>
 8006642:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d178      	bne.n	800673a <_strtod_l+0xa42>
 8006648:	f1ba 0f00 	cmp.w	sl, #0
 800664c:	d156      	bne.n	80066fc <_strtod_l+0xa04>
 800664e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006654:	2b00      	cmp	r3, #0
 8006656:	d158      	bne.n	800670a <_strtod_l+0xa12>
 8006658:	2200      	movs	r2, #0
 800665a:	4630      	mov	r0, r6
 800665c:	4639      	mov	r1, r7
 800665e:	4b5e      	ldr	r3, [pc, #376]	@ (80067d8 <_strtod_l+0xae0>)
 8006660:	f7fa f9ac 	bl	80009bc <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	d157      	bne.n	8006718 <_strtod_l+0xa20>
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	2200      	movs	r2, #0
 800666e:	4b5b      	ldr	r3, [pc, #364]	@ (80067dc <_strtod_l+0xae4>)
 8006670:	f7f9 ff32 	bl	80004d8 <__aeabi_dmul>
 8006674:	4606      	mov	r6, r0
 8006676:	460f      	mov	r7, r1
 8006678:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800667c:	9606      	str	r6, [sp, #24]
 800667e:	9307      	str	r3, [sp, #28]
 8006680:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006684:	4d51      	ldr	r5, [pc, #324]	@ (80067cc <_strtod_l+0xad4>)
 8006686:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800668a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800668c:	401d      	ands	r5, r3
 800668e:	4b54      	ldr	r3, [pc, #336]	@ (80067e0 <_strtod_l+0xae8>)
 8006690:	429d      	cmp	r5, r3
 8006692:	f040 80ab 	bne.w	80067ec <_strtod_l+0xaf4>
 8006696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006698:	4650      	mov	r0, sl
 800669a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800669e:	4659      	mov	r1, fp
 80066a0:	f7ff f9d4 	bl	8005a4c <__ulp>
 80066a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066a8:	f7f9 ff16 	bl	80004d8 <__aeabi_dmul>
 80066ac:	4652      	mov	r2, sl
 80066ae:	465b      	mov	r3, fp
 80066b0:	f7f9 fd5c 	bl	800016c <__adddf3>
 80066b4:	460b      	mov	r3, r1
 80066b6:	4945      	ldr	r1, [pc, #276]	@ (80067cc <_strtod_l+0xad4>)
 80066b8:	4a4a      	ldr	r2, [pc, #296]	@ (80067e4 <_strtod_l+0xaec>)
 80066ba:	4019      	ands	r1, r3
 80066bc:	4291      	cmp	r1, r2
 80066be:	4682      	mov	sl, r0
 80066c0:	d942      	bls.n	8006748 <_strtod_l+0xa50>
 80066c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80066c4:	4b43      	ldr	r3, [pc, #268]	@ (80067d4 <_strtod_l+0xadc>)
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d103      	bne.n	80066d2 <_strtod_l+0x9da>
 80066ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066cc:	3301      	adds	r3, #1
 80066ce:	f43f ad32 	beq.w	8006136 <_strtod_l+0x43e>
 80066d2:	f04f 3aff 	mov.w	sl, #4294967295
 80066d6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80067d4 <_strtod_l+0xadc>
 80066da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066dc:	9805      	ldr	r0, [sp, #20]
 80066de:	f7fe fe89 	bl	80053f4 <_Bfree>
 80066e2:	4649      	mov	r1, r9
 80066e4:	9805      	ldr	r0, [sp, #20]
 80066e6:	f7fe fe85 	bl	80053f4 <_Bfree>
 80066ea:	4641      	mov	r1, r8
 80066ec:	9805      	ldr	r0, [sp, #20]
 80066ee:	f7fe fe81 	bl	80053f4 <_Bfree>
 80066f2:	4621      	mov	r1, r4
 80066f4:	9805      	ldr	r0, [sp, #20]
 80066f6:	f7fe fe7d 	bl	80053f4 <_Bfree>
 80066fa:	e61c      	b.n	8006336 <_strtod_l+0x63e>
 80066fc:	f1ba 0f01 	cmp.w	sl, #1
 8006700:	d103      	bne.n	800670a <_strtod_l+0xa12>
 8006702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	f43f ada9 	beq.w	800625c <_strtod_l+0x564>
 800670a:	2200      	movs	r2, #0
 800670c:	4b36      	ldr	r3, [pc, #216]	@ (80067e8 <_strtod_l+0xaf0>)
 800670e:	2600      	movs	r6, #0
 8006710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006714:	4f30      	ldr	r7, [pc, #192]	@ (80067d8 <_strtod_l+0xae0>)
 8006716:	e7b3      	b.n	8006680 <_strtod_l+0x988>
 8006718:	2600      	movs	r6, #0
 800671a:	4f30      	ldr	r7, [pc, #192]	@ (80067dc <_strtod_l+0xae4>)
 800671c:	e7ac      	b.n	8006678 <_strtod_l+0x980>
 800671e:	4630      	mov	r0, r6
 8006720:	4639      	mov	r1, r7
 8006722:	4b2e      	ldr	r3, [pc, #184]	@ (80067dc <_strtod_l+0xae4>)
 8006724:	2200      	movs	r2, #0
 8006726:	f7f9 fed7 	bl	80004d8 <__aeabi_dmul>
 800672a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800672c:	4606      	mov	r6, r0
 800672e:	460f      	mov	r7, r1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0a1      	beq.n	8006678 <_strtod_l+0x980>
 8006734:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006738:	e7a2      	b.n	8006680 <_strtod_l+0x988>
 800673a:	2200      	movs	r2, #0
 800673c:	4b26      	ldr	r3, [pc, #152]	@ (80067d8 <_strtod_l+0xae0>)
 800673e:	4616      	mov	r6, r2
 8006740:	461f      	mov	r7, r3
 8006742:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006746:	e79b      	b.n	8006680 <_strtod_l+0x988>
 8006748:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800674c:	9b08      	ldr	r3, [sp, #32]
 800674e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1c1      	bne.n	80066da <_strtod_l+0x9e2>
 8006756:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800675a:	0d1b      	lsrs	r3, r3, #20
 800675c:	051b      	lsls	r3, r3, #20
 800675e:	429d      	cmp	r5, r3
 8006760:	d1bb      	bne.n	80066da <_strtod_l+0x9e2>
 8006762:	4630      	mov	r0, r6
 8006764:	4639      	mov	r1, r7
 8006766:	f7fa fc83 	bl	8001070 <__aeabi_d2lz>
 800676a:	f7f9 fe87 	bl	800047c <__aeabi_l2d>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4630      	mov	r0, r6
 8006774:	4639      	mov	r1, r7
 8006776:	f7f9 fcf7 	bl	8000168 <__aeabi_dsub>
 800677a:	460b      	mov	r3, r1
 800677c:	4602      	mov	r2, r0
 800677e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006782:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006788:	ea46 060a 	orr.w	r6, r6, sl
 800678c:	431e      	orrs	r6, r3
 800678e:	d06a      	beq.n	8006866 <_strtod_l+0xb6e>
 8006790:	a309      	add	r3, pc, #36	@ (adr r3, 80067b8 <_strtod_l+0xac0>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f7fa f911 	bl	80009bc <__aeabi_dcmplt>
 800679a:	2800      	cmp	r0, #0
 800679c:	f47f acd6 	bne.w	800614c <_strtod_l+0x454>
 80067a0:	a307      	add	r3, pc, #28	@ (adr r3, 80067c0 <_strtod_l+0xac8>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067aa:	f7fa f925 	bl	80009f8 <__aeabi_dcmpgt>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d093      	beq.n	80066da <_strtod_l+0x9e2>
 80067b2:	e4cb      	b.n	800614c <_strtod_l+0x454>
 80067b4:	f3af 8000 	nop.w
 80067b8:	94a03595 	.word	0x94a03595
 80067bc:	3fdfffff 	.word	0x3fdfffff
 80067c0:	35afe535 	.word	0x35afe535
 80067c4:	3fe00000 	.word	0x3fe00000
 80067c8:	39500000 	.word	0x39500000
 80067cc:	7ff00000 	.word	0x7ff00000
 80067d0:	000fffff 	.word	0x000fffff
 80067d4:	7fefffff 	.word	0x7fefffff
 80067d8:	3ff00000 	.word	0x3ff00000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	7fe00000 	.word	0x7fe00000
 80067e4:	7c9fffff 	.word	0x7c9fffff
 80067e8:	bff00000 	.word	0xbff00000
 80067ec:	9b08      	ldr	r3, [sp, #32]
 80067ee:	b323      	cbz	r3, 800683a <_strtod_l+0xb42>
 80067f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80067f4:	d821      	bhi.n	800683a <_strtod_l+0xb42>
 80067f6:	a328      	add	r3, pc, #160	@ (adr r3, 8006898 <_strtod_l+0xba0>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	4630      	mov	r0, r6
 80067fe:	4639      	mov	r1, r7
 8006800:	f7fa f8e6 	bl	80009d0 <__aeabi_dcmple>
 8006804:	b1a0      	cbz	r0, 8006830 <_strtod_l+0xb38>
 8006806:	4639      	mov	r1, r7
 8006808:	4630      	mov	r0, r6
 800680a:	f7fa f93d 	bl	8000a88 <__aeabi_d2uiz>
 800680e:	2801      	cmp	r0, #1
 8006810:	bf38      	it	cc
 8006812:	2001      	movcc	r0, #1
 8006814:	f7f9 fde6 	bl	80003e4 <__aeabi_ui2d>
 8006818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800681a:	4606      	mov	r6, r0
 800681c:	460f      	mov	r7, r1
 800681e:	b9fb      	cbnz	r3, 8006860 <_strtod_l+0xb68>
 8006820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006824:	9014      	str	r0, [sp, #80]	@ 0x50
 8006826:	9315      	str	r3, [sp, #84]	@ 0x54
 8006828:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800682c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006832:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006836:	1b5b      	subs	r3, r3, r5
 8006838:	9311      	str	r3, [sp, #68]	@ 0x44
 800683a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800683e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006842:	f7ff f903 	bl	8005a4c <__ulp>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4650      	mov	r0, sl
 800684c:	4659      	mov	r1, fp
 800684e:	f7f9 fe43 	bl	80004d8 <__aeabi_dmul>
 8006852:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006856:	f7f9 fc89 	bl	800016c <__adddf3>
 800685a:	4682      	mov	sl, r0
 800685c:	468b      	mov	fp, r1
 800685e:	e775      	b.n	800674c <_strtod_l+0xa54>
 8006860:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006864:	e7e0      	b.n	8006828 <_strtod_l+0xb30>
 8006866:	a30e      	add	r3, pc, #56	@ (adr r3, 80068a0 <_strtod_l+0xba8>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7fa f8a6 	bl	80009bc <__aeabi_dcmplt>
 8006870:	e79d      	b.n	80067ae <_strtod_l+0xab6>
 8006872:	2300      	movs	r3, #0
 8006874:	930e      	str	r3, [sp, #56]	@ 0x38
 8006876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006878:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	f7ff ba79 	b.w	8005d72 <_strtod_l+0x7a>
 8006880:	2a65      	cmp	r2, #101	@ 0x65
 8006882:	f43f ab72 	beq.w	8005f6a <_strtod_l+0x272>
 8006886:	2a45      	cmp	r2, #69	@ 0x45
 8006888:	f43f ab6f 	beq.w	8005f6a <_strtod_l+0x272>
 800688c:	2301      	movs	r3, #1
 800688e:	f7ff bbaa 	b.w	8005fe6 <_strtod_l+0x2ee>
 8006892:	bf00      	nop
 8006894:	f3af 8000 	nop.w
 8006898:	ffc00000 	.word	0xffc00000
 800689c:	41dfffff 	.word	0x41dfffff
 80068a0:	94a03595 	.word	0x94a03595
 80068a4:	3fcfffff 	.word	0x3fcfffff

080068a8 <_strtod_r>:
 80068a8:	4b01      	ldr	r3, [pc, #4]	@ (80068b0 <_strtod_r+0x8>)
 80068aa:	f7ff ba25 	b.w	8005cf8 <_strtod_l>
 80068ae:	bf00      	nop
 80068b0:	20000068 	.word	0x20000068

080068b4 <_strtol_l.isra.0>:
 80068b4:	2b24      	cmp	r3, #36	@ 0x24
 80068b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ba:	4686      	mov	lr, r0
 80068bc:	4690      	mov	r8, r2
 80068be:	d801      	bhi.n	80068c4 <_strtol_l.isra.0+0x10>
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d106      	bne.n	80068d2 <_strtol_l.isra.0+0x1e>
 80068c4:	f7fd fdba 	bl	800443c <__errno>
 80068c8:	2316      	movs	r3, #22
 80068ca:	6003      	str	r3, [r0, #0]
 80068cc:	2000      	movs	r0, #0
 80068ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d2:	460d      	mov	r5, r1
 80068d4:	4833      	ldr	r0, [pc, #204]	@ (80069a4 <_strtol_l.isra.0+0xf0>)
 80068d6:	462a      	mov	r2, r5
 80068d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068dc:	5d06      	ldrb	r6, [r0, r4]
 80068de:	f016 0608 	ands.w	r6, r6, #8
 80068e2:	d1f8      	bne.n	80068d6 <_strtol_l.isra.0+0x22>
 80068e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80068e6:	d110      	bne.n	800690a <_strtol_l.isra.0+0x56>
 80068e8:	2601      	movs	r6, #1
 80068ea:	782c      	ldrb	r4, [r5, #0]
 80068ec:	1c95      	adds	r5, r2, #2
 80068ee:	f033 0210 	bics.w	r2, r3, #16
 80068f2:	d115      	bne.n	8006920 <_strtol_l.isra.0+0x6c>
 80068f4:	2c30      	cmp	r4, #48	@ 0x30
 80068f6:	d10d      	bne.n	8006914 <_strtol_l.isra.0+0x60>
 80068f8:	782a      	ldrb	r2, [r5, #0]
 80068fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068fe:	2a58      	cmp	r2, #88	@ 0x58
 8006900:	d108      	bne.n	8006914 <_strtol_l.isra.0+0x60>
 8006902:	786c      	ldrb	r4, [r5, #1]
 8006904:	3502      	adds	r5, #2
 8006906:	2310      	movs	r3, #16
 8006908:	e00a      	b.n	8006920 <_strtol_l.isra.0+0x6c>
 800690a:	2c2b      	cmp	r4, #43	@ 0x2b
 800690c:	bf04      	itt	eq
 800690e:	782c      	ldrbeq	r4, [r5, #0]
 8006910:	1c95      	addeq	r5, r2, #2
 8006912:	e7ec      	b.n	80068ee <_strtol_l.isra.0+0x3a>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f6      	bne.n	8006906 <_strtol_l.isra.0+0x52>
 8006918:	2c30      	cmp	r4, #48	@ 0x30
 800691a:	bf14      	ite	ne
 800691c:	230a      	movne	r3, #10
 800691e:	2308      	moveq	r3, #8
 8006920:	2200      	movs	r2, #0
 8006922:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006926:	f10c 3cff 	add.w	ip, ip, #4294967295
 800692a:	fbbc f9f3 	udiv	r9, ip, r3
 800692e:	4610      	mov	r0, r2
 8006930:	fb03 ca19 	mls	sl, r3, r9, ip
 8006934:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006938:	2f09      	cmp	r7, #9
 800693a:	d80f      	bhi.n	800695c <_strtol_l.isra.0+0xa8>
 800693c:	463c      	mov	r4, r7
 800693e:	42a3      	cmp	r3, r4
 8006940:	dd1b      	ble.n	800697a <_strtol_l.isra.0+0xc6>
 8006942:	1c57      	adds	r7, r2, #1
 8006944:	d007      	beq.n	8006956 <_strtol_l.isra.0+0xa2>
 8006946:	4581      	cmp	r9, r0
 8006948:	d314      	bcc.n	8006974 <_strtol_l.isra.0+0xc0>
 800694a:	d101      	bne.n	8006950 <_strtol_l.isra.0+0x9c>
 800694c:	45a2      	cmp	sl, r4
 800694e:	db11      	blt.n	8006974 <_strtol_l.isra.0+0xc0>
 8006950:	2201      	movs	r2, #1
 8006952:	fb00 4003 	mla	r0, r0, r3, r4
 8006956:	f815 4b01 	ldrb.w	r4, [r5], #1
 800695a:	e7eb      	b.n	8006934 <_strtol_l.isra.0+0x80>
 800695c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006960:	2f19      	cmp	r7, #25
 8006962:	d801      	bhi.n	8006968 <_strtol_l.isra.0+0xb4>
 8006964:	3c37      	subs	r4, #55	@ 0x37
 8006966:	e7ea      	b.n	800693e <_strtol_l.isra.0+0x8a>
 8006968:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800696c:	2f19      	cmp	r7, #25
 800696e:	d804      	bhi.n	800697a <_strtol_l.isra.0+0xc6>
 8006970:	3c57      	subs	r4, #87	@ 0x57
 8006972:	e7e4      	b.n	800693e <_strtol_l.isra.0+0x8a>
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	e7ed      	b.n	8006956 <_strtol_l.isra.0+0xa2>
 800697a:	1c53      	adds	r3, r2, #1
 800697c:	d108      	bne.n	8006990 <_strtol_l.isra.0+0xdc>
 800697e:	2322      	movs	r3, #34	@ 0x22
 8006980:	4660      	mov	r0, ip
 8006982:	f8ce 3000 	str.w	r3, [lr]
 8006986:	f1b8 0f00 	cmp.w	r8, #0
 800698a:	d0a0      	beq.n	80068ce <_strtol_l.isra.0+0x1a>
 800698c:	1e69      	subs	r1, r5, #1
 800698e:	e006      	b.n	800699e <_strtol_l.isra.0+0xea>
 8006990:	b106      	cbz	r6, 8006994 <_strtol_l.isra.0+0xe0>
 8006992:	4240      	negs	r0, r0
 8006994:	f1b8 0f00 	cmp.w	r8, #0
 8006998:	d099      	beq.n	80068ce <_strtol_l.isra.0+0x1a>
 800699a:	2a00      	cmp	r2, #0
 800699c:	d1f6      	bne.n	800698c <_strtol_l.isra.0+0xd8>
 800699e:	f8c8 1000 	str.w	r1, [r8]
 80069a2:	e794      	b.n	80068ce <_strtol_l.isra.0+0x1a>
 80069a4:	08008749 	.word	0x08008749

080069a8 <_strtol_r>:
 80069a8:	f7ff bf84 	b.w	80068b4 <_strtol_l.isra.0>

080069ac <__ssputs_r>:
 80069ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	461f      	mov	r7, r3
 80069b2:	688e      	ldr	r6, [r1, #8]
 80069b4:	4682      	mov	sl, r0
 80069b6:	42be      	cmp	r6, r7
 80069b8:	460c      	mov	r4, r1
 80069ba:	4690      	mov	r8, r2
 80069bc:	680b      	ldr	r3, [r1, #0]
 80069be:	d82d      	bhi.n	8006a1c <__ssputs_r+0x70>
 80069c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80069c8:	d026      	beq.n	8006a18 <__ssputs_r+0x6c>
 80069ca:	6965      	ldr	r5, [r4, #20]
 80069cc:	6909      	ldr	r1, [r1, #16]
 80069ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069d2:	eba3 0901 	sub.w	r9, r3, r1
 80069d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069da:	1c7b      	adds	r3, r7, #1
 80069dc:	444b      	add	r3, r9
 80069de:	106d      	asrs	r5, r5, #1
 80069e0:	429d      	cmp	r5, r3
 80069e2:	bf38      	it	cc
 80069e4:	461d      	movcc	r5, r3
 80069e6:	0553      	lsls	r3, r2, #21
 80069e8:	d527      	bpl.n	8006a3a <__ssputs_r+0x8e>
 80069ea:	4629      	mov	r1, r5
 80069ec:	f7fe fc36 	bl	800525c <_malloc_r>
 80069f0:	4606      	mov	r6, r0
 80069f2:	b360      	cbz	r0, 8006a4e <__ssputs_r+0xa2>
 80069f4:	464a      	mov	r2, r9
 80069f6:	6921      	ldr	r1, [r4, #16]
 80069f8:	f000 fd8e 	bl	8007518 <memcpy>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	6126      	str	r6, [r4, #16]
 8006a0a:	444e      	add	r6, r9
 8006a0c:	6026      	str	r6, [r4, #0]
 8006a0e:	463e      	mov	r6, r7
 8006a10:	6165      	str	r5, [r4, #20]
 8006a12:	eba5 0509 	sub.w	r5, r5, r9
 8006a16:	60a5      	str	r5, [r4, #8]
 8006a18:	42be      	cmp	r6, r7
 8006a1a:	d900      	bls.n	8006a1e <__ssputs_r+0x72>
 8006a1c:	463e      	mov	r6, r7
 8006a1e:	4632      	mov	r2, r6
 8006a20:	4641      	mov	r1, r8
 8006a22:	6820      	ldr	r0, [r4, #0]
 8006a24:	f000 fd4d 	bl	80074c2 <memmove>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	1b9b      	subs	r3, r3, r6
 8006a2e:	60a3      	str	r3, [r4, #8]
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	4433      	add	r3, r6
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3a:	462a      	mov	r2, r5
 8006a3c:	f001 f8fd 	bl	8007c3a <_realloc_r>
 8006a40:	4606      	mov	r6, r0
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d1e0      	bne.n	8006a08 <__ssputs_r+0x5c>
 8006a46:	4650      	mov	r0, sl
 8006a48:	6921      	ldr	r1, [r4, #16]
 8006a4a:	f7fe fb95 	bl	8005178 <_free_r>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	f8ca 3000 	str.w	r3, [sl]
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	e7e9      	b.n	8006a36 <__ssputs_r+0x8a>
	...

08006a64 <_svfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	4698      	mov	r8, r3
 8006a6a:	898b      	ldrh	r3, [r1, #12]
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	061b      	lsls	r3, r3, #24
 8006a70:	460d      	mov	r5, r1
 8006a72:	4614      	mov	r4, r2
 8006a74:	b09d      	sub	sp, #116	@ 0x74
 8006a76:	d510      	bpl.n	8006a9a <_svfiprintf_r+0x36>
 8006a78:	690b      	ldr	r3, [r1, #16]
 8006a7a:	b973      	cbnz	r3, 8006a9a <_svfiprintf_r+0x36>
 8006a7c:	2140      	movs	r1, #64	@ 0x40
 8006a7e:	f7fe fbed 	bl	800525c <_malloc_r>
 8006a82:	6028      	str	r0, [r5, #0]
 8006a84:	6128      	str	r0, [r5, #16]
 8006a86:	b930      	cbnz	r0, 8006a96 <_svfiprintf_r+0x32>
 8006a88:	230c      	movs	r3, #12
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	b01d      	add	sp, #116	@ 0x74
 8006a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a96:	2340      	movs	r3, #64	@ 0x40
 8006a98:	616b      	str	r3, [r5, #20]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a9e:	2320      	movs	r3, #32
 8006aa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006aa4:	2330      	movs	r3, #48	@ 0x30
 8006aa6:	f04f 0901 	mov.w	r9, #1
 8006aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006c48 <_svfiprintf_r+0x1e4>
 8006ab2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	469a      	mov	sl, r3
 8006aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006abe:	b10a      	cbz	r2, 8006ac4 <_svfiprintf_r+0x60>
 8006ac0:	2a25      	cmp	r2, #37	@ 0x25
 8006ac2:	d1f9      	bne.n	8006ab8 <_svfiprintf_r+0x54>
 8006ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ac8:	d00b      	beq.n	8006ae2 <_svfiprintf_r+0x7e>
 8006aca:	465b      	mov	r3, fp
 8006acc:	4622      	mov	r2, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7ff ff6b 	bl	80069ac <__ssputs_r>
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f000 80a7 	beq.w	8006c2a <_svfiprintf_r+0x1c6>
 8006adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ade:	445a      	add	r2, fp
 8006ae0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 809f 	beq.w	8006c2a <_svfiprintf_r+0x1c6>
 8006aec:	2300      	movs	r3, #0
 8006aee:	f04f 32ff 	mov.w	r2, #4294967295
 8006af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006af6:	f10a 0a01 	add.w	sl, sl, #1
 8006afa:	9304      	str	r3, [sp, #16]
 8006afc:	9307      	str	r3, [sp, #28]
 8006afe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b02:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b04:	4654      	mov	r4, sl
 8006b06:	2205      	movs	r2, #5
 8006b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0c:	484e      	ldr	r0, [pc, #312]	@ (8006c48 <_svfiprintf_r+0x1e4>)
 8006b0e:	f7fd fcc2 	bl	8004496 <memchr>
 8006b12:	9a04      	ldr	r2, [sp, #16]
 8006b14:	b9d8      	cbnz	r0, 8006b4e <_svfiprintf_r+0xea>
 8006b16:	06d0      	lsls	r0, r2, #27
 8006b18:	bf44      	itt	mi
 8006b1a:	2320      	movmi	r3, #32
 8006b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b20:	0711      	lsls	r1, r2, #28
 8006b22:	bf44      	itt	mi
 8006b24:	232b      	movmi	r3, #43	@ 0x2b
 8006b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b30:	d015      	beq.n	8006b5e <_svfiprintf_r+0xfa>
 8006b32:	4654      	mov	r4, sl
 8006b34:	2000      	movs	r0, #0
 8006b36:	f04f 0c0a 	mov.w	ip, #10
 8006b3a:	9a07      	ldr	r2, [sp, #28]
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b42:	3b30      	subs	r3, #48	@ 0x30
 8006b44:	2b09      	cmp	r3, #9
 8006b46:	d94b      	bls.n	8006be0 <_svfiprintf_r+0x17c>
 8006b48:	b1b0      	cbz	r0, 8006b78 <_svfiprintf_r+0x114>
 8006b4a:	9207      	str	r2, [sp, #28]
 8006b4c:	e014      	b.n	8006b78 <_svfiprintf_r+0x114>
 8006b4e:	eba0 0308 	sub.w	r3, r0, r8
 8006b52:	fa09 f303 	lsl.w	r3, r9, r3
 8006b56:	4313      	orrs	r3, r2
 8006b58:	46a2      	mov	sl, r4
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	e7d2      	b.n	8006b04 <_svfiprintf_r+0xa0>
 8006b5e:	9b03      	ldr	r3, [sp, #12]
 8006b60:	1d19      	adds	r1, r3, #4
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	9103      	str	r1, [sp, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bfbb      	ittet	lt
 8006b6a:	425b      	neglt	r3, r3
 8006b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006b70:	9307      	strge	r3, [sp, #28]
 8006b72:	9307      	strlt	r3, [sp, #28]
 8006b74:	bfb8      	it	lt
 8006b76:	9204      	strlt	r2, [sp, #16]
 8006b78:	7823      	ldrb	r3, [r4, #0]
 8006b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b7c:	d10a      	bne.n	8006b94 <_svfiprintf_r+0x130>
 8006b7e:	7863      	ldrb	r3, [r4, #1]
 8006b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b82:	d132      	bne.n	8006bea <_svfiprintf_r+0x186>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	3402      	adds	r4, #2
 8006b88:	1d1a      	adds	r2, r3, #4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	9203      	str	r2, [sp, #12]
 8006b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b92:	9305      	str	r3, [sp, #20]
 8006b94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006c4c <_svfiprintf_r+0x1e8>
 8006b98:	2203      	movs	r2, #3
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	7821      	ldrb	r1, [r4, #0]
 8006b9e:	f7fd fc7a 	bl	8004496 <memchr>
 8006ba2:	b138      	cbz	r0, 8006bb4 <_svfiprintf_r+0x150>
 8006ba4:	2240      	movs	r2, #64	@ 0x40
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	eba0 000a 	sub.w	r0, r0, sl
 8006bac:	4082      	lsls	r2, r0
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	3401      	adds	r4, #1
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb8:	2206      	movs	r2, #6
 8006bba:	4825      	ldr	r0, [pc, #148]	@ (8006c50 <_svfiprintf_r+0x1ec>)
 8006bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bc0:	f7fd fc69 	bl	8004496 <memchr>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d036      	beq.n	8006c36 <_svfiprintf_r+0x1d2>
 8006bc8:	4b22      	ldr	r3, [pc, #136]	@ (8006c54 <_svfiprintf_r+0x1f0>)
 8006bca:	bb1b      	cbnz	r3, 8006c14 <_svfiprintf_r+0x1b0>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	3307      	adds	r3, #7
 8006bd0:	f023 0307 	bic.w	r3, r3, #7
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bda:	4433      	add	r3, r6
 8006bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bde:	e76a      	b.n	8006ab6 <_svfiprintf_r+0x52>
 8006be0:	460c      	mov	r4, r1
 8006be2:	2001      	movs	r0, #1
 8006be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006be8:	e7a8      	b.n	8006b3c <_svfiprintf_r+0xd8>
 8006bea:	2300      	movs	r3, #0
 8006bec:	f04f 0c0a 	mov.w	ip, #10
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	3401      	adds	r4, #1
 8006bf4:	9305      	str	r3, [sp, #20]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bfc:	3a30      	subs	r2, #48	@ 0x30
 8006bfe:	2a09      	cmp	r2, #9
 8006c00:	d903      	bls.n	8006c0a <_svfiprintf_r+0x1a6>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0c6      	beq.n	8006b94 <_svfiprintf_r+0x130>
 8006c06:	9105      	str	r1, [sp, #20]
 8006c08:	e7c4      	b.n	8006b94 <_svfiprintf_r+0x130>
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c12:	e7f0      	b.n	8006bf6 <_svfiprintf_r+0x192>
 8006c14:	ab03      	add	r3, sp, #12
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c58 <_svfiprintf_r+0x1f4>)
 8006c1e:	a904      	add	r1, sp, #16
 8006c20:	f7fc fc8c 	bl	800353c <_printf_float>
 8006c24:	1c42      	adds	r2, r0, #1
 8006c26:	4606      	mov	r6, r0
 8006c28:	d1d6      	bne.n	8006bd8 <_svfiprintf_r+0x174>
 8006c2a:	89ab      	ldrh	r3, [r5, #12]
 8006c2c:	065b      	lsls	r3, r3, #25
 8006c2e:	f53f af2d 	bmi.w	8006a8c <_svfiprintf_r+0x28>
 8006c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c34:	e72c      	b.n	8006a90 <_svfiprintf_r+0x2c>
 8006c36:	ab03      	add	r3, sp, #12
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <_svfiprintf_r+0x1f4>)
 8006c40:	a904      	add	r1, sp, #16
 8006c42:	f7fc ff19 	bl	8003a78 <_printf_i>
 8006c46:	e7ed      	b.n	8006c24 <_svfiprintf_r+0x1c0>
 8006c48:	08008529 	.word	0x08008529
 8006c4c:	0800852f 	.word	0x0800852f
 8006c50:	08008533 	.word	0x08008533
 8006c54:	0800353d 	.word	0x0800353d
 8006c58:	080069ad 	.word	0x080069ad

08006c5c <_sungetc_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	1c4b      	adds	r3, r1, #1
 8006c60:	4614      	mov	r4, r2
 8006c62:	d103      	bne.n	8006c6c <_sungetc_r+0x10>
 8006c64:	f04f 35ff 	mov.w	r5, #4294967295
 8006c68:	4628      	mov	r0, r5
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	8993      	ldrh	r3, [r2, #12]
 8006c6e:	b2cd      	uxtb	r5, r1
 8006c70:	f023 0320 	bic.w	r3, r3, #32
 8006c74:	8193      	strh	r3, [r2, #12]
 8006c76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c78:	6852      	ldr	r2, [r2, #4]
 8006c7a:	b18b      	cbz	r3, 8006ca0 <_sungetc_r+0x44>
 8006c7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	dd08      	ble.n	8006c94 <_sungetc_r+0x38>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	1e5a      	subs	r2, r3, #1
 8006c86:	6022      	str	r2, [r4, #0]
 8006c88:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	6063      	str	r3, [r4, #4]
 8006c92:	e7e9      	b.n	8006c68 <_sungetc_r+0xc>
 8006c94:	4621      	mov	r1, r4
 8006c96:	f000 fbdc 	bl	8007452 <__submore>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d0f1      	beq.n	8006c82 <_sungetc_r+0x26>
 8006c9e:	e7e1      	b.n	8006c64 <_sungetc_r+0x8>
 8006ca0:	6921      	ldr	r1, [r4, #16]
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	b151      	cbz	r1, 8006cbc <_sungetc_r+0x60>
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	d208      	bcs.n	8006cbc <_sungetc_r+0x60>
 8006caa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006cae:	42a9      	cmp	r1, r5
 8006cb0:	d104      	bne.n	8006cbc <_sungetc_r+0x60>
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	3201      	adds	r2, #1
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	6062      	str	r2, [r4, #4]
 8006cba:	e7d5      	b.n	8006c68 <_sungetc_r+0xc>
 8006cbc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8006cc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006cca:	4623      	mov	r3, r4
 8006ccc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7dc      	b.n	8006c90 <_sungetc_r+0x34>

08006cd6 <__ssrefill_r>:
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	460c      	mov	r4, r1
 8006cda:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006cdc:	b169      	cbz	r1, 8006cfa <__ssrefill_r+0x24>
 8006cde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ce2:	4299      	cmp	r1, r3
 8006ce4:	d001      	beq.n	8006cea <__ssrefill_r+0x14>
 8006ce6:	f7fe fa47 	bl	8005178 <_free_r>
 8006cea:	2000      	movs	r0, #0
 8006cec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cee:	6360      	str	r0, [r4, #52]	@ 0x34
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	b113      	cbz	r3, 8006cfa <__ssrefill_r+0x24>
 8006cf4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	2300      	movs	r3, #0
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	f043 0320 	orr.w	r3, r3, #32
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	e7f3      	b.n	8006cf8 <__ssrefill_r+0x22>

08006d10 <__ssvfiscanf_r>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	460c      	mov	r4, r1
 8006d16:	2100      	movs	r1, #0
 8006d18:	4606      	mov	r6, r0
 8006d1a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006d1e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006d22:	49ab      	ldr	r1, [pc, #684]	@ (8006fd0 <__ssvfiscanf_r+0x2c0>)
 8006d24:	f10d 0804 	add.w	r8, sp, #4
 8006d28:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006d2a:	49aa      	ldr	r1, [pc, #680]	@ (8006fd4 <__ssvfiscanf_r+0x2c4>)
 8006d2c:	4faa      	ldr	r7, [pc, #680]	@ (8006fd8 <__ssvfiscanf_r+0x2c8>)
 8006d2e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006d32:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	f892 9000 	ldrb.w	r9, [r2]
 8006d3a:	f1b9 0f00 	cmp.w	r9, #0
 8006d3e:	f000 8159 	beq.w	8006ff4 <__ssvfiscanf_r+0x2e4>
 8006d42:	f817 3009 	ldrb.w	r3, [r7, r9]
 8006d46:	1c55      	adds	r5, r2, #1
 8006d48:	f013 0308 	ands.w	r3, r3, #8
 8006d4c:	d019      	beq.n	8006d82 <__ssvfiscanf_r+0x72>
 8006d4e:	6863      	ldr	r3, [r4, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dd0f      	ble.n	8006d74 <__ssvfiscanf_r+0x64>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	5cba      	ldrb	r2, [r7, r2]
 8006d5a:	0712      	lsls	r2, r2, #28
 8006d5c:	d401      	bmi.n	8006d62 <__ssvfiscanf_r+0x52>
 8006d5e:	462a      	mov	r2, r5
 8006d60:	e7e9      	b.n	8006d36 <__ssvfiscanf_r+0x26>
 8006d62:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006d64:	3301      	adds	r3, #1
 8006d66:	3201      	adds	r2, #1
 8006d68:	9245      	str	r2, [sp, #276]	@ 0x114
 8006d6a:	6862      	ldr	r2, [r4, #4]
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	3a01      	subs	r2, #1
 8006d70:	6062      	str	r2, [r4, #4]
 8006d72:	e7ec      	b.n	8006d4e <__ssvfiscanf_r+0x3e>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4630      	mov	r0, r6
 8006d78:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006d7a:	4798      	blx	r3
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d0e9      	beq.n	8006d54 <__ssvfiscanf_r+0x44>
 8006d80:	e7ed      	b.n	8006d5e <__ssvfiscanf_r+0x4e>
 8006d82:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8006d86:	f040 8086 	bne.w	8006e96 <__ssvfiscanf_r+0x186>
 8006d8a:	9341      	str	r3, [sp, #260]	@ 0x104
 8006d8c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006d8e:	7853      	ldrb	r3, [r2, #1]
 8006d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d92:	bf04      	itt	eq
 8006d94:	2310      	moveq	r3, #16
 8006d96:	1c95      	addeq	r5, r2, #2
 8006d98:	f04f 020a 	mov.w	r2, #10
 8006d9c:	bf08      	it	eq
 8006d9e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006da0:	46aa      	mov	sl, r5
 8006da2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006da6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006daa:	2b09      	cmp	r3, #9
 8006dac:	d91e      	bls.n	8006dec <__ssvfiscanf_r+0xdc>
 8006dae:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8006fdc <__ssvfiscanf_r+0x2cc>
 8006db2:	2203      	movs	r2, #3
 8006db4:	4658      	mov	r0, fp
 8006db6:	f7fd fb6e 	bl	8004496 <memchr>
 8006dba:	b138      	cbz	r0, 8006dcc <__ssvfiscanf_r+0xbc>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4655      	mov	r5, sl
 8006dc0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006dc2:	eba0 000b 	sub.w	r0, r0, fp
 8006dc6:	4083      	lsls	r3, r0
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	9341      	str	r3, [sp, #260]	@ 0x104
 8006dcc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006dd0:	2b78      	cmp	r3, #120	@ 0x78
 8006dd2:	d806      	bhi.n	8006de2 <__ssvfiscanf_r+0xd2>
 8006dd4:	2b57      	cmp	r3, #87	@ 0x57
 8006dd6:	d810      	bhi.n	8006dfa <__ssvfiscanf_r+0xea>
 8006dd8:	2b25      	cmp	r3, #37	@ 0x25
 8006dda:	d05c      	beq.n	8006e96 <__ssvfiscanf_r+0x186>
 8006ddc:	d856      	bhi.n	8006e8c <__ssvfiscanf_r+0x17c>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d074      	beq.n	8006ecc <__ssvfiscanf_r+0x1bc>
 8006de2:	2303      	movs	r3, #3
 8006de4:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006de6:	230a      	movs	r3, #10
 8006de8:	9342      	str	r3, [sp, #264]	@ 0x108
 8006dea:	e087      	b.n	8006efc <__ssvfiscanf_r+0x1ec>
 8006dec:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006dee:	4655      	mov	r5, sl
 8006df0:	fb02 1103 	mla	r1, r2, r3, r1
 8006df4:	3930      	subs	r1, #48	@ 0x30
 8006df6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006df8:	e7d2      	b.n	8006da0 <__ssvfiscanf_r+0x90>
 8006dfa:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006dfe:	2a20      	cmp	r2, #32
 8006e00:	d8ef      	bhi.n	8006de2 <__ssvfiscanf_r+0xd2>
 8006e02:	a101      	add	r1, pc, #4	@ (adr r1, 8006e08 <__ssvfiscanf_r+0xf8>)
 8006e04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e08:	08006edb 	.word	0x08006edb
 8006e0c:	08006de3 	.word	0x08006de3
 8006e10:	08006de3 	.word	0x08006de3
 8006e14:	08006f35 	.word	0x08006f35
 8006e18:	08006de3 	.word	0x08006de3
 8006e1c:	08006de3 	.word	0x08006de3
 8006e20:	08006de3 	.word	0x08006de3
 8006e24:	08006de3 	.word	0x08006de3
 8006e28:	08006de3 	.word	0x08006de3
 8006e2c:	08006de3 	.word	0x08006de3
 8006e30:	08006de3 	.word	0x08006de3
 8006e34:	08006f4b 	.word	0x08006f4b
 8006e38:	08006f31 	.word	0x08006f31
 8006e3c:	08006e93 	.word	0x08006e93
 8006e40:	08006e93 	.word	0x08006e93
 8006e44:	08006e93 	.word	0x08006e93
 8006e48:	08006de3 	.word	0x08006de3
 8006e4c:	08006eed 	.word	0x08006eed
 8006e50:	08006de3 	.word	0x08006de3
 8006e54:	08006de3 	.word	0x08006de3
 8006e58:	08006de3 	.word	0x08006de3
 8006e5c:	08006de3 	.word	0x08006de3
 8006e60:	08006f5b 	.word	0x08006f5b
 8006e64:	08006ef5 	.word	0x08006ef5
 8006e68:	08006ed3 	.word	0x08006ed3
 8006e6c:	08006de3 	.word	0x08006de3
 8006e70:	08006de3 	.word	0x08006de3
 8006e74:	08006f57 	.word	0x08006f57
 8006e78:	08006de3 	.word	0x08006de3
 8006e7c:	08006f31 	.word	0x08006f31
 8006e80:	08006de3 	.word	0x08006de3
 8006e84:	08006de3 	.word	0x08006de3
 8006e88:	08006edb 	.word	0x08006edb
 8006e8c:	3b45      	subs	r3, #69	@ 0x45
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d8a7      	bhi.n	8006de2 <__ssvfiscanf_r+0xd2>
 8006e92:	2305      	movs	r3, #5
 8006e94:	e031      	b.n	8006efa <__ssvfiscanf_r+0x1ea>
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dd0d      	ble.n	8006eb8 <__ssvfiscanf_r+0x1a8>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	781a      	ldrb	r2, [r3, #0]
 8006ea0:	454a      	cmp	r2, r9
 8006ea2:	f040 80a7 	bne.w	8006ff4 <__ssvfiscanf_r+0x2e4>
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	6862      	ldr	r2, [r4, #4]
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006eae:	3a01      	subs	r2, #1
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	6062      	str	r2, [r4, #4]
 8006eb4:	9345      	str	r3, [sp, #276]	@ 0x114
 8006eb6:	e752      	b.n	8006d5e <__ssvfiscanf_r+0x4e>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4630      	mov	r0, r6
 8006ebc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ebe:	4798      	blx	r3
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d0eb      	beq.n	8006e9c <__ssvfiscanf_r+0x18c>
 8006ec4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f040 808c 	bne.w	8006fe4 <__ssvfiscanf_r+0x2d4>
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	e08c      	b.n	8006fec <__ssvfiscanf_r+0x2dc>
 8006ed2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ed4:	f042 0220 	orr.w	r2, r2, #32
 8006ed8:	9241      	str	r2, [sp, #260]	@ 0x104
 8006eda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ee0:	9241      	str	r2, [sp, #260]	@ 0x104
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006ee6:	9242      	str	r2, [sp, #264]	@ 0x108
 8006ee8:	d902      	bls.n	8006ef0 <__ssvfiscanf_r+0x1e0>
 8006eea:	e005      	b.n	8006ef8 <__ssvfiscanf_r+0x1e8>
 8006eec:	2300      	movs	r3, #0
 8006eee:	9342      	str	r3, [sp, #264]	@ 0x108
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e002      	b.n	8006efa <__ssvfiscanf_r+0x1ea>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	9342      	str	r3, [sp, #264]	@ 0x108
 8006ef8:	2304      	movs	r3, #4
 8006efa:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	dd39      	ble.n	8006f76 <__ssvfiscanf_r+0x266>
 8006f02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006f04:	0659      	lsls	r1, r3, #25
 8006f06:	d404      	bmi.n	8006f12 <__ssvfiscanf_r+0x202>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	781a      	ldrb	r2, [r3, #0]
 8006f0c:	5cba      	ldrb	r2, [r7, r2]
 8006f0e:	0712      	lsls	r2, r2, #28
 8006f10:	d438      	bmi.n	8006f84 <__ssvfiscanf_r+0x274>
 8006f12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	dc47      	bgt.n	8006fa8 <__ssvfiscanf_r+0x298>
 8006f18:	466b      	mov	r3, sp
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	a941      	add	r1, sp, #260	@ 0x104
 8006f20:	f000 f86a 	bl	8006ff8 <_scanf_chars>
 8006f24:	2801      	cmp	r0, #1
 8006f26:	d065      	beq.n	8006ff4 <__ssvfiscanf_r+0x2e4>
 8006f28:	2802      	cmp	r0, #2
 8006f2a:	f47f af18 	bne.w	8006d5e <__ssvfiscanf_r+0x4e>
 8006f2e:	e7c9      	b.n	8006ec4 <__ssvfiscanf_r+0x1b4>
 8006f30:	220a      	movs	r2, #10
 8006f32:	e7d7      	b.n	8006ee4 <__ssvfiscanf_r+0x1d4>
 8006f34:	4629      	mov	r1, r5
 8006f36:	4640      	mov	r0, r8
 8006f38:	f000 fa52 	bl	80073e0 <__sccl>
 8006f3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006f3e:	4605      	mov	r5, r0
 8006f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f44:	9341      	str	r3, [sp, #260]	@ 0x104
 8006f46:	2301      	movs	r3, #1
 8006f48:	e7d7      	b.n	8006efa <__ssvfiscanf_r+0x1ea>
 8006f4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f50:	9341      	str	r3, [sp, #260]	@ 0x104
 8006f52:	2300      	movs	r3, #0
 8006f54:	e7d1      	b.n	8006efa <__ssvfiscanf_r+0x1ea>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e7cf      	b.n	8006efa <__ssvfiscanf_r+0x1ea>
 8006f5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006f5c:	06c3      	lsls	r3, r0, #27
 8006f5e:	f53f aefe 	bmi.w	8006d5e <__ssvfiscanf_r+0x4e>
 8006f62:	9b00      	ldr	r3, [sp, #0]
 8006f64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006f66:	1d19      	adds	r1, r3, #4
 8006f68:	9100      	str	r1, [sp, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	07c0      	lsls	r0, r0, #31
 8006f6e:	bf4c      	ite	mi
 8006f70:	801a      	strhmi	r2, [r3, #0]
 8006f72:	601a      	strpl	r2, [r3, #0]
 8006f74:	e6f3      	b.n	8006d5e <__ssvfiscanf_r+0x4e>
 8006f76:	4621      	mov	r1, r4
 8006f78:	4630      	mov	r0, r6
 8006f7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006f7c:	4798      	blx	r3
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d0bf      	beq.n	8006f02 <__ssvfiscanf_r+0x1f2>
 8006f82:	e79f      	b.n	8006ec4 <__ssvfiscanf_r+0x1b4>
 8006f84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006f86:	3201      	adds	r2, #1
 8006f88:	9245      	str	r2, [sp, #276]	@ 0x114
 8006f8a:	6862      	ldr	r2, [r4, #4]
 8006f8c:	3a01      	subs	r2, #1
 8006f8e:	2a00      	cmp	r2, #0
 8006f90:	6062      	str	r2, [r4, #4]
 8006f92:	dd02      	ble.n	8006f9a <__ssvfiscanf_r+0x28a>
 8006f94:	3301      	adds	r3, #1
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	e7b6      	b.n	8006f08 <__ssvfiscanf_r+0x1f8>
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006fa0:	4798      	blx	r3
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d0b0      	beq.n	8006f08 <__ssvfiscanf_r+0x1f8>
 8006fa6:	e78d      	b.n	8006ec4 <__ssvfiscanf_r+0x1b4>
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	dc06      	bgt.n	8006fba <__ssvfiscanf_r+0x2aa>
 8006fac:	466b      	mov	r3, sp
 8006fae:	4622      	mov	r2, r4
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	a941      	add	r1, sp, #260	@ 0x104
 8006fb4:	f000 f87a 	bl	80070ac <_scanf_i>
 8006fb8:	e7b4      	b.n	8006f24 <__ssvfiscanf_r+0x214>
 8006fba:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <__ssvfiscanf_r+0x2d0>)
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f43f aece 	beq.w	8006d5e <__ssvfiscanf_r+0x4e>
 8006fc2:	466b      	mov	r3, sp
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	a941      	add	r1, sp, #260	@ 0x104
 8006fca:	f7fc fe73 	bl	8003cb4 <_scanf_float>
 8006fce:	e7a9      	b.n	8006f24 <__ssvfiscanf_r+0x214>
 8006fd0:	08006c5d 	.word	0x08006c5d
 8006fd4:	08006cd7 	.word	0x08006cd7
 8006fd8:	08008749 	.word	0x08008749
 8006fdc:	0800852f 	.word	0x0800852f
 8006fe0:	08003cb5 	.word	0x08003cb5
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	065b      	lsls	r3, r3, #25
 8006fe8:	f53f af70 	bmi.w	8006ecc <__ssvfiscanf_r+0x1bc>
 8006fec:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006ff6:	e7f9      	b.n	8006fec <__ssvfiscanf_r+0x2dc>

08006ff8 <_scanf_chars>:
 8006ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ffc:	4615      	mov	r5, r2
 8006ffe:	688a      	ldr	r2, [r1, #8]
 8007000:	4680      	mov	r8, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b932      	cbnz	r2, 8007014 <_scanf_chars+0x1c>
 8007006:	698a      	ldr	r2, [r1, #24]
 8007008:	2a00      	cmp	r2, #0
 800700a:	bf14      	ite	ne
 800700c:	f04f 32ff 	movne.w	r2, #4294967295
 8007010:	2201      	moveq	r2, #1
 8007012:	608a      	str	r2, [r1, #8]
 8007014:	2700      	movs	r7, #0
 8007016:	6822      	ldr	r2, [r4, #0]
 8007018:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80070a8 <_scanf_chars+0xb0>
 800701c:	06d1      	lsls	r1, r2, #27
 800701e:	bf5f      	itttt	pl
 8007020:	681a      	ldrpl	r2, [r3, #0]
 8007022:	1d11      	addpl	r1, r2, #4
 8007024:	6019      	strpl	r1, [r3, #0]
 8007026:	6816      	ldrpl	r6, [r2, #0]
 8007028:	69a0      	ldr	r0, [r4, #24]
 800702a:	b188      	cbz	r0, 8007050 <_scanf_chars+0x58>
 800702c:	2801      	cmp	r0, #1
 800702e:	d107      	bne.n	8007040 <_scanf_chars+0x48>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	6963      	ldr	r3, [r4, #20]
 8007036:	5c9b      	ldrb	r3, [r3, r2]
 8007038:	b953      	cbnz	r3, 8007050 <_scanf_chars+0x58>
 800703a:	2f00      	cmp	r7, #0
 800703c:	d031      	beq.n	80070a2 <_scanf_chars+0xaa>
 800703e:	e022      	b.n	8007086 <_scanf_chars+0x8e>
 8007040:	2802      	cmp	r0, #2
 8007042:	d120      	bne.n	8007086 <_scanf_chars+0x8e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f819 3003 	ldrb.w	r3, [r9, r3]
 800704c:	071b      	lsls	r3, r3, #28
 800704e:	d41a      	bmi.n	8007086 <_scanf_chars+0x8e>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	3701      	adds	r7, #1
 8007054:	06da      	lsls	r2, r3, #27
 8007056:	bf5e      	ittt	pl
 8007058:	682b      	ldrpl	r3, [r5, #0]
 800705a:	781b      	ldrbpl	r3, [r3, #0]
 800705c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007060:	682a      	ldr	r2, [r5, #0]
 8007062:	686b      	ldr	r3, [r5, #4]
 8007064:	3201      	adds	r2, #1
 8007066:	602a      	str	r2, [r5, #0]
 8007068:	68a2      	ldr	r2, [r4, #8]
 800706a:	3b01      	subs	r3, #1
 800706c:	3a01      	subs	r2, #1
 800706e:	606b      	str	r3, [r5, #4]
 8007070:	60a2      	str	r2, [r4, #8]
 8007072:	b142      	cbz	r2, 8007086 <_scanf_chars+0x8e>
 8007074:	2b00      	cmp	r3, #0
 8007076:	dcd7      	bgt.n	8007028 <_scanf_chars+0x30>
 8007078:	4629      	mov	r1, r5
 800707a:	4640      	mov	r0, r8
 800707c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007080:	4798      	blx	r3
 8007082:	2800      	cmp	r0, #0
 8007084:	d0d0      	beq.n	8007028 <_scanf_chars+0x30>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f013 0310 	ands.w	r3, r3, #16
 800708c:	d105      	bne.n	800709a <_scanf_chars+0xa2>
 800708e:	68e2      	ldr	r2, [r4, #12]
 8007090:	3201      	adds	r2, #1
 8007092:	60e2      	str	r2, [r4, #12]
 8007094:	69a2      	ldr	r2, [r4, #24]
 8007096:	b102      	cbz	r2, 800709a <_scanf_chars+0xa2>
 8007098:	7033      	strb	r3, [r6, #0]
 800709a:	2000      	movs	r0, #0
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	443b      	add	r3, r7
 80070a0:	6123      	str	r3, [r4, #16]
 80070a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a6:	bf00      	nop
 80070a8:	08008749 	.word	0x08008749

080070ac <_scanf_i>:
 80070ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	460c      	mov	r4, r1
 80070b2:	4698      	mov	r8, r3
 80070b4:	4b72      	ldr	r3, [pc, #456]	@ (8007280 <_scanf_i+0x1d4>)
 80070b6:	b087      	sub	sp, #28
 80070b8:	4682      	mov	sl, r0
 80070ba:	4616      	mov	r6, r2
 80070bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070c0:	ab03      	add	r3, sp, #12
 80070c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80070c6:	4b6f      	ldr	r3, [pc, #444]	@ (8007284 <_scanf_i+0x1d8>)
 80070c8:	69a1      	ldr	r1, [r4, #24]
 80070ca:	4a6f      	ldr	r2, [pc, #444]	@ (8007288 <_scanf_i+0x1dc>)
 80070cc:	4627      	mov	r7, r4
 80070ce:	2903      	cmp	r1, #3
 80070d0:	bf08      	it	eq
 80070d2:	461a      	moveq	r2, r3
 80070d4:	68a3      	ldr	r3, [r4, #8]
 80070d6:	9201      	str	r2, [sp, #4]
 80070d8:	1e5a      	subs	r2, r3, #1
 80070da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80070de:	bf81      	itttt	hi
 80070e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070e4:	eb03 0905 	addhi.w	r9, r3, r5
 80070e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070ec:	60a3      	strhi	r3, [r4, #8]
 80070ee:	f857 3b1c 	ldr.w	r3, [r7], #28
 80070f2:	bf98      	it	ls
 80070f4:	f04f 0900 	movls.w	r9, #0
 80070f8:	463d      	mov	r5, r7
 80070fa:	f04f 0b00 	mov.w	fp, #0
 80070fe:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	6831      	ldr	r1, [r6, #0]
 8007106:	ab03      	add	r3, sp, #12
 8007108:	2202      	movs	r2, #2
 800710a:	7809      	ldrb	r1, [r1, #0]
 800710c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007110:	f7fd f9c1 	bl	8004496 <memchr>
 8007114:	b328      	cbz	r0, 8007162 <_scanf_i+0xb6>
 8007116:	f1bb 0f01 	cmp.w	fp, #1
 800711a:	d159      	bne.n	80071d0 <_scanf_i+0x124>
 800711c:	6862      	ldr	r2, [r4, #4]
 800711e:	b92a      	cbnz	r2, 800712c <_scanf_i+0x80>
 8007120:	2108      	movs	r1, #8
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	6061      	str	r1, [r4, #4]
 8007126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800712a:	6022      	str	r2, [r4, #0]
 800712c:	6822      	ldr	r2, [r4, #0]
 800712e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	68a2      	ldr	r2, [r4, #8]
 8007136:	1e51      	subs	r1, r2, #1
 8007138:	60a1      	str	r1, [r4, #8]
 800713a:	b192      	cbz	r2, 8007162 <_scanf_i+0xb6>
 800713c:	6832      	ldr	r2, [r6, #0]
 800713e:	1c51      	adds	r1, r2, #1
 8007140:	6031      	str	r1, [r6, #0]
 8007142:	7812      	ldrb	r2, [r2, #0]
 8007144:	f805 2b01 	strb.w	r2, [r5], #1
 8007148:	6872      	ldr	r2, [r6, #4]
 800714a:	3a01      	subs	r2, #1
 800714c:	2a00      	cmp	r2, #0
 800714e:	6072      	str	r2, [r6, #4]
 8007150:	dc07      	bgt.n	8007162 <_scanf_i+0xb6>
 8007152:	4631      	mov	r1, r6
 8007154:	4650      	mov	r0, sl
 8007156:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800715a:	4790      	blx	r2
 800715c:	2800      	cmp	r0, #0
 800715e:	f040 8085 	bne.w	800726c <_scanf_i+0x1c0>
 8007162:	f10b 0b01 	add.w	fp, fp, #1
 8007166:	f1bb 0f03 	cmp.w	fp, #3
 800716a:	d1cb      	bne.n	8007104 <_scanf_i+0x58>
 800716c:	6863      	ldr	r3, [r4, #4]
 800716e:	b90b      	cbnz	r3, 8007174 <_scanf_i+0xc8>
 8007170:	230a      	movs	r3, #10
 8007172:	6063      	str	r3, [r4, #4]
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	4945      	ldr	r1, [pc, #276]	@ (800728c <_scanf_i+0x1e0>)
 8007178:	6960      	ldr	r0, [r4, #20]
 800717a:	1ac9      	subs	r1, r1, r3
 800717c:	f000 f930 	bl	80073e0 <__sccl>
 8007180:	f04f 0b00 	mov.w	fp, #0
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d03d      	beq.n	8007208 <_scanf_i+0x15c>
 800718c:	6831      	ldr	r1, [r6, #0]
 800718e:	6960      	ldr	r0, [r4, #20]
 8007190:	f891 c000 	ldrb.w	ip, [r1]
 8007194:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007198:	2800      	cmp	r0, #0
 800719a:	d035      	beq.n	8007208 <_scanf_i+0x15c>
 800719c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80071a0:	d124      	bne.n	80071ec <_scanf_i+0x140>
 80071a2:	0510      	lsls	r0, r2, #20
 80071a4:	d522      	bpl.n	80071ec <_scanf_i+0x140>
 80071a6:	f10b 0b01 	add.w	fp, fp, #1
 80071aa:	f1b9 0f00 	cmp.w	r9, #0
 80071ae:	d003      	beq.n	80071b8 <_scanf_i+0x10c>
 80071b0:	3301      	adds	r3, #1
 80071b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80071b6:	60a3      	str	r3, [r4, #8]
 80071b8:	6873      	ldr	r3, [r6, #4]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	6073      	str	r3, [r6, #4]
 80071c0:	dd1b      	ble.n	80071fa <_scanf_i+0x14e>
 80071c2:	6833      	ldr	r3, [r6, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	6033      	str	r3, [r6, #0]
 80071c8:	68a3      	ldr	r3, [r4, #8]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	60a3      	str	r3, [r4, #8]
 80071ce:	e7d9      	b.n	8007184 <_scanf_i+0xd8>
 80071d0:	f1bb 0f02 	cmp.w	fp, #2
 80071d4:	d1ae      	bne.n	8007134 <_scanf_i+0x88>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80071dc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80071e0:	d1c4      	bne.n	800716c <_scanf_i+0xc0>
 80071e2:	2110      	movs	r1, #16
 80071e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071e8:	6061      	str	r1, [r4, #4]
 80071ea:	e7a2      	b.n	8007132 <_scanf_i+0x86>
 80071ec:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80071f0:	6022      	str	r2, [r4, #0]
 80071f2:	780b      	ldrb	r3, [r1, #0]
 80071f4:	f805 3b01 	strb.w	r3, [r5], #1
 80071f8:	e7de      	b.n	80071b8 <_scanf_i+0x10c>
 80071fa:	4631      	mov	r1, r6
 80071fc:	4650      	mov	r0, sl
 80071fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007202:	4798      	blx	r3
 8007204:	2800      	cmp	r0, #0
 8007206:	d0df      	beq.n	80071c8 <_scanf_i+0x11c>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	05d9      	lsls	r1, r3, #23
 800720c:	d50d      	bpl.n	800722a <_scanf_i+0x17e>
 800720e:	42bd      	cmp	r5, r7
 8007210:	d909      	bls.n	8007226 <_scanf_i+0x17a>
 8007212:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007216:	4632      	mov	r2, r6
 8007218:	4650      	mov	r0, sl
 800721a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800721e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007222:	4798      	blx	r3
 8007224:	464d      	mov	r5, r9
 8007226:	42bd      	cmp	r5, r7
 8007228:	d028      	beq.n	800727c <_scanf_i+0x1d0>
 800722a:	6822      	ldr	r2, [r4, #0]
 800722c:	f012 0210 	ands.w	r2, r2, #16
 8007230:	d113      	bne.n	800725a <_scanf_i+0x1ae>
 8007232:	702a      	strb	r2, [r5, #0]
 8007234:	4639      	mov	r1, r7
 8007236:	6863      	ldr	r3, [r4, #4]
 8007238:	4650      	mov	r0, sl
 800723a:	9e01      	ldr	r6, [sp, #4]
 800723c:	47b0      	blx	r6
 800723e:	f8d8 3000 	ldr.w	r3, [r8]
 8007242:	6821      	ldr	r1, [r4, #0]
 8007244:	1d1a      	adds	r2, r3, #4
 8007246:	f8c8 2000 	str.w	r2, [r8]
 800724a:	f011 0f20 	tst.w	r1, #32
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	d00f      	beq.n	8007272 <_scanf_i+0x1c6>
 8007252:	6018      	str	r0, [r3, #0]
 8007254:	68e3      	ldr	r3, [r4, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60e3      	str	r3, [r4, #12]
 800725a:	2000      	movs	r0, #0
 800725c:	6923      	ldr	r3, [r4, #16]
 800725e:	1bed      	subs	r5, r5, r7
 8007260:	445d      	add	r5, fp
 8007262:	442b      	add	r3, r5
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	b007      	add	sp, #28
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	f04f 0b00 	mov.w	fp, #0
 8007270:	e7ca      	b.n	8007208 <_scanf_i+0x15c>
 8007272:	07ca      	lsls	r2, r1, #31
 8007274:	bf4c      	ite	mi
 8007276:	8018      	strhmi	r0, [r3, #0]
 8007278:	6018      	strpl	r0, [r3, #0]
 800727a:	e7eb      	b.n	8007254 <_scanf_i+0x1a8>
 800727c:	2001      	movs	r0, #1
 800727e:	e7f2      	b.n	8007266 <_scanf_i+0x1ba>
 8007280:	080083d4 	.word	0x080083d4
 8007284:	080069a9 	.word	0x080069a9
 8007288:	08007d75 	.word	0x08007d75
 800728c:	0800854a 	.word	0x0800854a

08007290 <__sflush_r>:
 8007290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	0716      	lsls	r6, r2, #28
 8007298:	4605      	mov	r5, r0
 800729a:	460c      	mov	r4, r1
 800729c:	d454      	bmi.n	8007348 <__sflush_r+0xb8>
 800729e:	684b      	ldr	r3, [r1, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	dc02      	bgt.n	80072aa <__sflush_r+0x1a>
 80072a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd48      	ble.n	800733c <__sflush_r+0xac>
 80072aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072ac:	2e00      	cmp	r6, #0
 80072ae:	d045      	beq.n	800733c <__sflush_r+0xac>
 80072b0:	2300      	movs	r3, #0
 80072b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072b6:	682f      	ldr	r7, [r5, #0]
 80072b8:	6a21      	ldr	r1, [r4, #32]
 80072ba:	602b      	str	r3, [r5, #0]
 80072bc:	d030      	beq.n	8007320 <__sflush_r+0x90>
 80072be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	0759      	lsls	r1, r3, #29
 80072c4:	d505      	bpl.n	80072d2 <__sflush_r+0x42>
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072cc:	b10b      	cbz	r3, 80072d2 <__sflush_r+0x42>
 80072ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072d0:	1ad2      	subs	r2, r2, r3
 80072d2:	2300      	movs	r3, #0
 80072d4:	4628      	mov	r0, r5
 80072d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072d8:	6a21      	ldr	r1, [r4, #32]
 80072da:	47b0      	blx	r6
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	d106      	bne.n	80072f0 <__sflush_r+0x60>
 80072e2:	6829      	ldr	r1, [r5, #0]
 80072e4:	291d      	cmp	r1, #29
 80072e6:	d82b      	bhi.n	8007340 <__sflush_r+0xb0>
 80072e8:	4a28      	ldr	r2, [pc, #160]	@ (800738c <__sflush_r+0xfc>)
 80072ea:	40ca      	lsrs	r2, r1
 80072ec:	07d6      	lsls	r6, r2, #31
 80072ee:	d527      	bpl.n	8007340 <__sflush_r+0xb0>
 80072f0:	2200      	movs	r2, #0
 80072f2:	6062      	str	r2, [r4, #4]
 80072f4:	6922      	ldr	r2, [r4, #16]
 80072f6:	04d9      	lsls	r1, r3, #19
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	d504      	bpl.n	8007306 <__sflush_r+0x76>
 80072fc:	1c42      	adds	r2, r0, #1
 80072fe:	d101      	bne.n	8007304 <__sflush_r+0x74>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	b903      	cbnz	r3, 8007306 <__sflush_r+0x76>
 8007304:	6560      	str	r0, [r4, #84]	@ 0x54
 8007306:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007308:	602f      	str	r7, [r5, #0]
 800730a:	b1b9      	cbz	r1, 800733c <__sflush_r+0xac>
 800730c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007310:	4299      	cmp	r1, r3
 8007312:	d002      	beq.n	800731a <__sflush_r+0x8a>
 8007314:	4628      	mov	r0, r5
 8007316:	f7fd ff2f 	bl	8005178 <_free_r>
 800731a:	2300      	movs	r3, #0
 800731c:	6363      	str	r3, [r4, #52]	@ 0x34
 800731e:	e00d      	b.n	800733c <__sflush_r+0xac>
 8007320:	2301      	movs	r3, #1
 8007322:	4628      	mov	r0, r5
 8007324:	47b0      	blx	r6
 8007326:	4602      	mov	r2, r0
 8007328:	1c50      	adds	r0, r2, #1
 800732a:	d1c9      	bne.n	80072c0 <__sflush_r+0x30>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0c6      	beq.n	80072c0 <__sflush_r+0x30>
 8007332:	2b1d      	cmp	r3, #29
 8007334:	d001      	beq.n	800733a <__sflush_r+0xaa>
 8007336:	2b16      	cmp	r3, #22
 8007338:	d11d      	bne.n	8007376 <__sflush_r+0xe6>
 800733a:	602f      	str	r7, [r5, #0]
 800733c:	2000      	movs	r0, #0
 800733e:	e021      	b.n	8007384 <__sflush_r+0xf4>
 8007340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007344:	b21b      	sxth	r3, r3
 8007346:	e01a      	b.n	800737e <__sflush_r+0xee>
 8007348:	690f      	ldr	r7, [r1, #16]
 800734a:	2f00      	cmp	r7, #0
 800734c:	d0f6      	beq.n	800733c <__sflush_r+0xac>
 800734e:	0793      	lsls	r3, r2, #30
 8007350:	bf18      	it	ne
 8007352:	2300      	movne	r3, #0
 8007354:	680e      	ldr	r6, [r1, #0]
 8007356:	bf08      	it	eq
 8007358:	694b      	ldreq	r3, [r1, #20]
 800735a:	1bf6      	subs	r6, r6, r7
 800735c:	600f      	str	r7, [r1, #0]
 800735e:	608b      	str	r3, [r1, #8]
 8007360:	2e00      	cmp	r6, #0
 8007362:	ddeb      	ble.n	800733c <__sflush_r+0xac>
 8007364:	4633      	mov	r3, r6
 8007366:	463a      	mov	r2, r7
 8007368:	4628      	mov	r0, r5
 800736a:	6a21      	ldr	r1, [r4, #32]
 800736c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007370:	47e0      	blx	ip
 8007372:	2800      	cmp	r0, #0
 8007374:	dc07      	bgt.n	8007386 <__sflush_r+0xf6>
 8007376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800737e:	f04f 30ff 	mov.w	r0, #4294967295
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007386:	4407      	add	r7, r0
 8007388:	1a36      	subs	r6, r6, r0
 800738a:	e7e9      	b.n	8007360 <__sflush_r+0xd0>
 800738c:	20400001 	.word	0x20400001

08007390 <_fflush_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	690b      	ldr	r3, [r1, #16]
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b913      	cbnz	r3, 80073a0 <_fflush_r+0x10>
 800739a:	2500      	movs	r5, #0
 800739c:	4628      	mov	r0, r5
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	b118      	cbz	r0, 80073aa <_fflush_r+0x1a>
 80073a2:	6a03      	ldr	r3, [r0, #32]
 80073a4:	b90b      	cbnz	r3, 80073aa <_fflush_r+0x1a>
 80073a6:	f7fc ff1b 	bl	80041e0 <__sinit>
 80073aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f3      	beq.n	800739a <_fflush_r+0xa>
 80073b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073b4:	07d0      	lsls	r0, r2, #31
 80073b6:	d404      	bmi.n	80073c2 <_fflush_r+0x32>
 80073b8:	0599      	lsls	r1, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_fflush_r+0x32>
 80073bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073be:	f7fd f868 	bl	8004492 <__retarget_lock_acquire_recursive>
 80073c2:	4628      	mov	r0, r5
 80073c4:	4621      	mov	r1, r4
 80073c6:	f7ff ff63 	bl	8007290 <__sflush_r>
 80073ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073cc:	4605      	mov	r5, r0
 80073ce:	07da      	lsls	r2, r3, #31
 80073d0:	d4e4      	bmi.n	800739c <_fflush_r+0xc>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	059b      	lsls	r3, r3, #22
 80073d6:	d4e1      	bmi.n	800739c <_fflush_r+0xc>
 80073d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073da:	f7fd f85b 	bl	8004494 <__retarget_lock_release_recursive>
 80073de:	e7dd      	b.n	800739c <_fflush_r+0xc>

080073e0 <__sccl>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	780b      	ldrb	r3, [r1, #0]
 80073e4:	4604      	mov	r4, r0
 80073e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80073e8:	bf0b      	itete	eq
 80073ea:	784b      	ldrbeq	r3, [r1, #1]
 80073ec:	1c4a      	addne	r2, r1, #1
 80073ee:	1c8a      	addeq	r2, r1, #2
 80073f0:	2100      	movne	r1, #0
 80073f2:	bf08      	it	eq
 80073f4:	2101      	moveq	r1, #1
 80073f6:	3801      	subs	r0, #1
 80073f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80073fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007400:	42a8      	cmp	r0, r5
 8007402:	d1fb      	bne.n	80073fc <__sccl+0x1c>
 8007404:	b90b      	cbnz	r3, 800740a <__sccl+0x2a>
 8007406:	1e50      	subs	r0, r2, #1
 8007408:	bd70      	pop	{r4, r5, r6, pc}
 800740a:	f081 0101 	eor.w	r1, r1, #1
 800740e:	4610      	mov	r0, r2
 8007410:	54e1      	strb	r1, [r4, r3]
 8007412:	4602      	mov	r2, r0
 8007414:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007418:	2d2d      	cmp	r5, #45	@ 0x2d
 800741a:	d005      	beq.n	8007428 <__sccl+0x48>
 800741c:	2d5d      	cmp	r5, #93	@ 0x5d
 800741e:	d016      	beq.n	800744e <__sccl+0x6e>
 8007420:	2d00      	cmp	r5, #0
 8007422:	d0f1      	beq.n	8007408 <__sccl+0x28>
 8007424:	462b      	mov	r3, r5
 8007426:	e7f2      	b.n	800740e <__sccl+0x2e>
 8007428:	7846      	ldrb	r6, [r0, #1]
 800742a:	2e5d      	cmp	r6, #93	@ 0x5d
 800742c:	d0fa      	beq.n	8007424 <__sccl+0x44>
 800742e:	42b3      	cmp	r3, r6
 8007430:	dcf8      	bgt.n	8007424 <__sccl+0x44>
 8007432:	461a      	mov	r2, r3
 8007434:	3002      	adds	r0, #2
 8007436:	3201      	adds	r2, #1
 8007438:	4296      	cmp	r6, r2
 800743a:	54a1      	strb	r1, [r4, r2]
 800743c:	dcfb      	bgt.n	8007436 <__sccl+0x56>
 800743e:	1af2      	subs	r2, r6, r3
 8007440:	3a01      	subs	r2, #1
 8007442:	42b3      	cmp	r3, r6
 8007444:	bfa8      	it	ge
 8007446:	2200      	movge	r2, #0
 8007448:	1c5d      	adds	r5, r3, #1
 800744a:	18ab      	adds	r3, r5, r2
 800744c:	e7e1      	b.n	8007412 <__sccl+0x32>
 800744e:	4610      	mov	r0, r2
 8007450:	e7da      	b.n	8007408 <__sccl+0x28>

08007452 <__submore>:
 8007452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007456:	460c      	mov	r4, r1
 8007458:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800745a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800745e:	4299      	cmp	r1, r3
 8007460:	d11b      	bne.n	800749a <__submore+0x48>
 8007462:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007466:	f7fd fef9 	bl	800525c <_malloc_r>
 800746a:	b918      	cbnz	r0, 8007474 <__submore+0x22>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007478:	63a3      	str	r3, [r4, #56]	@ 0x38
 800747a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800747e:	6360      	str	r0, [r4, #52]	@ 0x34
 8007480:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007484:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007488:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800748c:	7043      	strb	r3, [r0, #1]
 800748e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007492:	7003      	strb	r3, [r0, #0]
 8007494:	6020      	str	r0, [r4, #0]
 8007496:	2000      	movs	r0, #0
 8007498:	e7ea      	b.n	8007470 <__submore+0x1e>
 800749a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800749c:	0077      	lsls	r7, r6, #1
 800749e:	463a      	mov	r2, r7
 80074a0:	f000 fbcb 	bl	8007c3a <_realloc_r>
 80074a4:	4605      	mov	r5, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d0e0      	beq.n	800746c <__submore+0x1a>
 80074aa:	eb00 0806 	add.w	r8, r0, r6
 80074ae:	4601      	mov	r1, r0
 80074b0:	4632      	mov	r2, r6
 80074b2:	4640      	mov	r0, r8
 80074b4:	f000 f830 	bl	8007518 <memcpy>
 80074b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80074bc:	f8c4 8000 	str.w	r8, [r4]
 80074c0:	e7e9      	b.n	8007496 <__submore+0x44>

080074c2 <memmove>:
 80074c2:	4288      	cmp	r0, r1
 80074c4:	b510      	push	{r4, lr}
 80074c6:	eb01 0402 	add.w	r4, r1, r2
 80074ca:	d902      	bls.n	80074d2 <memmove+0x10>
 80074cc:	4284      	cmp	r4, r0
 80074ce:	4623      	mov	r3, r4
 80074d0:	d807      	bhi.n	80074e2 <memmove+0x20>
 80074d2:	1e43      	subs	r3, r0, #1
 80074d4:	42a1      	cmp	r1, r4
 80074d6:	d008      	beq.n	80074ea <memmove+0x28>
 80074d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074e0:	e7f8      	b.n	80074d4 <memmove+0x12>
 80074e2:	4601      	mov	r1, r0
 80074e4:	4402      	add	r2, r0
 80074e6:	428a      	cmp	r2, r1
 80074e8:	d100      	bne.n	80074ec <memmove+0x2a>
 80074ea:	bd10      	pop	{r4, pc}
 80074ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074f4:	e7f7      	b.n	80074e6 <memmove+0x24>
	...

080074f8 <_sbrk_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	2300      	movs	r3, #0
 80074fc:	4d05      	ldr	r5, [pc, #20]	@ (8007514 <_sbrk_r+0x1c>)
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	f7fa f9c4 	bl	8001890 <_sbrk>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_sbrk_r+0x1a>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_sbrk_r+0x1a>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	2000045c 	.word	0x2000045c

08007518 <memcpy>:
 8007518:	440a      	add	r2, r1
 800751a:	4291      	cmp	r1, r2
 800751c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007520:	d100      	bne.n	8007524 <memcpy+0xc>
 8007522:	4770      	bx	lr
 8007524:	b510      	push	{r4, lr}
 8007526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800752a:	4291      	cmp	r1, r2
 800752c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007530:	d1f9      	bne.n	8007526 <memcpy+0xe>
 8007532:	bd10      	pop	{r4, pc}

08007534 <nan>:
 8007534:	2000      	movs	r0, #0
 8007536:	4901      	ldr	r1, [pc, #4]	@ (800753c <nan+0x8>)
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	7ff80000 	.word	0x7ff80000

08007540 <__assert_func>:
 8007540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007542:	4614      	mov	r4, r2
 8007544:	461a      	mov	r2, r3
 8007546:	4b09      	ldr	r3, [pc, #36]	@ (800756c <__assert_func+0x2c>)
 8007548:	4605      	mov	r5, r0
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68d8      	ldr	r0, [r3, #12]
 800754e:	b14c      	cbz	r4, 8007564 <__assert_func+0x24>
 8007550:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <__assert_func+0x30>)
 8007552:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007556:	9100      	str	r1, [sp, #0]
 8007558:	462b      	mov	r3, r5
 800755a:	4906      	ldr	r1, [pc, #24]	@ (8007574 <__assert_func+0x34>)
 800755c:	f000 fc1a 	bl	8007d94 <fiprintf>
 8007560:	f000 fc2a 	bl	8007db8 <abort>
 8007564:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <__assert_func+0x38>)
 8007566:	461c      	mov	r4, r3
 8007568:	e7f3      	b.n	8007552 <__assert_func+0x12>
 800756a:	bf00      	nop
 800756c:	20000018 	.word	0x20000018
 8007570:	0800855d 	.word	0x0800855d
 8007574:	0800856a 	.word	0x0800856a
 8007578:	08008598 	.word	0x08008598

0800757c <_calloc_r>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	fba1 5402 	umull	r5, r4, r1, r2
 8007582:	b934      	cbnz	r4, 8007592 <_calloc_r+0x16>
 8007584:	4629      	mov	r1, r5
 8007586:	f7fd fe69 	bl	800525c <_malloc_r>
 800758a:	4606      	mov	r6, r0
 800758c:	b928      	cbnz	r0, 800759a <_calloc_r+0x1e>
 800758e:	4630      	mov	r0, r6
 8007590:	bd70      	pop	{r4, r5, r6, pc}
 8007592:	220c      	movs	r2, #12
 8007594:	2600      	movs	r6, #0
 8007596:	6002      	str	r2, [r0, #0]
 8007598:	e7f9      	b.n	800758e <_calloc_r+0x12>
 800759a:	462a      	mov	r2, r5
 800759c:	4621      	mov	r1, r4
 800759e:	f7fc fee8 	bl	8004372 <memset>
 80075a2:	e7f4      	b.n	800758e <_calloc_r+0x12>

080075a4 <rshift>:
 80075a4:	6903      	ldr	r3, [r0, #16]
 80075a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80075ae:	f100 0414 	add.w	r4, r0, #20
 80075b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80075b6:	dd46      	ble.n	8007646 <rshift+0xa2>
 80075b8:	f011 011f 	ands.w	r1, r1, #31
 80075bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80075c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80075c4:	d10c      	bne.n	80075e0 <rshift+0x3c>
 80075c6:	4629      	mov	r1, r5
 80075c8:	f100 0710 	add.w	r7, r0, #16
 80075cc:	42b1      	cmp	r1, r6
 80075ce:	d335      	bcc.n	800763c <rshift+0x98>
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	1eea      	subs	r2, r5, #3
 80075d6:	4296      	cmp	r6, r2
 80075d8:	bf38      	it	cc
 80075da:	2300      	movcc	r3, #0
 80075dc:	4423      	add	r3, r4
 80075de:	e015      	b.n	800760c <rshift+0x68>
 80075e0:	46a1      	mov	r9, r4
 80075e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80075e6:	f1c1 0820 	rsb	r8, r1, #32
 80075ea:	40cf      	lsrs	r7, r1
 80075ec:	f105 0e04 	add.w	lr, r5, #4
 80075f0:	4576      	cmp	r6, lr
 80075f2:	46f4      	mov	ip, lr
 80075f4:	d816      	bhi.n	8007624 <rshift+0x80>
 80075f6:	1a9a      	subs	r2, r3, r2
 80075f8:	0092      	lsls	r2, r2, #2
 80075fa:	3a04      	subs	r2, #4
 80075fc:	3501      	adds	r5, #1
 80075fe:	42ae      	cmp	r6, r5
 8007600:	bf38      	it	cc
 8007602:	2200      	movcc	r2, #0
 8007604:	18a3      	adds	r3, r4, r2
 8007606:	50a7      	str	r7, [r4, r2]
 8007608:	b107      	cbz	r7, 800760c <rshift+0x68>
 800760a:	3304      	adds	r3, #4
 800760c:	42a3      	cmp	r3, r4
 800760e:	eba3 0204 	sub.w	r2, r3, r4
 8007612:	bf08      	it	eq
 8007614:	2300      	moveq	r3, #0
 8007616:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800761a:	6102      	str	r2, [r0, #16]
 800761c:	bf08      	it	eq
 800761e:	6143      	streq	r3, [r0, #20]
 8007620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007624:	f8dc c000 	ldr.w	ip, [ip]
 8007628:	fa0c fc08 	lsl.w	ip, ip, r8
 800762c:	ea4c 0707 	orr.w	r7, ip, r7
 8007630:	f849 7b04 	str.w	r7, [r9], #4
 8007634:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007638:	40cf      	lsrs	r7, r1
 800763a:	e7d9      	b.n	80075f0 <rshift+0x4c>
 800763c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007640:	f847 cf04 	str.w	ip, [r7, #4]!
 8007644:	e7c2      	b.n	80075cc <rshift+0x28>
 8007646:	4623      	mov	r3, r4
 8007648:	e7e0      	b.n	800760c <rshift+0x68>

0800764a <__hexdig_fun>:
 800764a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800764e:	2b09      	cmp	r3, #9
 8007650:	d802      	bhi.n	8007658 <__hexdig_fun+0xe>
 8007652:	3820      	subs	r0, #32
 8007654:	b2c0      	uxtb	r0, r0
 8007656:	4770      	bx	lr
 8007658:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800765c:	2b05      	cmp	r3, #5
 800765e:	d801      	bhi.n	8007664 <__hexdig_fun+0x1a>
 8007660:	3847      	subs	r0, #71	@ 0x47
 8007662:	e7f7      	b.n	8007654 <__hexdig_fun+0xa>
 8007664:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007668:	2b05      	cmp	r3, #5
 800766a:	d801      	bhi.n	8007670 <__hexdig_fun+0x26>
 800766c:	3827      	subs	r0, #39	@ 0x27
 800766e:	e7f1      	b.n	8007654 <__hexdig_fun+0xa>
 8007670:	2000      	movs	r0, #0
 8007672:	4770      	bx	lr

08007674 <__gethex>:
 8007674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	468a      	mov	sl, r1
 800767a:	4690      	mov	r8, r2
 800767c:	b085      	sub	sp, #20
 800767e:	9302      	str	r3, [sp, #8]
 8007680:	680b      	ldr	r3, [r1, #0]
 8007682:	9001      	str	r0, [sp, #4]
 8007684:	1c9c      	adds	r4, r3, #2
 8007686:	46a1      	mov	r9, r4
 8007688:	f814 0b01 	ldrb.w	r0, [r4], #1
 800768c:	2830      	cmp	r0, #48	@ 0x30
 800768e:	d0fa      	beq.n	8007686 <__gethex+0x12>
 8007690:	eba9 0303 	sub.w	r3, r9, r3
 8007694:	f1a3 0b02 	sub.w	fp, r3, #2
 8007698:	f7ff ffd7 	bl	800764a <__hexdig_fun>
 800769c:	4605      	mov	r5, r0
 800769e:	2800      	cmp	r0, #0
 80076a0:	d168      	bne.n	8007774 <__gethex+0x100>
 80076a2:	2201      	movs	r2, #1
 80076a4:	4648      	mov	r0, r9
 80076a6:	499f      	ldr	r1, [pc, #636]	@ (8007924 <__gethex+0x2b0>)
 80076a8:	f7fc fe6b 	bl	8004382 <strncmp>
 80076ac:	4607      	mov	r7, r0
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d167      	bne.n	8007782 <__gethex+0x10e>
 80076b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80076b6:	4626      	mov	r6, r4
 80076b8:	f7ff ffc7 	bl	800764a <__hexdig_fun>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d062      	beq.n	8007786 <__gethex+0x112>
 80076c0:	4623      	mov	r3, r4
 80076c2:	7818      	ldrb	r0, [r3, #0]
 80076c4:	4699      	mov	r9, r3
 80076c6:	2830      	cmp	r0, #48	@ 0x30
 80076c8:	f103 0301 	add.w	r3, r3, #1
 80076cc:	d0f9      	beq.n	80076c2 <__gethex+0x4e>
 80076ce:	f7ff ffbc 	bl	800764a <__hexdig_fun>
 80076d2:	fab0 f580 	clz	r5, r0
 80076d6:	f04f 0b01 	mov.w	fp, #1
 80076da:	096d      	lsrs	r5, r5, #5
 80076dc:	464a      	mov	r2, r9
 80076de:	4616      	mov	r6, r2
 80076e0:	7830      	ldrb	r0, [r6, #0]
 80076e2:	3201      	adds	r2, #1
 80076e4:	f7ff ffb1 	bl	800764a <__hexdig_fun>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d1f8      	bne.n	80076de <__gethex+0x6a>
 80076ec:	2201      	movs	r2, #1
 80076ee:	4630      	mov	r0, r6
 80076f0:	498c      	ldr	r1, [pc, #560]	@ (8007924 <__gethex+0x2b0>)
 80076f2:	f7fc fe46 	bl	8004382 <strncmp>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d13f      	bne.n	800777a <__gethex+0x106>
 80076fa:	b944      	cbnz	r4, 800770e <__gethex+0x9a>
 80076fc:	1c74      	adds	r4, r6, #1
 80076fe:	4622      	mov	r2, r4
 8007700:	4616      	mov	r6, r2
 8007702:	7830      	ldrb	r0, [r6, #0]
 8007704:	3201      	adds	r2, #1
 8007706:	f7ff ffa0 	bl	800764a <__hexdig_fun>
 800770a:	2800      	cmp	r0, #0
 800770c:	d1f8      	bne.n	8007700 <__gethex+0x8c>
 800770e:	1ba4      	subs	r4, r4, r6
 8007710:	00a7      	lsls	r7, r4, #2
 8007712:	7833      	ldrb	r3, [r6, #0]
 8007714:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007718:	2b50      	cmp	r3, #80	@ 0x50
 800771a:	d13e      	bne.n	800779a <__gethex+0x126>
 800771c:	7873      	ldrb	r3, [r6, #1]
 800771e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007720:	d033      	beq.n	800778a <__gethex+0x116>
 8007722:	2b2d      	cmp	r3, #45	@ 0x2d
 8007724:	d034      	beq.n	8007790 <__gethex+0x11c>
 8007726:	2400      	movs	r4, #0
 8007728:	1c71      	adds	r1, r6, #1
 800772a:	7808      	ldrb	r0, [r1, #0]
 800772c:	f7ff ff8d 	bl	800764a <__hexdig_fun>
 8007730:	1e43      	subs	r3, r0, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b18      	cmp	r3, #24
 8007736:	d830      	bhi.n	800779a <__gethex+0x126>
 8007738:	f1a0 0210 	sub.w	r2, r0, #16
 800773c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007740:	f7ff ff83 	bl	800764a <__hexdig_fun>
 8007744:	f100 3cff 	add.w	ip, r0, #4294967295
 8007748:	fa5f fc8c 	uxtb.w	ip, ip
 800774c:	f1bc 0f18 	cmp.w	ip, #24
 8007750:	f04f 030a 	mov.w	r3, #10
 8007754:	d91e      	bls.n	8007794 <__gethex+0x120>
 8007756:	b104      	cbz	r4, 800775a <__gethex+0xe6>
 8007758:	4252      	negs	r2, r2
 800775a:	4417      	add	r7, r2
 800775c:	f8ca 1000 	str.w	r1, [sl]
 8007760:	b1ed      	cbz	r5, 800779e <__gethex+0x12a>
 8007762:	f1bb 0f00 	cmp.w	fp, #0
 8007766:	bf0c      	ite	eq
 8007768:	2506      	moveq	r5, #6
 800776a:	2500      	movne	r5, #0
 800776c:	4628      	mov	r0, r5
 800776e:	b005      	add	sp, #20
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	2500      	movs	r5, #0
 8007776:	462c      	mov	r4, r5
 8007778:	e7b0      	b.n	80076dc <__gethex+0x68>
 800777a:	2c00      	cmp	r4, #0
 800777c:	d1c7      	bne.n	800770e <__gethex+0x9a>
 800777e:	4627      	mov	r7, r4
 8007780:	e7c7      	b.n	8007712 <__gethex+0x9e>
 8007782:	464e      	mov	r6, r9
 8007784:	462f      	mov	r7, r5
 8007786:	2501      	movs	r5, #1
 8007788:	e7c3      	b.n	8007712 <__gethex+0x9e>
 800778a:	2400      	movs	r4, #0
 800778c:	1cb1      	adds	r1, r6, #2
 800778e:	e7cc      	b.n	800772a <__gethex+0xb6>
 8007790:	2401      	movs	r4, #1
 8007792:	e7fb      	b.n	800778c <__gethex+0x118>
 8007794:	fb03 0002 	mla	r0, r3, r2, r0
 8007798:	e7ce      	b.n	8007738 <__gethex+0xc4>
 800779a:	4631      	mov	r1, r6
 800779c:	e7de      	b.n	800775c <__gethex+0xe8>
 800779e:	4629      	mov	r1, r5
 80077a0:	eba6 0309 	sub.w	r3, r6, r9
 80077a4:	3b01      	subs	r3, #1
 80077a6:	2b07      	cmp	r3, #7
 80077a8:	dc0a      	bgt.n	80077c0 <__gethex+0x14c>
 80077aa:	9801      	ldr	r0, [sp, #4]
 80077ac:	f7fd fde2 	bl	8005374 <_Balloc>
 80077b0:	4604      	mov	r4, r0
 80077b2:	b940      	cbnz	r0, 80077c6 <__gethex+0x152>
 80077b4:	4602      	mov	r2, r0
 80077b6:	21e4      	movs	r1, #228	@ 0xe4
 80077b8:	4b5b      	ldr	r3, [pc, #364]	@ (8007928 <__gethex+0x2b4>)
 80077ba:	485c      	ldr	r0, [pc, #368]	@ (800792c <__gethex+0x2b8>)
 80077bc:	f7ff fec0 	bl	8007540 <__assert_func>
 80077c0:	3101      	adds	r1, #1
 80077c2:	105b      	asrs	r3, r3, #1
 80077c4:	e7ef      	b.n	80077a6 <__gethex+0x132>
 80077c6:	2300      	movs	r3, #0
 80077c8:	f100 0a14 	add.w	sl, r0, #20
 80077cc:	4655      	mov	r5, sl
 80077ce:	469b      	mov	fp, r3
 80077d0:	45b1      	cmp	r9, r6
 80077d2:	d337      	bcc.n	8007844 <__gethex+0x1d0>
 80077d4:	f845 bb04 	str.w	fp, [r5], #4
 80077d8:	eba5 050a 	sub.w	r5, r5, sl
 80077dc:	10ad      	asrs	r5, r5, #2
 80077de:	6125      	str	r5, [r4, #16]
 80077e0:	4658      	mov	r0, fp
 80077e2:	f7fd feb9 	bl	8005558 <__hi0bits>
 80077e6:	016d      	lsls	r5, r5, #5
 80077e8:	f8d8 6000 	ldr.w	r6, [r8]
 80077ec:	1a2d      	subs	r5, r5, r0
 80077ee:	42b5      	cmp	r5, r6
 80077f0:	dd54      	ble.n	800789c <__gethex+0x228>
 80077f2:	1bad      	subs	r5, r5, r6
 80077f4:	4629      	mov	r1, r5
 80077f6:	4620      	mov	r0, r4
 80077f8:	f7fe fa3b 	bl	8005c72 <__any_on>
 80077fc:	4681      	mov	r9, r0
 80077fe:	b178      	cbz	r0, 8007820 <__gethex+0x1ac>
 8007800:	f04f 0901 	mov.w	r9, #1
 8007804:	1e6b      	subs	r3, r5, #1
 8007806:	1159      	asrs	r1, r3, #5
 8007808:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800780c:	f003 021f 	and.w	r2, r3, #31
 8007810:	fa09 f202 	lsl.w	r2, r9, r2
 8007814:	420a      	tst	r2, r1
 8007816:	d003      	beq.n	8007820 <__gethex+0x1ac>
 8007818:	454b      	cmp	r3, r9
 800781a:	dc36      	bgt.n	800788a <__gethex+0x216>
 800781c:	f04f 0902 	mov.w	r9, #2
 8007820:	4629      	mov	r1, r5
 8007822:	4620      	mov	r0, r4
 8007824:	f7ff febe 	bl	80075a4 <rshift>
 8007828:	442f      	add	r7, r5
 800782a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800782e:	42bb      	cmp	r3, r7
 8007830:	da42      	bge.n	80078b8 <__gethex+0x244>
 8007832:	4621      	mov	r1, r4
 8007834:	9801      	ldr	r0, [sp, #4]
 8007836:	f7fd fddd 	bl	80053f4 <_Bfree>
 800783a:	2300      	movs	r3, #0
 800783c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800783e:	25a3      	movs	r5, #163	@ 0xa3
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e793      	b.n	800776c <__gethex+0xf8>
 8007844:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007848:	2a2e      	cmp	r2, #46	@ 0x2e
 800784a:	d012      	beq.n	8007872 <__gethex+0x1fe>
 800784c:	2b20      	cmp	r3, #32
 800784e:	d104      	bne.n	800785a <__gethex+0x1e6>
 8007850:	f845 bb04 	str.w	fp, [r5], #4
 8007854:	f04f 0b00 	mov.w	fp, #0
 8007858:	465b      	mov	r3, fp
 800785a:	7830      	ldrb	r0, [r6, #0]
 800785c:	9303      	str	r3, [sp, #12]
 800785e:	f7ff fef4 	bl	800764a <__hexdig_fun>
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	f000 000f 	and.w	r0, r0, #15
 8007868:	4098      	lsls	r0, r3
 800786a:	ea4b 0b00 	orr.w	fp, fp, r0
 800786e:	3304      	adds	r3, #4
 8007870:	e7ae      	b.n	80077d0 <__gethex+0x15c>
 8007872:	45b1      	cmp	r9, r6
 8007874:	d8ea      	bhi.n	800784c <__gethex+0x1d8>
 8007876:	2201      	movs	r2, #1
 8007878:	4630      	mov	r0, r6
 800787a:	492a      	ldr	r1, [pc, #168]	@ (8007924 <__gethex+0x2b0>)
 800787c:	9303      	str	r3, [sp, #12]
 800787e:	f7fc fd80 	bl	8004382 <strncmp>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	2800      	cmp	r0, #0
 8007886:	d1e1      	bne.n	800784c <__gethex+0x1d8>
 8007888:	e7a2      	b.n	80077d0 <__gethex+0x15c>
 800788a:	4620      	mov	r0, r4
 800788c:	1ea9      	subs	r1, r5, #2
 800788e:	f7fe f9f0 	bl	8005c72 <__any_on>
 8007892:	2800      	cmp	r0, #0
 8007894:	d0c2      	beq.n	800781c <__gethex+0x1a8>
 8007896:	f04f 0903 	mov.w	r9, #3
 800789a:	e7c1      	b.n	8007820 <__gethex+0x1ac>
 800789c:	da09      	bge.n	80078b2 <__gethex+0x23e>
 800789e:	1b75      	subs	r5, r6, r5
 80078a0:	4621      	mov	r1, r4
 80078a2:	462a      	mov	r2, r5
 80078a4:	9801      	ldr	r0, [sp, #4]
 80078a6:	f7fd ffb5 	bl	8005814 <__lshift>
 80078aa:	4604      	mov	r4, r0
 80078ac:	1b7f      	subs	r7, r7, r5
 80078ae:	f100 0a14 	add.w	sl, r0, #20
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	e7b8      	b.n	800782a <__gethex+0x1b6>
 80078b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80078bc:	42bd      	cmp	r5, r7
 80078be:	dd6f      	ble.n	80079a0 <__gethex+0x32c>
 80078c0:	1bed      	subs	r5, r5, r7
 80078c2:	42ae      	cmp	r6, r5
 80078c4:	dc34      	bgt.n	8007930 <__gethex+0x2bc>
 80078c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d022      	beq.n	8007914 <__gethex+0x2a0>
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d024      	beq.n	800791c <__gethex+0x2a8>
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d115      	bne.n	8007902 <__gethex+0x28e>
 80078d6:	42ae      	cmp	r6, r5
 80078d8:	d113      	bne.n	8007902 <__gethex+0x28e>
 80078da:	2e01      	cmp	r6, #1
 80078dc:	d10b      	bne.n	80078f6 <__gethex+0x282>
 80078de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078e2:	9a02      	ldr	r2, [sp, #8]
 80078e4:	2562      	movs	r5, #98	@ 0x62
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	2301      	movs	r3, #1
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	f8ca 3000 	str.w	r3, [sl]
 80078f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078f2:	601c      	str	r4, [r3, #0]
 80078f4:	e73a      	b.n	800776c <__gethex+0xf8>
 80078f6:	4620      	mov	r0, r4
 80078f8:	1e71      	subs	r1, r6, #1
 80078fa:	f7fe f9ba 	bl	8005c72 <__any_on>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d1ed      	bne.n	80078de <__gethex+0x26a>
 8007902:	4621      	mov	r1, r4
 8007904:	9801      	ldr	r0, [sp, #4]
 8007906:	f7fd fd75 	bl	80053f4 <_Bfree>
 800790a:	2300      	movs	r3, #0
 800790c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800790e:	2550      	movs	r5, #80	@ 0x50
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e72b      	b.n	800776c <__gethex+0xf8>
 8007914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f3      	bne.n	8007902 <__gethex+0x28e>
 800791a:	e7e0      	b.n	80078de <__gethex+0x26a>
 800791c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1dd      	bne.n	80078de <__gethex+0x26a>
 8007922:	e7ee      	b.n	8007902 <__gethex+0x28e>
 8007924:	08008527 	.word	0x08008527
 8007928:	080084bd 	.word	0x080084bd
 800792c:	08008599 	.word	0x08008599
 8007930:	1e6f      	subs	r7, r5, #1
 8007932:	f1b9 0f00 	cmp.w	r9, #0
 8007936:	d130      	bne.n	800799a <__gethex+0x326>
 8007938:	b127      	cbz	r7, 8007944 <__gethex+0x2d0>
 800793a:	4639      	mov	r1, r7
 800793c:	4620      	mov	r0, r4
 800793e:	f7fe f998 	bl	8005c72 <__any_on>
 8007942:	4681      	mov	r9, r0
 8007944:	2301      	movs	r3, #1
 8007946:	4629      	mov	r1, r5
 8007948:	1b76      	subs	r6, r6, r5
 800794a:	2502      	movs	r5, #2
 800794c:	117a      	asrs	r2, r7, #5
 800794e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007952:	f007 071f 	and.w	r7, r7, #31
 8007956:	40bb      	lsls	r3, r7
 8007958:	4213      	tst	r3, r2
 800795a:	4620      	mov	r0, r4
 800795c:	bf18      	it	ne
 800795e:	f049 0902 	orrne.w	r9, r9, #2
 8007962:	f7ff fe1f 	bl	80075a4 <rshift>
 8007966:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800796a:	f1b9 0f00 	cmp.w	r9, #0
 800796e:	d047      	beq.n	8007a00 <__gethex+0x38c>
 8007970:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d015      	beq.n	80079a4 <__gethex+0x330>
 8007978:	2b03      	cmp	r3, #3
 800797a:	d017      	beq.n	80079ac <__gethex+0x338>
 800797c:	2b01      	cmp	r3, #1
 800797e:	d109      	bne.n	8007994 <__gethex+0x320>
 8007980:	f019 0f02 	tst.w	r9, #2
 8007984:	d006      	beq.n	8007994 <__gethex+0x320>
 8007986:	f8da 3000 	ldr.w	r3, [sl]
 800798a:	ea49 0903 	orr.w	r9, r9, r3
 800798e:	f019 0f01 	tst.w	r9, #1
 8007992:	d10e      	bne.n	80079b2 <__gethex+0x33e>
 8007994:	f045 0510 	orr.w	r5, r5, #16
 8007998:	e032      	b.n	8007a00 <__gethex+0x38c>
 800799a:	f04f 0901 	mov.w	r9, #1
 800799e:	e7d1      	b.n	8007944 <__gethex+0x2d0>
 80079a0:	2501      	movs	r5, #1
 80079a2:	e7e2      	b.n	800796a <__gethex+0x2f6>
 80079a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079a6:	f1c3 0301 	rsb	r3, r3, #1
 80079aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0f0      	beq.n	8007994 <__gethex+0x320>
 80079b2:	f04f 0c00 	mov.w	ip, #0
 80079b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80079ba:	f104 0314 	add.w	r3, r4, #20
 80079be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80079c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80079d0:	d01b      	beq.n	8007a0a <__gethex+0x396>
 80079d2:	3201      	adds	r2, #1
 80079d4:	6002      	str	r2, [r0, #0]
 80079d6:	2d02      	cmp	r5, #2
 80079d8:	f104 0314 	add.w	r3, r4, #20
 80079dc:	d13c      	bne.n	8007a58 <__gethex+0x3e4>
 80079de:	f8d8 2000 	ldr.w	r2, [r8]
 80079e2:	3a01      	subs	r2, #1
 80079e4:	42b2      	cmp	r2, r6
 80079e6:	d109      	bne.n	80079fc <__gethex+0x388>
 80079e8:	2201      	movs	r2, #1
 80079ea:	1171      	asrs	r1, r6, #5
 80079ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079f0:	f006 061f 	and.w	r6, r6, #31
 80079f4:	fa02 f606 	lsl.w	r6, r2, r6
 80079f8:	421e      	tst	r6, r3
 80079fa:	d13a      	bne.n	8007a72 <__gethex+0x3fe>
 80079fc:	f045 0520 	orr.w	r5, r5, #32
 8007a00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a02:	601c      	str	r4, [r3, #0]
 8007a04:	9b02      	ldr	r3, [sp, #8]
 8007a06:	601f      	str	r7, [r3, #0]
 8007a08:	e6b0      	b.n	800776c <__gethex+0xf8>
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007a10:	d8d9      	bhi.n	80079c6 <__gethex+0x352>
 8007a12:	68a3      	ldr	r3, [r4, #8]
 8007a14:	459b      	cmp	fp, r3
 8007a16:	db17      	blt.n	8007a48 <__gethex+0x3d4>
 8007a18:	6861      	ldr	r1, [r4, #4]
 8007a1a:	9801      	ldr	r0, [sp, #4]
 8007a1c:	3101      	adds	r1, #1
 8007a1e:	f7fd fca9 	bl	8005374 <_Balloc>
 8007a22:	4681      	mov	r9, r0
 8007a24:	b918      	cbnz	r0, 8007a2e <__gethex+0x3ba>
 8007a26:	4602      	mov	r2, r0
 8007a28:	2184      	movs	r1, #132	@ 0x84
 8007a2a:	4b19      	ldr	r3, [pc, #100]	@ (8007a90 <__gethex+0x41c>)
 8007a2c:	e6c5      	b.n	80077ba <__gethex+0x146>
 8007a2e:	6922      	ldr	r2, [r4, #16]
 8007a30:	f104 010c 	add.w	r1, r4, #12
 8007a34:	3202      	adds	r2, #2
 8007a36:	0092      	lsls	r2, r2, #2
 8007a38:	300c      	adds	r0, #12
 8007a3a:	f7ff fd6d 	bl	8007518 <memcpy>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	9801      	ldr	r0, [sp, #4]
 8007a42:	f7fd fcd7 	bl	80053f4 <_Bfree>
 8007a46:	464c      	mov	r4, r9
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	6122      	str	r2, [r4, #16]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a54:	615a      	str	r2, [r3, #20]
 8007a56:	e7be      	b.n	80079d6 <__gethex+0x362>
 8007a58:	6922      	ldr	r2, [r4, #16]
 8007a5a:	455a      	cmp	r2, fp
 8007a5c:	dd0b      	ble.n	8007a76 <__gethex+0x402>
 8007a5e:	2101      	movs	r1, #1
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7ff fd9f 	bl	80075a4 <rshift>
 8007a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a6a:	3701      	adds	r7, #1
 8007a6c:	42bb      	cmp	r3, r7
 8007a6e:	f6ff aee0 	blt.w	8007832 <__gethex+0x1be>
 8007a72:	2501      	movs	r5, #1
 8007a74:	e7c2      	b.n	80079fc <__gethex+0x388>
 8007a76:	f016 061f 	ands.w	r6, r6, #31
 8007a7a:	d0fa      	beq.n	8007a72 <__gethex+0x3fe>
 8007a7c:	4453      	add	r3, sl
 8007a7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a82:	f7fd fd69 	bl	8005558 <__hi0bits>
 8007a86:	f1c6 0620 	rsb	r6, r6, #32
 8007a8a:	42b0      	cmp	r0, r6
 8007a8c:	dbe7      	blt.n	8007a5e <__gethex+0x3ea>
 8007a8e:	e7f0      	b.n	8007a72 <__gethex+0x3fe>
 8007a90:	080084bd 	.word	0x080084bd

08007a94 <L_shift>:
 8007a94:	f1c2 0208 	rsb	r2, r2, #8
 8007a98:	0092      	lsls	r2, r2, #2
 8007a9a:	b570      	push	{r4, r5, r6, lr}
 8007a9c:	f1c2 0620 	rsb	r6, r2, #32
 8007aa0:	6843      	ldr	r3, [r0, #4]
 8007aa2:	6804      	ldr	r4, [r0, #0]
 8007aa4:	fa03 f506 	lsl.w	r5, r3, r6
 8007aa8:	432c      	orrs	r4, r5
 8007aaa:	40d3      	lsrs	r3, r2
 8007aac:	6004      	str	r4, [r0, #0]
 8007aae:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ab2:	4288      	cmp	r0, r1
 8007ab4:	d3f4      	bcc.n	8007aa0 <L_shift+0xc>
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}

08007ab8 <__match>:
 8007ab8:	b530      	push	{r4, r5, lr}
 8007aba:	6803      	ldr	r3, [r0, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac2:	b914      	cbnz	r4, 8007aca <__match+0x12>
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	bd30      	pop	{r4, r5, pc}
 8007aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ace:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007ad2:	2d19      	cmp	r5, #25
 8007ad4:	bf98      	it	ls
 8007ad6:	3220      	addls	r2, #32
 8007ad8:	42a2      	cmp	r2, r4
 8007ada:	d0f0      	beq.n	8007abe <__match+0x6>
 8007adc:	2000      	movs	r0, #0
 8007ade:	e7f3      	b.n	8007ac8 <__match+0x10>

08007ae0 <__hexnan>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	2500      	movs	r5, #0
 8007ae6:	680b      	ldr	r3, [r1, #0]
 8007ae8:	4682      	mov	sl, r0
 8007aea:	115e      	asrs	r6, r3, #5
 8007aec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007af0:	f013 031f 	ands.w	r3, r3, #31
 8007af4:	bf18      	it	ne
 8007af6:	3604      	addne	r6, #4
 8007af8:	1f37      	subs	r7, r6, #4
 8007afa:	4690      	mov	r8, r2
 8007afc:	46b9      	mov	r9, r7
 8007afe:	463c      	mov	r4, r7
 8007b00:	46ab      	mov	fp, r5
 8007b02:	b087      	sub	sp, #28
 8007b04:	6801      	ldr	r1, [r0, #0]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	f846 5c04 	str.w	r5, [r6, #-4]
 8007b0c:	9502      	str	r5, [sp, #8]
 8007b0e:	784a      	ldrb	r2, [r1, #1]
 8007b10:	1c4b      	adds	r3, r1, #1
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	b342      	cbz	r2, 8007b68 <__hexnan+0x88>
 8007b16:	4610      	mov	r0, r2
 8007b18:	9105      	str	r1, [sp, #20]
 8007b1a:	9204      	str	r2, [sp, #16]
 8007b1c:	f7ff fd95 	bl	800764a <__hexdig_fun>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d151      	bne.n	8007bc8 <__hexnan+0xe8>
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	9905      	ldr	r1, [sp, #20]
 8007b28:	2a20      	cmp	r2, #32
 8007b2a:	d818      	bhi.n	8007b5e <__hexnan+0x7e>
 8007b2c:	9b02      	ldr	r3, [sp, #8]
 8007b2e:	459b      	cmp	fp, r3
 8007b30:	dd13      	ble.n	8007b5a <__hexnan+0x7a>
 8007b32:	454c      	cmp	r4, r9
 8007b34:	d206      	bcs.n	8007b44 <__hexnan+0x64>
 8007b36:	2d07      	cmp	r5, #7
 8007b38:	dc04      	bgt.n	8007b44 <__hexnan+0x64>
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff ffa8 	bl	8007a94 <L_shift>
 8007b44:	4544      	cmp	r4, r8
 8007b46:	d952      	bls.n	8007bee <__hexnan+0x10e>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f1a4 0904 	sub.w	r9, r4, #4
 8007b4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b52:	461d      	mov	r5, r3
 8007b54:	464c      	mov	r4, r9
 8007b56:	f8cd b008 	str.w	fp, [sp, #8]
 8007b5a:	9903      	ldr	r1, [sp, #12]
 8007b5c:	e7d7      	b.n	8007b0e <__hexnan+0x2e>
 8007b5e:	2a29      	cmp	r2, #41	@ 0x29
 8007b60:	d157      	bne.n	8007c12 <__hexnan+0x132>
 8007b62:	3102      	adds	r1, #2
 8007b64:	f8ca 1000 	str.w	r1, [sl]
 8007b68:	f1bb 0f00 	cmp.w	fp, #0
 8007b6c:	d051      	beq.n	8007c12 <__hexnan+0x132>
 8007b6e:	454c      	cmp	r4, r9
 8007b70:	d206      	bcs.n	8007b80 <__hexnan+0xa0>
 8007b72:	2d07      	cmp	r5, #7
 8007b74:	dc04      	bgt.n	8007b80 <__hexnan+0xa0>
 8007b76:	462a      	mov	r2, r5
 8007b78:	4649      	mov	r1, r9
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff ff8a 	bl	8007a94 <L_shift>
 8007b80:	4544      	cmp	r4, r8
 8007b82:	d936      	bls.n	8007bf2 <__hexnan+0x112>
 8007b84:	4623      	mov	r3, r4
 8007b86:	f1a8 0204 	sub.w	r2, r8, #4
 8007b8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b8e:	429f      	cmp	r7, r3
 8007b90:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b94:	d2f9      	bcs.n	8007b8a <__hexnan+0xaa>
 8007b96:	1b3b      	subs	r3, r7, r4
 8007b98:	f023 0303 	bic.w	r3, r3, #3
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	3401      	adds	r4, #1
 8007ba0:	3e03      	subs	r6, #3
 8007ba2:	42b4      	cmp	r4, r6
 8007ba4:	bf88      	it	hi
 8007ba6:	2304      	movhi	r3, #4
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4443      	add	r3, r8
 8007bac:	f843 2b04 	str.w	r2, [r3], #4
 8007bb0:	429f      	cmp	r7, r3
 8007bb2:	d2fb      	bcs.n	8007bac <__hexnan+0xcc>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	b91b      	cbnz	r3, 8007bc0 <__hexnan+0xe0>
 8007bb8:	4547      	cmp	r7, r8
 8007bba:	d128      	bne.n	8007c0e <__hexnan+0x12e>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	2005      	movs	r0, #5
 8007bc2:	b007      	add	sp, #28
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	3501      	adds	r5, #1
 8007bca:	2d08      	cmp	r5, #8
 8007bcc:	f10b 0b01 	add.w	fp, fp, #1
 8007bd0:	dd06      	ble.n	8007be0 <__hexnan+0x100>
 8007bd2:	4544      	cmp	r4, r8
 8007bd4:	d9c1      	bls.n	8007b5a <__hexnan+0x7a>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2501      	movs	r5, #1
 8007bda:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bde:	3c04      	subs	r4, #4
 8007be0:	6822      	ldr	r2, [r4, #0]
 8007be2:	f000 000f 	and.w	r0, r0, #15
 8007be6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	e7b5      	b.n	8007b5a <__hexnan+0x7a>
 8007bee:	2508      	movs	r5, #8
 8007bf0:	e7b3      	b.n	8007b5a <__hexnan+0x7a>
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0dd      	beq.n	8007bb4 <__hexnan+0xd4>
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfc:	f1c3 0320 	rsb	r3, r3, #32
 8007c00:	40da      	lsrs	r2, r3
 8007c02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007c06:	4013      	ands	r3, r2
 8007c08:	f846 3c04 	str.w	r3, [r6, #-4]
 8007c0c:	e7d2      	b.n	8007bb4 <__hexnan+0xd4>
 8007c0e:	3f04      	subs	r7, #4
 8007c10:	e7d0      	b.n	8007bb4 <__hexnan+0xd4>
 8007c12:	2004      	movs	r0, #4
 8007c14:	e7d5      	b.n	8007bc2 <__hexnan+0xe2>

08007c16 <__ascii_mbtowc>:
 8007c16:	b082      	sub	sp, #8
 8007c18:	b901      	cbnz	r1, 8007c1c <__ascii_mbtowc+0x6>
 8007c1a:	a901      	add	r1, sp, #4
 8007c1c:	b142      	cbz	r2, 8007c30 <__ascii_mbtowc+0x1a>
 8007c1e:	b14b      	cbz	r3, 8007c34 <__ascii_mbtowc+0x1e>
 8007c20:	7813      	ldrb	r3, [r2, #0]
 8007c22:	600b      	str	r3, [r1, #0]
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	1e10      	subs	r0, r2, #0
 8007c28:	bf18      	it	ne
 8007c2a:	2001      	movne	r0, #1
 8007c2c:	b002      	add	sp, #8
 8007c2e:	4770      	bx	lr
 8007c30:	4610      	mov	r0, r2
 8007c32:	e7fb      	b.n	8007c2c <__ascii_mbtowc+0x16>
 8007c34:	f06f 0001 	mvn.w	r0, #1
 8007c38:	e7f8      	b.n	8007c2c <__ascii_mbtowc+0x16>

08007c3a <_realloc_r>:
 8007c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3e:	4607      	mov	r7, r0
 8007c40:	4614      	mov	r4, r2
 8007c42:	460d      	mov	r5, r1
 8007c44:	b921      	cbnz	r1, 8007c50 <_realloc_r+0x16>
 8007c46:	4611      	mov	r1, r2
 8007c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4c:	f7fd bb06 	b.w	800525c <_malloc_r>
 8007c50:	b92a      	cbnz	r2, 8007c5e <_realloc_r+0x24>
 8007c52:	f7fd fa91 	bl	8005178 <_free_r>
 8007c56:	4625      	mov	r5, r4
 8007c58:	4628      	mov	r0, r5
 8007c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5e:	f000 f8b2 	bl	8007dc6 <_malloc_usable_size_r>
 8007c62:	4284      	cmp	r4, r0
 8007c64:	4606      	mov	r6, r0
 8007c66:	d802      	bhi.n	8007c6e <_realloc_r+0x34>
 8007c68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c6c:	d8f4      	bhi.n	8007c58 <_realloc_r+0x1e>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7fd faf3 	bl	800525c <_malloc_r>
 8007c76:	4680      	mov	r8, r0
 8007c78:	b908      	cbnz	r0, 8007c7e <_realloc_r+0x44>
 8007c7a:	4645      	mov	r5, r8
 8007c7c:	e7ec      	b.n	8007c58 <_realloc_r+0x1e>
 8007c7e:	42b4      	cmp	r4, r6
 8007c80:	4622      	mov	r2, r4
 8007c82:	4629      	mov	r1, r5
 8007c84:	bf28      	it	cs
 8007c86:	4632      	movcs	r2, r6
 8007c88:	f7ff fc46 	bl	8007518 <memcpy>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f7fd fa72 	bl	8005178 <_free_r>
 8007c94:	e7f1      	b.n	8007c7a <_realloc_r+0x40>
	...

08007c98 <_strtoul_l.isra.0>:
 8007c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c9c:	4686      	mov	lr, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	4e33      	ldr	r6, [pc, #204]	@ (8007d70 <_strtoul_l.isra.0+0xd8>)
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ca8:	5d37      	ldrb	r7, [r6, r4]
 8007caa:	f017 0708 	ands.w	r7, r7, #8
 8007cae:	d1f8      	bne.n	8007ca2 <_strtoul_l.isra.0+0xa>
 8007cb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8007cb2:	d110      	bne.n	8007cd6 <_strtoul_l.isra.0+0x3e>
 8007cb4:	2701      	movs	r7, #1
 8007cb6:	782c      	ldrb	r4, [r5, #0]
 8007cb8:	1c85      	adds	r5, r0, #2
 8007cba:	f033 0010 	bics.w	r0, r3, #16
 8007cbe:	d115      	bne.n	8007cec <_strtoul_l.isra.0+0x54>
 8007cc0:	2c30      	cmp	r4, #48	@ 0x30
 8007cc2:	d10d      	bne.n	8007ce0 <_strtoul_l.isra.0+0x48>
 8007cc4:	7828      	ldrb	r0, [r5, #0]
 8007cc6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007cca:	2858      	cmp	r0, #88	@ 0x58
 8007ccc:	d108      	bne.n	8007ce0 <_strtoul_l.isra.0+0x48>
 8007cce:	786c      	ldrb	r4, [r5, #1]
 8007cd0:	3502      	adds	r5, #2
 8007cd2:	2310      	movs	r3, #16
 8007cd4:	e00a      	b.n	8007cec <_strtoul_l.isra.0+0x54>
 8007cd6:	2c2b      	cmp	r4, #43	@ 0x2b
 8007cd8:	bf04      	itt	eq
 8007cda:	782c      	ldrbeq	r4, [r5, #0]
 8007cdc:	1c85      	addeq	r5, r0, #2
 8007cde:	e7ec      	b.n	8007cba <_strtoul_l.isra.0+0x22>
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1f6      	bne.n	8007cd2 <_strtoul_l.isra.0+0x3a>
 8007ce4:	2c30      	cmp	r4, #48	@ 0x30
 8007ce6:	bf14      	ite	ne
 8007ce8:	230a      	movne	r3, #10
 8007cea:	2308      	moveq	r3, #8
 8007cec:	f04f 38ff 	mov.w	r8, #4294967295
 8007cf0:	fbb8 f8f3 	udiv	r8, r8, r3
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	fb03 f908 	mul.w	r9, r3, r8
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	ea6f 0909 	mvn.w	r9, r9
 8007d00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007d04:	f1bc 0f09 	cmp.w	ip, #9
 8007d08:	d810      	bhi.n	8007d2c <_strtoul_l.isra.0+0x94>
 8007d0a:	4664      	mov	r4, ip
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	dd1e      	ble.n	8007d4e <_strtoul_l.isra.0+0xb6>
 8007d10:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007d14:	d007      	beq.n	8007d26 <_strtoul_l.isra.0+0x8e>
 8007d16:	4580      	cmp	r8, r0
 8007d18:	d316      	bcc.n	8007d48 <_strtoul_l.isra.0+0xb0>
 8007d1a:	d101      	bne.n	8007d20 <_strtoul_l.isra.0+0x88>
 8007d1c:	45a1      	cmp	r9, r4
 8007d1e:	db13      	blt.n	8007d48 <_strtoul_l.isra.0+0xb0>
 8007d20:	2601      	movs	r6, #1
 8007d22:	fb00 4003 	mla	r0, r0, r3, r4
 8007d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d2a:	e7e9      	b.n	8007d00 <_strtoul_l.isra.0+0x68>
 8007d2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007d30:	f1bc 0f19 	cmp.w	ip, #25
 8007d34:	d801      	bhi.n	8007d3a <_strtoul_l.isra.0+0xa2>
 8007d36:	3c37      	subs	r4, #55	@ 0x37
 8007d38:	e7e8      	b.n	8007d0c <_strtoul_l.isra.0+0x74>
 8007d3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007d3e:	f1bc 0f19 	cmp.w	ip, #25
 8007d42:	d804      	bhi.n	8007d4e <_strtoul_l.isra.0+0xb6>
 8007d44:	3c57      	subs	r4, #87	@ 0x57
 8007d46:	e7e1      	b.n	8007d0c <_strtoul_l.isra.0+0x74>
 8007d48:	f04f 36ff 	mov.w	r6, #4294967295
 8007d4c:	e7eb      	b.n	8007d26 <_strtoul_l.isra.0+0x8e>
 8007d4e:	1c73      	adds	r3, r6, #1
 8007d50:	d106      	bne.n	8007d60 <_strtoul_l.isra.0+0xc8>
 8007d52:	2322      	movs	r3, #34	@ 0x22
 8007d54:	4630      	mov	r0, r6
 8007d56:	f8ce 3000 	str.w	r3, [lr]
 8007d5a:	b932      	cbnz	r2, 8007d6a <_strtoul_l.isra.0+0xd2>
 8007d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d60:	b107      	cbz	r7, 8007d64 <_strtoul_l.isra.0+0xcc>
 8007d62:	4240      	negs	r0, r0
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	d0f9      	beq.n	8007d5c <_strtoul_l.isra.0+0xc4>
 8007d68:	b106      	cbz	r6, 8007d6c <_strtoul_l.isra.0+0xd4>
 8007d6a:	1e69      	subs	r1, r5, #1
 8007d6c:	6011      	str	r1, [r2, #0]
 8007d6e:	e7f5      	b.n	8007d5c <_strtoul_l.isra.0+0xc4>
 8007d70:	08008749 	.word	0x08008749

08007d74 <_strtoul_r>:
 8007d74:	f7ff bf90 	b.w	8007c98 <_strtoul_l.isra.0>

08007d78 <__ascii_wctomb>:
 8007d78:	4603      	mov	r3, r0
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	b141      	cbz	r1, 8007d90 <__ascii_wctomb+0x18>
 8007d7e:	2aff      	cmp	r2, #255	@ 0xff
 8007d80:	d904      	bls.n	8007d8c <__ascii_wctomb+0x14>
 8007d82:	228a      	movs	r2, #138	@ 0x8a
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	4770      	bx	lr
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	700a      	strb	r2, [r1, #0]
 8007d90:	4770      	bx	lr
	...

08007d94 <fiprintf>:
 8007d94:	b40e      	push	{r1, r2, r3}
 8007d96:	b503      	push	{r0, r1, lr}
 8007d98:	4601      	mov	r1, r0
 8007d9a:	ab03      	add	r3, sp, #12
 8007d9c:	4805      	ldr	r0, [pc, #20]	@ (8007db4 <fiprintf+0x20>)
 8007d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da2:	6800      	ldr	r0, [r0, #0]
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	f000 f83d 	bl	8007e24 <_vfiprintf_r>
 8007daa:	b002      	add	sp, #8
 8007dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db0:	b003      	add	sp, #12
 8007db2:	4770      	bx	lr
 8007db4:	20000018 	.word	0x20000018

08007db8 <abort>:
 8007db8:	2006      	movs	r0, #6
 8007dba:	b508      	push	{r3, lr}
 8007dbc:	f000 fa06 	bl	80081cc <raise>
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f7f9 fcf0 	bl	80017a6 <_exit>

08007dc6 <_malloc_usable_size_r>:
 8007dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dca:	1f18      	subs	r0, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bfbc      	itt	lt
 8007dd0:	580b      	ldrlt	r3, [r1, r0]
 8007dd2:	18c0      	addlt	r0, r0, r3
 8007dd4:	4770      	bx	lr

08007dd6 <__sfputc_r>:
 8007dd6:	6893      	ldr	r3, [r2, #8]
 8007dd8:	b410      	push	{r4}
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	6093      	str	r3, [r2, #8]
 8007de0:	da07      	bge.n	8007df2 <__sfputc_r+0x1c>
 8007de2:	6994      	ldr	r4, [r2, #24]
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	db01      	blt.n	8007dec <__sfputc_r+0x16>
 8007de8:	290a      	cmp	r1, #10
 8007dea:	d102      	bne.n	8007df2 <__sfputc_r+0x1c>
 8007dec:	bc10      	pop	{r4}
 8007dee:	f000 b931 	b.w	8008054 <__swbuf_r>
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	1c58      	adds	r0, r3, #1
 8007df6:	6010      	str	r0, [r2, #0]
 8007df8:	7019      	strb	r1, [r3, #0]
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	bc10      	pop	{r4}
 8007dfe:	4770      	bx	lr

08007e00 <__sfputs_r>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	4614      	mov	r4, r2
 8007e08:	18d5      	adds	r5, r2, r3
 8007e0a:	42ac      	cmp	r4, r5
 8007e0c:	d101      	bne.n	8007e12 <__sfputs_r+0x12>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e007      	b.n	8007e22 <__sfputs_r+0x22>
 8007e12:	463a      	mov	r2, r7
 8007e14:	4630      	mov	r0, r6
 8007e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1a:	f7ff ffdc 	bl	8007dd6 <__sfputc_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d1f3      	bne.n	8007e0a <__sfputs_r+0xa>
 8007e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e24 <_vfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	460d      	mov	r5, r1
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	4698      	mov	r8, r3
 8007e2e:	4606      	mov	r6, r0
 8007e30:	b09d      	sub	sp, #116	@ 0x74
 8007e32:	b118      	cbz	r0, 8007e3c <_vfiprintf_r+0x18>
 8007e34:	6a03      	ldr	r3, [r0, #32]
 8007e36:	b90b      	cbnz	r3, 8007e3c <_vfiprintf_r+0x18>
 8007e38:	f7fc f9d2 	bl	80041e0 <__sinit>
 8007e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e3e:	07d9      	lsls	r1, r3, #31
 8007e40:	d405      	bmi.n	8007e4e <_vfiprintf_r+0x2a>
 8007e42:	89ab      	ldrh	r3, [r5, #12]
 8007e44:	059a      	lsls	r2, r3, #22
 8007e46:	d402      	bmi.n	8007e4e <_vfiprintf_r+0x2a>
 8007e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e4a:	f7fc fb22 	bl	8004492 <__retarget_lock_acquire_recursive>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	071b      	lsls	r3, r3, #28
 8007e52:	d501      	bpl.n	8007e58 <_vfiprintf_r+0x34>
 8007e54:	692b      	ldr	r3, [r5, #16]
 8007e56:	b99b      	cbnz	r3, 8007e80 <_vfiprintf_r+0x5c>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 f938 	bl	80080d0 <__swsetup_r>
 8007e60:	b170      	cbz	r0, 8007e80 <_vfiprintf_r+0x5c>
 8007e62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e64:	07dc      	lsls	r4, r3, #31
 8007e66:	d504      	bpl.n	8007e72 <_vfiprintf_r+0x4e>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	b01d      	add	sp, #116	@ 0x74
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	0598      	lsls	r0, r3, #22
 8007e76:	d4f7      	bmi.n	8007e68 <_vfiprintf_r+0x44>
 8007e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e7a:	f7fc fb0b 	bl	8004494 <__retarget_lock_release_recursive>
 8007e7e:	e7f3      	b.n	8007e68 <_vfiprintf_r+0x44>
 8007e80:	2300      	movs	r3, #0
 8007e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e84:	2320      	movs	r3, #32
 8007e86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e8a:	2330      	movs	r3, #48	@ 0x30
 8007e8c:	f04f 0901 	mov.w	r9, #1
 8007e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008040 <_vfiprintf_r+0x21c>
 8007e98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	469a      	mov	sl, r3
 8007ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea4:	b10a      	cbz	r2, 8007eaa <_vfiprintf_r+0x86>
 8007ea6:	2a25      	cmp	r2, #37	@ 0x25
 8007ea8:	d1f9      	bne.n	8007e9e <_vfiprintf_r+0x7a>
 8007eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8007eae:	d00b      	beq.n	8007ec8 <_vfiprintf_r+0xa4>
 8007eb0:	465b      	mov	r3, fp
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f7ff ffa2 	bl	8007e00 <__sfputs_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	f000 80a7 	beq.w	8008010 <_vfiprintf_r+0x1ec>
 8007ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ec4:	445a      	add	r2, fp
 8007ec6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 809f 	beq.w	8008010 <_vfiprintf_r+0x1ec>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007edc:	f10a 0a01 	add.w	sl, sl, #1
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ee8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007eea:	4654      	mov	r4, sl
 8007eec:	2205      	movs	r2, #5
 8007eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef2:	4853      	ldr	r0, [pc, #332]	@ (8008040 <_vfiprintf_r+0x21c>)
 8007ef4:	f7fc facf 	bl	8004496 <memchr>
 8007ef8:	9a04      	ldr	r2, [sp, #16]
 8007efa:	b9d8      	cbnz	r0, 8007f34 <_vfiprintf_r+0x110>
 8007efc:	06d1      	lsls	r1, r2, #27
 8007efe:	bf44      	itt	mi
 8007f00:	2320      	movmi	r3, #32
 8007f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f06:	0713      	lsls	r3, r2, #28
 8007f08:	bf44      	itt	mi
 8007f0a:	232b      	movmi	r3, #43	@ 0x2b
 8007f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f10:	f89a 3000 	ldrb.w	r3, [sl]
 8007f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f16:	d015      	beq.n	8007f44 <_vfiprintf_r+0x120>
 8007f18:	4654      	mov	r4, sl
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	f04f 0c0a 	mov.w	ip, #10
 8007f20:	9a07      	ldr	r2, [sp, #28]
 8007f22:	4621      	mov	r1, r4
 8007f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f28:	3b30      	subs	r3, #48	@ 0x30
 8007f2a:	2b09      	cmp	r3, #9
 8007f2c:	d94b      	bls.n	8007fc6 <_vfiprintf_r+0x1a2>
 8007f2e:	b1b0      	cbz	r0, 8007f5e <_vfiprintf_r+0x13a>
 8007f30:	9207      	str	r2, [sp, #28]
 8007f32:	e014      	b.n	8007f5e <_vfiprintf_r+0x13a>
 8007f34:	eba0 0308 	sub.w	r3, r0, r8
 8007f38:	fa09 f303 	lsl.w	r3, r9, r3
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	46a2      	mov	sl, r4
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	e7d2      	b.n	8007eea <_vfiprintf_r+0xc6>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	1d19      	adds	r1, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	9103      	str	r1, [sp, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfbb      	ittet	lt
 8007f50:	425b      	neglt	r3, r3
 8007f52:	f042 0202 	orrlt.w	r2, r2, #2
 8007f56:	9307      	strge	r3, [sp, #28]
 8007f58:	9307      	strlt	r3, [sp, #28]
 8007f5a:	bfb8      	it	lt
 8007f5c:	9204      	strlt	r2, [sp, #16]
 8007f5e:	7823      	ldrb	r3, [r4, #0]
 8007f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f62:	d10a      	bne.n	8007f7a <_vfiprintf_r+0x156>
 8007f64:	7863      	ldrb	r3, [r4, #1]
 8007f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f68:	d132      	bne.n	8007fd0 <_vfiprintf_r+0x1ac>
 8007f6a:	9b03      	ldr	r3, [sp, #12]
 8007f6c:	3402      	adds	r4, #2
 8007f6e:	1d1a      	adds	r2, r3, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	9203      	str	r2, [sp, #12]
 8007f74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008044 <_vfiprintf_r+0x220>
 8007f7e:	2203      	movs	r2, #3
 8007f80:	4650      	mov	r0, sl
 8007f82:	7821      	ldrb	r1, [r4, #0]
 8007f84:	f7fc fa87 	bl	8004496 <memchr>
 8007f88:	b138      	cbz	r0, 8007f9a <_vfiprintf_r+0x176>
 8007f8a:	2240      	movs	r2, #64	@ 0x40
 8007f8c:	9b04      	ldr	r3, [sp, #16]
 8007f8e:	eba0 000a 	sub.w	r0, r0, sl
 8007f92:	4082      	lsls	r2, r0
 8007f94:	4313      	orrs	r3, r2
 8007f96:	3401      	adds	r4, #1
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9e:	2206      	movs	r2, #6
 8007fa0:	4829      	ldr	r0, [pc, #164]	@ (8008048 <_vfiprintf_r+0x224>)
 8007fa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fa6:	f7fc fa76 	bl	8004496 <memchr>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d03f      	beq.n	800802e <_vfiprintf_r+0x20a>
 8007fae:	4b27      	ldr	r3, [pc, #156]	@ (800804c <_vfiprintf_r+0x228>)
 8007fb0:	bb1b      	cbnz	r3, 8007ffa <_vfiprintf_r+0x1d6>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	3307      	adds	r3, #7
 8007fb6:	f023 0307 	bic.w	r3, r3, #7
 8007fba:	3308      	adds	r3, #8
 8007fbc:	9303      	str	r3, [sp, #12]
 8007fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc0:	443b      	add	r3, r7
 8007fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc4:	e76a      	b.n	8007e9c <_vfiprintf_r+0x78>
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	2001      	movs	r0, #1
 8007fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fce:	e7a8      	b.n	8007f22 <_vfiprintf_r+0xfe>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f04f 0c0a 	mov.w	ip, #10
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	3401      	adds	r4, #1
 8007fda:	9305      	str	r3, [sp, #20]
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe2:	3a30      	subs	r2, #48	@ 0x30
 8007fe4:	2a09      	cmp	r2, #9
 8007fe6:	d903      	bls.n	8007ff0 <_vfiprintf_r+0x1cc>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0c6      	beq.n	8007f7a <_vfiprintf_r+0x156>
 8007fec:	9105      	str	r1, [sp, #20]
 8007fee:	e7c4      	b.n	8007f7a <_vfiprintf_r+0x156>
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff8:	e7f0      	b.n	8007fdc <_vfiprintf_r+0x1b8>
 8007ffa:	ab03      	add	r3, sp, #12
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	462a      	mov	r2, r5
 8008000:	4630      	mov	r0, r6
 8008002:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <_vfiprintf_r+0x22c>)
 8008004:	a904      	add	r1, sp, #16
 8008006:	f7fb fa99 	bl	800353c <_printf_float>
 800800a:	4607      	mov	r7, r0
 800800c:	1c78      	adds	r0, r7, #1
 800800e:	d1d6      	bne.n	8007fbe <_vfiprintf_r+0x19a>
 8008010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008012:	07d9      	lsls	r1, r3, #31
 8008014:	d405      	bmi.n	8008022 <_vfiprintf_r+0x1fe>
 8008016:	89ab      	ldrh	r3, [r5, #12]
 8008018:	059a      	lsls	r2, r3, #22
 800801a:	d402      	bmi.n	8008022 <_vfiprintf_r+0x1fe>
 800801c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800801e:	f7fc fa39 	bl	8004494 <__retarget_lock_release_recursive>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	065b      	lsls	r3, r3, #25
 8008026:	f53f af1f 	bmi.w	8007e68 <_vfiprintf_r+0x44>
 800802a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800802c:	e71e      	b.n	8007e6c <_vfiprintf_r+0x48>
 800802e:	ab03      	add	r3, sp, #12
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	462a      	mov	r2, r5
 8008034:	4630      	mov	r0, r6
 8008036:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <_vfiprintf_r+0x22c>)
 8008038:	a904      	add	r1, sp, #16
 800803a:	f7fb fd1d 	bl	8003a78 <_printf_i>
 800803e:	e7e4      	b.n	800800a <_vfiprintf_r+0x1e6>
 8008040:	08008529 	.word	0x08008529
 8008044:	0800852f 	.word	0x0800852f
 8008048:	08008533 	.word	0x08008533
 800804c:	0800353d 	.word	0x0800353d
 8008050:	08007e01 	.word	0x08007e01

08008054 <__swbuf_r>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	460e      	mov	r6, r1
 8008058:	4614      	mov	r4, r2
 800805a:	4605      	mov	r5, r0
 800805c:	b118      	cbz	r0, 8008066 <__swbuf_r+0x12>
 800805e:	6a03      	ldr	r3, [r0, #32]
 8008060:	b90b      	cbnz	r3, 8008066 <__swbuf_r+0x12>
 8008062:	f7fc f8bd 	bl	80041e0 <__sinit>
 8008066:	69a3      	ldr	r3, [r4, #24]
 8008068:	60a3      	str	r3, [r4, #8]
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	071a      	lsls	r2, r3, #28
 800806e:	d501      	bpl.n	8008074 <__swbuf_r+0x20>
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	b943      	cbnz	r3, 8008086 <__swbuf_r+0x32>
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f82a 	bl	80080d0 <__swsetup_r>
 800807c:	b118      	cbz	r0, 8008086 <__swbuf_r+0x32>
 800807e:	f04f 37ff 	mov.w	r7, #4294967295
 8008082:	4638      	mov	r0, r7
 8008084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	6922      	ldr	r2, [r4, #16]
 800808a:	b2f6      	uxtb	r6, r6
 800808c:	1a98      	subs	r0, r3, r2
 800808e:	6963      	ldr	r3, [r4, #20]
 8008090:	4637      	mov	r7, r6
 8008092:	4283      	cmp	r3, r0
 8008094:	dc05      	bgt.n	80080a2 <__swbuf_r+0x4e>
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f7ff f979 	bl	8007390 <_fflush_r>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d1ed      	bne.n	800807e <__swbuf_r+0x2a>
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	60a3      	str	r3, [r4, #8]
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	6022      	str	r2, [r4, #0]
 80080ae:	701e      	strb	r6, [r3, #0]
 80080b0:	6962      	ldr	r2, [r4, #20]
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d004      	beq.n	80080c2 <__swbuf_r+0x6e>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	07db      	lsls	r3, r3, #31
 80080bc:	d5e1      	bpl.n	8008082 <__swbuf_r+0x2e>
 80080be:	2e0a      	cmp	r6, #10
 80080c0:	d1df      	bne.n	8008082 <__swbuf_r+0x2e>
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7ff f963 	bl	8007390 <_fflush_r>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0d9      	beq.n	8008082 <__swbuf_r+0x2e>
 80080ce:	e7d6      	b.n	800807e <__swbuf_r+0x2a>

080080d0 <__swsetup_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4b29      	ldr	r3, [pc, #164]	@ (8008178 <__swsetup_r+0xa8>)
 80080d4:	4605      	mov	r5, r0
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	460c      	mov	r4, r1
 80080da:	b118      	cbz	r0, 80080e4 <__swsetup_r+0x14>
 80080dc:	6a03      	ldr	r3, [r0, #32]
 80080de:	b90b      	cbnz	r3, 80080e4 <__swsetup_r+0x14>
 80080e0:	f7fc f87e 	bl	80041e0 <__sinit>
 80080e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e8:	0719      	lsls	r1, r3, #28
 80080ea:	d422      	bmi.n	8008132 <__swsetup_r+0x62>
 80080ec:	06da      	lsls	r2, r3, #27
 80080ee:	d407      	bmi.n	8008100 <__swsetup_r+0x30>
 80080f0:	2209      	movs	r2, #9
 80080f2:	602a      	str	r2, [r5, #0]
 80080f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	e033      	b.n	8008168 <__swsetup_r+0x98>
 8008100:	0758      	lsls	r0, r3, #29
 8008102:	d512      	bpl.n	800812a <__swsetup_r+0x5a>
 8008104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008106:	b141      	cbz	r1, 800811a <__swsetup_r+0x4a>
 8008108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800810c:	4299      	cmp	r1, r3
 800810e:	d002      	beq.n	8008116 <__swsetup_r+0x46>
 8008110:	4628      	mov	r0, r5
 8008112:	f7fd f831 	bl	8005178 <_free_r>
 8008116:	2300      	movs	r3, #0
 8008118:	6363      	str	r3, [r4, #52]	@ 0x34
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	2300      	movs	r3, #0
 8008124:	6063      	str	r3, [r4, #4]
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f043 0308 	orr.w	r3, r3, #8
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	b94b      	cbnz	r3, 800814a <__swsetup_r+0x7a>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800813c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008140:	d003      	beq.n	800814a <__swsetup_r+0x7a>
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f000 f882 	bl	800824e <__smakebuf_r>
 800814a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814e:	f013 0201 	ands.w	r2, r3, #1
 8008152:	d00a      	beq.n	800816a <__swsetup_r+0x9a>
 8008154:	2200      	movs	r2, #0
 8008156:	60a2      	str	r2, [r4, #8]
 8008158:	6962      	ldr	r2, [r4, #20]
 800815a:	4252      	negs	r2, r2
 800815c:	61a2      	str	r2, [r4, #24]
 800815e:	6922      	ldr	r2, [r4, #16]
 8008160:	b942      	cbnz	r2, 8008174 <__swsetup_r+0xa4>
 8008162:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008166:	d1c5      	bne.n	80080f4 <__swsetup_r+0x24>
 8008168:	bd38      	pop	{r3, r4, r5, pc}
 800816a:	0799      	lsls	r1, r3, #30
 800816c:	bf58      	it	pl
 800816e:	6962      	ldrpl	r2, [r4, #20]
 8008170:	60a2      	str	r2, [r4, #8]
 8008172:	e7f4      	b.n	800815e <__swsetup_r+0x8e>
 8008174:	2000      	movs	r0, #0
 8008176:	e7f7      	b.n	8008168 <__swsetup_r+0x98>
 8008178:	20000018 	.word	0x20000018

0800817c <_raise_r>:
 800817c:	291f      	cmp	r1, #31
 800817e:	b538      	push	{r3, r4, r5, lr}
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	d904      	bls.n	8008190 <_raise_r+0x14>
 8008186:	2316      	movs	r3, #22
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	f04f 30ff 	mov.w	r0, #4294967295
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008192:	b112      	cbz	r2, 800819a <_raise_r+0x1e>
 8008194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008198:	b94b      	cbnz	r3, 80081ae <_raise_r+0x32>
 800819a:	4628      	mov	r0, r5
 800819c:	f000 f830 	bl	8008200 <_getpid_r>
 80081a0:	4622      	mov	r2, r4
 80081a2:	4601      	mov	r1, r0
 80081a4:	4628      	mov	r0, r5
 80081a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081aa:	f000 b817 	b.w	80081dc <_kill_r>
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d00a      	beq.n	80081c8 <_raise_r+0x4c>
 80081b2:	1c59      	adds	r1, r3, #1
 80081b4:	d103      	bne.n	80081be <_raise_r+0x42>
 80081b6:	2316      	movs	r3, #22
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	2001      	movs	r0, #1
 80081bc:	e7e7      	b.n	800818e <_raise_r+0x12>
 80081be:	2100      	movs	r1, #0
 80081c0:	4620      	mov	r0, r4
 80081c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081c6:	4798      	blx	r3
 80081c8:	2000      	movs	r0, #0
 80081ca:	e7e0      	b.n	800818e <_raise_r+0x12>

080081cc <raise>:
 80081cc:	4b02      	ldr	r3, [pc, #8]	@ (80081d8 <raise+0xc>)
 80081ce:	4601      	mov	r1, r0
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f7ff bfd3 	b.w	800817c <_raise_r>
 80081d6:	bf00      	nop
 80081d8:	20000018 	.word	0x20000018

080081dc <_kill_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	2300      	movs	r3, #0
 80081e0:	4d06      	ldr	r5, [pc, #24]	@ (80081fc <_kill_r+0x20>)
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7f9 facc 	bl	8001786 <_kill>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_kill_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_kill_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	2000045c 	.word	0x2000045c

08008200 <_getpid_r>:
 8008200:	f7f9 baba 	b.w	8001778 <_getpid>

08008204 <__swhatbuf_r>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	460c      	mov	r4, r1
 8008208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820c:	4615      	mov	r5, r2
 800820e:	2900      	cmp	r1, #0
 8008210:	461e      	mov	r6, r3
 8008212:	b096      	sub	sp, #88	@ 0x58
 8008214:	da0c      	bge.n	8008230 <__swhatbuf_r+0x2c>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	2100      	movs	r1, #0
 800821a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800821e:	bf14      	ite	ne
 8008220:	2340      	movne	r3, #64	@ 0x40
 8008222:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008226:	2000      	movs	r0, #0
 8008228:	6031      	str	r1, [r6, #0]
 800822a:	602b      	str	r3, [r5, #0]
 800822c:	b016      	add	sp, #88	@ 0x58
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	466a      	mov	r2, sp
 8008232:	f000 f849 	bl	80082c8 <_fstat_r>
 8008236:	2800      	cmp	r0, #0
 8008238:	dbed      	blt.n	8008216 <__swhatbuf_r+0x12>
 800823a:	9901      	ldr	r1, [sp, #4]
 800823c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008240:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008244:	4259      	negs	r1, r3
 8008246:	4159      	adcs	r1, r3
 8008248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800824c:	e7eb      	b.n	8008226 <__swhatbuf_r+0x22>

0800824e <__smakebuf_r>:
 800824e:	898b      	ldrh	r3, [r1, #12]
 8008250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008252:	079d      	lsls	r5, r3, #30
 8008254:	4606      	mov	r6, r0
 8008256:	460c      	mov	r4, r1
 8008258:	d507      	bpl.n	800826a <__smakebuf_r+0x1c>
 800825a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	2301      	movs	r3, #1
 8008264:	6163      	str	r3, [r4, #20]
 8008266:	b003      	add	sp, #12
 8008268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826a:	466a      	mov	r2, sp
 800826c:	ab01      	add	r3, sp, #4
 800826e:	f7ff ffc9 	bl	8008204 <__swhatbuf_r>
 8008272:	9f00      	ldr	r7, [sp, #0]
 8008274:	4605      	mov	r5, r0
 8008276:	4639      	mov	r1, r7
 8008278:	4630      	mov	r0, r6
 800827a:	f7fc ffef 	bl	800525c <_malloc_r>
 800827e:	b948      	cbnz	r0, 8008294 <__smakebuf_r+0x46>
 8008280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008284:	059a      	lsls	r2, r3, #22
 8008286:	d4ee      	bmi.n	8008266 <__smakebuf_r+0x18>
 8008288:	f023 0303 	bic.w	r3, r3, #3
 800828c:	f043 0302 	orr.w	r3, r3, #2
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	e7e2      	b.n	800825a <__smakebuf_r+0xc>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800829a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	9b01      	ldr	r3, [sp, #4]
 80082a2:	6020      	str	r0, [r4, #0]
 80082a4:	b15b      	cbz	r3, 80082be <__smakebuf_r+0x70>
 80082a6:	4630      	mov	r0, r6
 80082a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ac:	f000 f81e 	bl	80082ec <_isatty_r>
 80082b0:	b128      	cbz	r0, 80082be <__smakebuf_r+0x70>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f023 0303 	bic.w	r3, r3, #3
 80082b8:	f043 0301 	orr.w	r3, r3, #1
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	431d      	orrs	r5, r3
 80082c2:	81a5      	strh	r5, [r4, #12]
 80082c4:	e7cf      	b.n	8008266 <__smakebuf_r+0x18>
	...

080082c8 <_fstat_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	2300      	movs	r3, #0
 80082cc:	4d06      	ldr	r5, [pc, #24]	@ (80082e8 <_fstat_r+0x20>)
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	4611      	mov	r1, r2
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	f7f9 fab5 	bl	8001844 <_fstat>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	d102      	bne.n	80082e4 <_fstat_r+0x1c>
 80082de:	682b      	ldr	r3, [r5, #0]
 80082e0:	b103      	cbz	r3, 80082e4 <_fstat_r+0x1c>
 80082e2:	6023      	str	r3, [r4, #0]
 80082e4:	bd38      	pop	{r3, r4, r5, pc}
 80082e6:	bf00      	nop
 80082e8:	2000045c 	.word	0x2000045c

080082ec <_isatty_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	2300      	movs	r3, #0
 80082f0:	4d05      	ldr	r5, [pc, #20]	@ (8008308 <_isatty_r+0x1c>)
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7f9 fab3 	bl	8001862 <_isatty>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_isatty_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_isatty_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	2000045c 	.word	0x2000045c

0800830c <_init>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	bf00      	nop
 8008310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008312:	bc08      	pop	{r3}
 8008314:	469e      	mov	lr, r3
 8008316:	4770      	bx	lr

08008318 <_fini>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	bf00      	nop
 800831c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831e:	bc08      	pop	{r3}
 8008320:	469e      	mov	lr, r3
 8008322:	4770      	bx	lr
