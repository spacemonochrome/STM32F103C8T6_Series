
BluePill_SSD1306_Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c4  080075e8  080075e8  000085e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ac  080087ac  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b4  080087b4  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b4  080087b4  000097b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087b8  080087b8  000097b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080087bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001dc  08008998  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08008998  0000a7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073ce  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001860  00000000  00000000  000115d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00012e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000667  00000000  00000000  000136a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e31  00000000  00000000  00013d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ade9  00000000  00000000  0002bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844d7  00000000  00000000  00036929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bae00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000366c  00000000  00000000  000bae44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000be4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080075cc 	.word	0x080075cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080075cc 	.word	0x080075cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f000 fd10 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f822 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f894 	bl	8000d0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be4:	f000 f864 	bl	8000cb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialise the display
 8000be8:	f000 f8c4 	bl	8000d74 <SSD1306_Init>
  SSD1306_GotoXY (10,10); // goto 10, 10
 8000bec:	210a      	movs	r1, #10
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f000 fa28 	bl	8001044 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4908      	ldr	r1, [pc, #32]	@ (8000c18 <main+0x44>)
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <main+0x48>)
 8000bfa:	f000 fab7 	bl	800116c <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000bfe:	211e      	movs	r1, #30
 8000c00:	200a      	movs	r0, #10
 8000c02:	f000 fa1f 	bl	8001044 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	4903      	ldr	r1, [pc, #12]	@ (8000c18 <main+0x44>)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <main+0x4c>)
 8000c0c:	f000 faae 	bl	800116c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000c10:	f000 f974 	bl	8000efc <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <main+0x40>
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	080075e8 	.word	0x080075e8
 8000c20:	080075f0 	.word	0x080075f0

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b090      	sub	sp, #64	@ 0x40
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	2228      	movs	r2, #40	@ 0x28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 f8fd 	bl	8003e32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c62:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fd59 	bl	8002724 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c78:	f000 f876 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2102      	movs	r1, #2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 ffc6 	bl	8002c28 <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ca2:	f000 f861 	bl	8000d68 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3740      	adds	r7, #64	@ 0x40
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cb6:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <MX_I2C1_Init+0x54>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cbc:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <MX_I2C1_Init+0x58>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_I2C1_Init+0x50>)
 8000cee:	f000 ff4f 	bl	8001b90 <HAL_I2C_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cf8:	f000 f836 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001f8 	.word	0x200001f8
 8000d04:	40005400 	.word	0x40005400
 8000d08:	00061a80 	.word	0x00061a80

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a13      	ldr	r2, [pc, #76]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0320 	and.w	r3, r3, #32
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <MX_GPIO_Init+0x58>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d7a:	f000 fa1d 	bl	80011b8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d7e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000d82:	2201      	movs	r2, #1
 8000d84:	2178      	movs	r1, #120	@ 0x78
 8000d86:	485b      	ldr	r0, [pc, #364]	@ (8000ef4 <SSD1306_Init+0x180>)
 8000d88:	f001 f944 	bl	8002014 <HAL_I2C_IsDeviceReady>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e0a9      	b.n	8000eea <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000d96:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000d9a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d9c:	e002      	b.n	8000da4 <SSD1306_Init+0x30>
		p--;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f9      	bne.n	8000d9e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000daa:	22ae      	movs	r2, #174	@ 0xae
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f000 fa7c 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000db4:	2220      	movs	r2, #32
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	@ 0x78
 8000dba:	f000 fa77 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	@ 0x78
 8000dc4:	f000 fa72 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000dc8:	22b0      	movs	r2, #176	@ 0xb0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2078      	movs	r0, #120	@ 0x78
 8000dce:	f000 fa6d 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000dd2:	22c8      	movs	r2, #200	@ 0xc8
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	@ 0x78
 8000dd8:	f000 fa68 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	@ 0x78
 8000de2:	f000 fa63 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000de6:	2210      	movs	r2, #16
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 fa5e 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000df0:	2240      	movs	r2, #64	@ 0x40
 8000df2:	2100      	movs	r1, #0
 8000df4:	2078      	movs	r0, #120	@ 0x78
 8000df6:	f000 fa59 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000dfa:	2281      	movs	r2, #129	@ 0x81
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	@ 0x78
 8000e00:	f000 fa54 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e04:	22ff      	movs	r2, #255	@ 0xff
 8000e06:	2100      	movs	r1, #0
 8000e08:	2078      	movs	r0, #120	@ 0x78
 8000e0a:	f000 fa4f 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e0e:	22a1      	movs	r2, #161	@ 0xa1
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	@ 0x78
 8000e14:	f000 fa4a 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e18:	22a6      	movs	r2, #166	@ 0xa6
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2078      	movs	r0, #120	@ 0x78
 8000e1e:	f000 fa45 	bl	80012ac <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e22:	22a8      	movs	r2, #168	@ 0xa8
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	@ 0x78
 8000e28:	f000 fa40 	bl	80012ac <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000e2c:	223f      	movs	r2, #63	@ 0x3f
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2078      	movs	r0, #120	@ 0x78
 8000e32:	f000 fa3b 	bl	80012ac <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e36:	22a4      	movs	r2, #164	@ 0xa4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	@ 0x78
 8000e3c:	f000 fa36 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000e40:	22d3      	movs	r2, #211	@ 0xd3
 8000e42:	2100      	movs	r1, #0
 8000e44:	2078      	movs	r0, #120	@ 0x78
 8000e46:	f000 fa31 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	@ 0x78
 8000e50:	f000 fa2c 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e54:	22d5      	movs	r2, #213	@ 0xd5
 8000e56:	2100      	movs	r1, #0
 8000e58:	2078      	movs	r0, #120	@ 0x78
 8000e5a:	f000 fa27 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000e5e:	22f0      	movs	r2, #240	@ 0xf0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 fa22 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000e68:	22d9      	movs	r2, #217	@ 0xd9
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2078      	movs	r0, #120	@ 0x78
 8000e6e:	f000 fa1d 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000e72:	2222      	movs	r2, #34	@ 0x22
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 fa18 	bl	80012ac <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e7c:	22da      	movs	r2, #218	@ 0xda
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2078      	movs	r0, #120	@ 0x78
 8000e82:	f000 fa13 	bl	80012ac <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000e86:	2212      	movs	r2, #18
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	@ 0x78
 8000e8c:	f000 fa0e 	bl	80012ac <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e90:	22db      	movs	r2, #219	@ 0xdb
 8000e92:	2100      	movs	r1, #0
 8000e94:	2078      	movs	r0, #120	@ 0x78
 8000e96:	f000 fa09 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2078      	movs	r0, #120	@ 0x78
 8000ea0:	f000 fa04 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ea4:	228d      	movs	r2, #141	@ 0x8d
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2078      	movs	r0, #120	@ 0x78
 8000eaa:	f000 f9ff 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000eae:	2214      	movs	r2, #20
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	@ 0x78
 8000eb4:	f000 f9fa 	bl	80012ac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000eb8:	22af      	movs	r2, #175	@ 0xaf
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2078      	movs	r0, #120	@ 0x78
 8000ebe:	f000 f9f5 	bl	80012ac <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	@ 0x78
 8000ec8:	f000 f9f0 	bl	80012ac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f843 	bl	8000f58 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000ed2:	f000 f813 	bl	8000efc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <SSD1306_Init+0x184>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <SSD1306_Init+0x184>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SSD1306_Init+0x184>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200001f8 	.word	0x200001f8
 8000ef8:	2000064c 	.word	0x2000064c

08000efc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	e01d      	b.n	8000f44 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	3b50      	subs	r3, #80	@ 0x50
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	2078      	movs	r0, #120	@ 0x78
 8000f14:	f000 f9ca 	bl	80012ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2078      	movs	r0, #120	@ 0x78
 8000f1e:	f000 f9c5 	bl	80012ac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000f22:	2210      	movs	r2, #16
 8000f24:	2100      	movs	r1, #0
 8000f26:	2078      	movs	r0, #120	@ 0x78
 8000f28:	f000 f9c0 	bl	80012ac <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	01db      	lsls	r3, r3, #7
 8000f30:	4a08      	ldr	r2, [pc, #32]	@ (8000f54 <SSD1306_UpdateScreen+0x58>)
 8000f32:	441a      	add	r2, r3
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	2140      	movs	r1, #64	@ 0x40
 8000f38:	2078      	movs	r0, #120	@ 0x78
 8000f3a:	f000 f951 	bl	80011e0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	3301      	adds	r3, #1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	d9de      	bls.n	8000f08 <SSD1306_UpdateScreen+0xc>
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000024c 	.word	0x2000024c

08000f58 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <SSD1306_Fill+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <SSD1306_Fill+0x16>
 8000f6c:	23ff      	movs	r3, #255	@ 0xff
 8000f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f72:	4619      	mov	r1, r3
 8000f74:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <SSD1306_Fill+0x2c>)
 8000f76:	f002 ff5c 	bl	8003e32 <memset>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000024c 	.word	0x2000024c

08000f88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	70fb      	strb	r3, [r7, #3]
	if (
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f9e:	d848      	bhi.n	8001032 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fa4:	d845      	bhi.n	8001032 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <SSD1306_DrawPixel+0xb4>)
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2301      	moveq	r3, #1
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d11a      	bne.n	8000ff8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fc2:	88fa      	ldrh	r2, [r7, #6]
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	01db      	lsls	r3, r3, #7
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <SSD1306_DrawPixel+0xb8>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b259      	sxtb	r1, r3
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	4603      	mov	r3, r0
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2c9      	uxtb	r1, r1
 8000ff2:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <SSD1306_DrawPixel+0xb8>)
 8000ff4:	54d1      	strb	r1, [r2, r3]
 8000ff6:	e01d      	b.n	8001034 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	08db      	lsrs	r3, r3, #3
 8000ffe:	b298      	uxth	r0, r3
 8001000:	4603      	mov	r3, r0
 8001002:	01db      	lsls	r3, r3, #7
 8001004:	4413      	add	r3, r2
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <SSD1306_DrawPixel+0xb8>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	b25a      	sxtb	r2, r3
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	b25b      	sxtb	r3, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	b25b      	sxtb	r3, r3
 800101e:	4013      	ands	r3, r2
 8001020:	b259      	sxtb	r1, r3
 8001022:	88fa      	ldrh	r2, [r7, #6]
 8001024:	4603      	mov	r3, r0
 8001026:	01db      	lsls	r3, r3, #7
 8001028:	4413      	add	r3, r2
 800102a:	b2c9      	uxtb	r1, r1
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <SSD1306_DrawPixel+0xb8>)
 800102e:	54d1      	strb	r1, [r2, r3]
 8001030:	e000      	b.n	8001034 <SSD1306_DrawPixel+0xac>
		return;
 8001032:	bf00      	nop
	}
}
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	2000064c 	.word	0x2000064c
 8001040:	2000024c 	.word	0x2000024c

08001044 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	80fb      	strh	r3, [r7, #6]
 8001050:	4613      	mov	r3, r2
 8001052:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001054:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SSD1306_GotoXY+0x28>)
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800105a:	4a04      	ldr	r2, [pc, #16]	@ (800106c <SSD1306_GotoXY+0x28>)
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	8053      	strh	r3, [r2, #2]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000064c 	.word	0x2000064c

08001070 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <SSD1306_Putc+0xf8>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
	if (
 800108c:	2b7f      	cmp	r3, #127	@ 0x7f
 800108e:	dc07      	bgt.n	80010a0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001090:	4b35      	ldr	r3, [pc, #212]	@ (8001168 <SSD1306_Putc+0xf8>)
 8001092:	885b      	ldrh	r3, [r3, #2]
 8001094:	461a      	mov	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	785b      	ldrb	r3, [r3, #1]
 800109a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800109c:	2b3f      	cmp	r3, #63	@ 0x3f
 800109e:	dd01      	ble.n	80010a4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e05d      	b.n	8001160 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e04b      	b.n	8001142 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	3b20      	subs	r3, #32
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	7849      	ldrb	r1, [r1, #1]
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	440b      	add	r3, r1
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	e030      	b.n	8001130 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d010      	beq.n	8001100 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <SSD1306_Putc+0xf8>)
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b298      	uxth	r0, r3
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <SSD1306_Putc+0xf8>)
 80010ec:	885a      	ldrh	r2, [r3, #2]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4413      	add	r3, r2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	79ba      	ldrb	r2, [r7, #6]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff ff45 	bl	8000f88 <SSD1306_DrawPixel>
 80010fe:	e014      	b.n	800112a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <SSD1306_Putc+0xf8>)
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b298      	uxth	r0, r3
 800110c:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <SSD1306_Putc+0xf8>)
 800110e:	885a      	ldrh	r2, [r3, #2]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b299      	uxth	r1, r3
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	f7ff ff2f 	bl	8000f88 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	3301      	adds	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4293      	cmp	r3, r2
 800113a:	d3c8      	bcc.n	80010ce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	461a      	mov	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4293      	cmp	r3, r2
 800114c:	d3ad      	bcc.n	80010aa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SSD1306_Putc+0xf8>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <SSD1306_Putc+0xf8>)
 800115c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800115e:	79fb      	ldrb	r3, [r7, #7]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000064c 	.word	0x2000064c

0800116c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	4613      	mov	r3, r2
 8001178:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800117a:	e012      	b.n	80011a2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff73 	bl	8001070 <SSD1306_Putc>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d002      	beq.n	800119c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	e008      	b.n	80011ae <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1e8      	bne.n	800117c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	781b      	ldrb	r3, [r3, #0]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <ssd1306_I2C_Init+0x24>)
 80011c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011c2:	e002      	b.n	80011ca <ssd1306_I2C_Init+0x12>
		p--;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f9      	bne.n	80011c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	0003d090 	.word	0x0003d090

080011e0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b0c7      	sub	sp, #284	@ 0x11c
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80011ee:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80011f2:	600a      	str	r2, [r1, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011fa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011fe:	4622      	mov	r2, r4
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001206:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800120a:	4602      	mov	r2, r0
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001212:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001216:	460a      	mov	r2, r1
 8001218:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800121a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800121e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001222:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001226:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001234:	e015      	b.n	8001262 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001236:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800123a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800123e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	441a      	add	r2, r3
 8001246:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800124a:	3301      	adds	r3, #1
 800124c:	7811      	ldrb	r1, [r2, #0]
 800124e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001252:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001256:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001258:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800125c:	3301      	adds	r3, #1
 800125e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001262:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001266:	b29b      	uxth	r3, r3
 8001268:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800126c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001270:	8812      	ldrh	r2, [r2, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d8df      	bhi.n	8001236 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800127a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b299      	uxth	r1, r3
 8001282:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001286:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	b29b      	uxth	r3, r3
 8001290:	f107 020c 	add.w	r2, r7, #12
 8001294:	200a      	movs	r0, #10
 8001296:	9000      	str	r0, [sp, #0]
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <ssd1306_I2C_WriteMulti+0xc8>)
 800129a:	f000 fdbd 	bl	8001e18 <HAL_I2C_Master_Transmit>
}
 800129e:	bf00      	nop
 80012a0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	200001f8 	.word	0x200001f8

080012ac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	460b      	mov	r3, r1
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	4613      	mov	r3, r2
 80012bc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	b299      	uxth	r1, r3
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	230a      	movs	r3, #10
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2302      	movs	r3, #2
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <ssd1306_I2C_Write+0x38>)
 80012d6:	f000 fd9f 	bl	8001e18 <HAL_I2C_Master_Transmit>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001f8 	.word	0x200001f8

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <HAL_MspInit+0x5c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <HAL_MspInit+0x5c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_MspInit+0x60>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <HAL_MspInit+0x60>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000

0800134c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a15      	ldr	r2, [pc, #84]	@ (80013bc <HAL_I2C_MspInit+0x70>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d123      	bne.n	80013b4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <HAL_I2C_MspInit+0x74>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <HAL_I2C_MspInit+0x74>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_I2C_MspInit+0x74>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001384:	23c0      	movs	r3, #192	@ 0xc0
 8001386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <HAL_I2C_MspInit+0x78>)
 8001398:	f000 fa76 	bl	8001888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_I2C_MspInit+0x74>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <HAL_I2C_MspInit+0x74>)
 80013a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_I2C_MspInit+0x74>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40005400 	.word	0x40005400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010c00 	.word	0x40010c00

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <NMI_Handler+0x4>

080013d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <MemManage_Handler+0x4>

080013e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <UsageFault_Handler+0x4>

080013f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 f936 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <_kill>:

int _kill(int pid, int sig)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001438:	f002 fd4e 	bl	8003ed8 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	2216      	movs	r2, #22
 8001440:	601a      	str	r2, [r3, #0]
  return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_exit>:

void _exit (int status)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001456:	f04f 31ff 	mov.w	r1, #4294967295
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffe7 	bl	800142e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <_exit+0x12>

08001464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001476:	f3af 8000 	nop.w
 800147a:	4601      	mov	r1, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf0      	blt.n	8001476 <_read+0x12>
  }

  return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e009      	b.n	80014c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf1      	blt.n	80014b0 <_write+0x12>
  }
  return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014fc:	605a      	str	r2, [r3, #4]
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <_isatty>:

int _isatty(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
	...

08001538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <_sbrk+0x5c>)
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <_sbrk+0x60>)
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <_sbrk+0x64>)
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <_sbrk+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	429a      	cmp	r2, r3
 8001566:	d207      	bcs.n	8001578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001568:	f002 fcb6 	bl	8003ed8 <__errno>
 800156c:	4603      	mov	r3, r0
 800156e:	220c      	movs	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	e009      	b.n	800158c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	4a05      	ldr	r2, [pc, #20]	@ (800159c <_sbrk+0x64>)
 8001588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20005000 	.word	0x20005000
 8001598:	00000400 	.word	0x00000400
 800159c:	20000654 	.word	0x20000654
 80015a0:	200007a8 	.word	0x200007a8

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b0:	f7ff fff8 	bl	80015a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b6:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b8:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015cc:	4c09      	ldr	r4, [pc, #36]	@ (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f002 fc83 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff faf9 	bl	8000bd4 <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015ec:	080087bc 	.word	0x080087bc
  ldr r2, =_sbss
 80015f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015f4:	200007a8 	.word	0x200007a8

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f907 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fe66 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f911 	bl	800186e <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f8e7 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000008 	.word	0x20000008
 8001680:	20000010 	.word	0x20000010
 8001684:	2000000c 	.word	0x2000000c

08001688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_IncTick+0x1c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_IncTick+0x20>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a03      	ldr	r2, [pc, #12]	@ (80016a8 <HAL_IncTick+0x20>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000010 	.word	0x20000010
 80016a8:	20000658 	.word	0x20000658

080016ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b02      	ldr	r3, [pc, #8]	@ (80016bc <HAL_GetTick+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000658 	.word	0x20000658

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	@ (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	@ (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff90 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff49 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff5e 	bl	8001708 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff90 	bl	8001778 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5f 	bl	8001724 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffb0 	bl	80017dc <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b08b      	sub	sp, #44	@ 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e169      	b.n	8001b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800189c:	2201      	movs	r2, #1
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8158 	bne.w	8001b6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a9a      	ldr	r2, [pc, #616]	@ (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018c4:	4a98      	ldr	r2, [pc, #608]	@ (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d875      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ca:	4a98      	ldr	r2, [pc, #608]	@ (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d058      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018d0:	4a96      	ldr	r2, [pc, #600]	@ (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d86f      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018d6:	4a96      	ldr	r2, [pc, #600]	@ (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d052      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018dc:	4a94      	ldr	r2, [pc, #592]	@ (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d869      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018e2:	4a94      	ldr	r2, [pc, #592]	@ (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04c      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018e8:	4a92      	ldr	r2, [pc, #584]	@ (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d863      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ee:	4a92      	ldr	r2, [pc, #584]	@ (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d046      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018f4:	4a90      	ldr	r2, [pc, #576]	@ (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d85d      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d82a      	bhi.n	8001954 <HAL_GPIO_Init+0xcc>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d859      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 8001902:	a201      	add	r2, pc, #4	@ (adr r2, 8001908 <HAL_GPIO_Init+0x80>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001983 	.word	0x08001983
 800190c:	0800195d 	.word	0x0800195d
 8001910:	0800196f 	.word	0x0800196f
 8001914:	080019b1 	.word	0x080019b1
 8001918:	080019b7 	.word	0x080019b7
 800191c:	080019b7 	.word	0x080019b7
 8001920:	080019b7 	.word	0x080019b7
 8001924:	080019b7 	.word	0x080019b7
 8001928:	080019b7 	.word	0x080019b7
 800192c:	080019b7 	.word	0x080019b7
 8001930:	080019b7 	.word	0x080019b7
 8001934:	080019b7 	.word	0x080019b7
 8001938:	080019b7 	.word	0x080019b7
 800193c:	080019b7 	.word	0x080019b7
 8001940:	080019b7 	.word	0x080019b7
 8001944:	080019b7 	.word	0x080019b7
 8001948:	080019b7 	.word	0x080019b7
 800194c:	08001965 	.word	0x08001965
 8001950:	08001979 	.word	0x08001979
 8001954:	4a79      	ldr	r2, [pc, #484]	@ (8001b3c <HAL_GPIO_Init+0x2b4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195a:	e02c      	b.n	80019b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e029      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	3304      	adds	r3, #4
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e024      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3308      	adds	r3, #8
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e01f      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	330c      	adds	r3, #12
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e01a      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e013      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e009      	b.n	80019b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e003      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          break;
 80019b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2bff      	cmp	r3, #255	@ 0xff
 80019bc:	d801      	bhi.n	80019c2 <HAL_GPIO_Init+0x13a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	e001      	b.n	80019c6 <HAL_GPIO_Init+0x13e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	@ 0xff
 80019cc:	d802      	bhi.n	80019d4 <HAL_GPIO_Init+0x14c>
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x152>
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	3b08      	subs	r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	210f      	movs	r1, #15
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80b1 	beq.w	8001b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a08:	4b4d      	ldr	r3, [pc, #308]	@ (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b4a      	ldr	r3, [pc, #296]	@ (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a20:	4a48      	ldr	r2, [pc, #288]	@ (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a40      	ldr	r2, [pc, #256]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x1ec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b4c <HAL_GPIO_Init+0x2c4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1e8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3e      	ldr	r2, [pc, #248]	@ (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1e0>
 8001a64:	2303      	movs	r3, #3
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a74:	2300      	movs	r3, #0
 8001a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a86:	492f      	ldr	r1, [pc, #188]	@ (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	492c      	ldr	r1, [pc, #176]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4928      	ldr	r1, [pc, #160]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4922      	ldr	r1, [pc, #136]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	491e      	ldr	r1, [pc, #120]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4918      	ldr	r1, [pc, #96]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4914      	ldr	r1, [pc, #80]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d021      	beq.n	8001b5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	490e      	ldr	r1, [pc, #56]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e021      	b.n	8001b6a <HAL_GPIO_Init+0x2e2>
 8001b26:	bf00      	nop
 8001b28:	10320000 	.word	0x10320000
 8001b2c:	10310000 	.word	0x10310000
 8001b30:	10220000 	.word	0x10220000
 8001b34:	10210000 	.word	0x10210000
 8001b38:	10120000 	.word	0x10120000
 8001b3c:	10110000 	.word	0x10110000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40011400 	.word	0x40011400
 8001b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_GPIO_Init+0x304>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4909      	ldr	r1, [pc, #36]	@ (8001b8c <HAL_GPIO_Init+0x304>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f47f ae8e 	bne.w	800189c <HAL_GPIO_Init+0x14>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	372c      	adds	r7, #44	@ 0x2c
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e12b      	b.n	8001dfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fbc8 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	@ 0x24
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bf4:	f001 f960 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8001bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a81      	ldr	r2, [pc, #516]	@ (8001e04 <HAL_I2C_Init+0x274>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d807      	bhi.n	8001c14 <HAL_I2C_Init+0x84>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a80      	ldr	r2, [pc, #512]	@ (8001e08 <HAL_I2C_Init+0x278>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	bf94      	ite	ls
 8001c0c:	2301      	movls	r3, #1
 8001c0e:	2300      	movhi	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e006      	b.n	8001c22 <HAL_I2C_Init+0x92>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a7d      	ldr	r2, [pc, #500]	@ (8001e0c <HAL_I2C_Init+0x27c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0e7      	b.n	8001dfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4a78      	ldr	r2, [pc, #480]	@ (8001e10 <HAL_I2C_Init+0x280>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9b      	lsrs	r3, r3, #18
 8001c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a6a      	ldr	r2, [pc, #424]	@ (8001e04 <HAL_I2C_Init+0x274>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d802      	bhi.n	8001c64 <HAL_I2C_Init+0xd4>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3301      	adds	r3, #1
 8001c62:	e009      	b.n	8001c78 <HAL_I2C_Init+0xe8>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	4a69      	ldr	r2, [pc, #420]	@ (8001e14 <HAL_I2C_Init+0x284>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	3301      	adds	r3, #1
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	495c      	ldr	r1, [pc, #368]	@ (8001e04 <HAL_I2C_Init+0x274>)
 8001c94:	428b      	cmp	r3, r1
 8001c96:	d819      	bhi.n	8001ccc <HAL_I2C_Init+0x13c>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e59      	subs	r1, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca6:	1c59      	adds	r1, r3, #1
 8001ca8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cac:	400b      	ands	r3, r1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_I2C_Init+0x138>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1e59      	subs	r1, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc6:	e051      	b.n	8001d6c <HAL_I2C_Init+0x1dc>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e04f      	b.n	8001d6c <HAL_I2C_Init+0x1dc>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d111      	bne.n	8001cf8 <HAL_I2C_Init+0x168>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e58      	subs	r0, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e012      	b.n	8001d1e <HAL_I2C_Init+0x18e>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	0099      	lsls	r1, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Init+0x196>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e022      	b.n	8001d6c <HAL_I2C_Init+0x1dc>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10e      	bne.n	8001d4c <HAL_I2C_Init+0x1bc>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e58      	subs	r0, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	440b      	add	r3, r1
 8001d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d4a:	e00f      	b.n	8001d6c <HAL_I2C_Init+0x1dc>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e58      	subs	r0, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	0099      	lsls	r1, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	6809      	ldr	r1, [r1, #0]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6911      	ldr	r1, [r2, #16]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68d2      	ldr	r2, [r2, #12]
 8001da6:	4311      	orrs	r1, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	000186a0 	.word	0x000186a0
 8001e08:	001e847f 	.word	0x001e847f
 8001e0c:	003d08ff 	.word	0x003d08ff
 8001e10:	431bde83 	.word	0x431bde83
 8001e14:	10624dd3 	.word	0x10624dd3

08001e18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	460b      	mov	r3, r1
 8001e26:	817b      	strh	r3, [r7, #10]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fc3e 	bl	80016ac <HAL_GetTick>
 8001e30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	f040 80e0 	bne.w	8002000 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2319      	movs	r3, #25
 8001e46:	2201      	movs	r2, #1
 8001e48:	4970      	ldr	r1, [pc, #448]	@ (800200c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fa92 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0d3      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_I2C_Master_Transmit+0x50>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e0cc      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d007      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2221      	movs	r2, #33	@ 0x21
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	893a      	ldrh	r2, [r7, #8]
 8001ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a50      	ldr	r2, [pc, #320]	@ (8002010 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ece:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ed0:	8979      	ldrh	r1, [r7, #10]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f9ca 	bl	8002270 <I2C_MasterRequestWrite>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e08d      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001efc:	e066      	b.n	8001fcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fb50 	bl	80025a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d107      	bne.n	8001f26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e06b      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11b      	bne.n	8001fa0 <HAL_I2C_Master_Transmit+0x188>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d017      	beq.n	8001fa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	6a39      	ldr	r1, [r7, #32]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fb47 	bl	8002638 <I2C_WaitOnBTFFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00d      	beq.n	8001fcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d107      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e01a      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d194      	bne.n	8001efe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	00100002 	.word	0x00100002
 8002010:	ffff0000 	.word	0xffff0000

08002014 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff fb42 	bl	80016ac <HAL_GetTick>
 8002028:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	f040 8111 	bne.w	800225e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2319      	movs	r3, #25
 8002042:	2201      	movs	r2, #1
 8002044:	4988      	ldr	r1, [pc, #544]	@ (8002268 <HAL_I2C_IsDeviceReady+0x254>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f994 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
 8002054:	e104      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_I2C_IsDeviceReady+0x50>
 8002060:	2302      	movs	r3, #2
 8002062:	e0fd      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x24c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d007      	beq.n	800208a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2224      	movs	r2, #36	@ 0x24
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a70      	ldr	r2, [pc, #448]	@ (800226c <HAL_I2C_IsDeviceReady+0x258>)
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f952 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e4:	d103      	bne.n	80020ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0b6      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fad3 	bl	80016ac <HAL_GetTick>
 8002106:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002136:	e025      	b.n	8002184 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002138:	f7ff fab8 	bl	80016ac <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d302      	bcc.n	800214e <HAL_I2C_IsDeviceReady+0x13a>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	22a0      	movs	r2, #160	@ 0xa0
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b02      	cmp	r3, #2
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2ba0      	cmp	r3, #160	@ 0xa0
 800218e:	d005      	beq.n	800219c <HAL_I2C_IsDeviceReady+0x188>
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_I2C_IsDeviceReady+0x188>
 8002196:	7dbb      	ldrb	r3, [r7, #22]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0cd      	beq.n	8002138 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d129      	bne.n	8002206 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2319      	movs	r3, #25
 80021de:	2201      	movs	r2, #1
 80021e0:	4921      	ldr	r1, [pc, #132]	@ (8002268 <HAL_I2C_IsDeviceReady+0x254>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f8c6 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e036      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e02c      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002214:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800221e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2319      	movs	r3, #25
 8002226:	2201      	movs	r2, #1
 8002228:	490f      	ldr	r1, [pc, #60]	@ (8002268 <HAL_I2C_IsDeviceReady+0x254>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f8a2 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e012      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	3301      	adds	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	f4ff af32 	bcc.w	80020ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	00100002 	.word	0x00100002
 800226c:	ffff0000 	.word	0xffff0000

08002270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	460b      	mov	r3, r1
 800227e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d006      	beq.n	800229a <I2C_MasterRequestWrite+0x2a>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d003      	beq.n	800229a <I2C_MasterRequestWrite+0x2a>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002298:	d108      	bne.n	80022ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e00b      	b.n	80022c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	d107      	bne.n	80022c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f84f 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ea:	d103      	bne.n	80022f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e035      	b.n	8002364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002300:	d108      	bne.n	8002314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002302:	897b      	ldrh	r3, [r7, #10]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	e01b      	b.n	800234c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002314:	897b      	ldrh	r3, [r7, #10]
 8002316:	11db      	asrs	r3, r3, #7
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 0306 	and.w	r3, r3, #6
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f063 030f 	orn	r3, r3, #15
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	490e      	ldr	r1, [pc, #56]	@ (800236c <I2C_MasterRequestWrite+0xfc>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f898 	bl	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e010      	b.n	8002364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4907      	ldr	r1, [pc, #28]	@ (8002370 <I2C_MasterRequestWrite+0x100>)
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f888 	bl	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	00010008 	.word	0x00010008
 8002370:	00010002 	.word	0x00010002

08002374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002384:	e048      	b.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d044      	beq.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7ff f98d 	bl	80016ac <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d139      	bne.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10d      	bne.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	e00c      	b.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	43da      	mvns	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4013      	ands	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d116      	bne.n	8002418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e023      	b.n	8002460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10d      	bne.n	800243e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	43da      	mvns	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	e00c      	b.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	43da      	mvns	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4013      	ands	r3, r2
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	429a      	cmp	r2, r3
 800245c:	d093      	beq.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002476:	e071      	b.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002486:	d123      	bne.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f043 0204 	orr.w	r2, r3, #4
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e067      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d041      	beq.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d8:	f7ff f8e8 	bl	80016ac <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d302      	bcc.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d136      	bne.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d10c      	bne.n	8002512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	e00b      	b.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e021      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10c      	bne.n	8002580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e00b      	b.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4013      	ands	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f af6d 	bne.w	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b4:	e034      	b.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f886 	bl	80026c8 <I2C_IsAcknowledgeFailed>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e034      	b.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d028      	beq.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7ff f86d 	bl	80016ac <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11d      	bne.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b80      	cmp	r3, #128	@ 0x80
 80025f0:	d016      	beq.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b80      	cmp	r3, #128	@ 0x80
 800262c:	d1c3      	bne.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002644:	e034      	b.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f83e 	bl	80026c8 <I2C_IsAcknowledgeFailed>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e034      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d028      	beq.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265e:	f7ff f825 	bl	80016ac <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11d      	bne.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d016      	beq.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e007      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d1c3      	bne.n	8002646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026de:	d11b      	bne.n	8002718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e272      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8087 	beq.w	8002852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002744:	4b92      	ldr	r3, [pc, #584]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b04      	cmp	r3, #4
 800274e:	d00c      	beq.n	800276a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002750:	4b8f      	ldr	r3, [pc, #572]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d112      	bne.n	8002782 <HAL_RCC_OscConfig+0x5e>
 800275c:	4b8c      	ldr	r3, [pc, #560]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002768:	d10b      	bne.n	8002782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276a:	4b89      	ldr	r3, [pc, #548]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d06c      	beq.n	8002850 <HAL_RCC_OscConfig+0x12c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d168      	bne.n	8002850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e24c      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x76>
 800278c:	4b80      	ldr	r3, [pc, #512]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a7f      	ldr	r2, [pc, #508]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e02e      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x98>
 80027a2:	4b7b      	ldr	r3, [pc, #492]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7a      	ldr	r2, [pc, #488]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b78      	ldr	r3, [pc, #480]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a77      	ldr	r2, [pc, #476]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e01d      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0xbc>
 80027c6:	4b72      	ldr	r3, [pc, #456]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a71      	ldr	r2, [pc, #452]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b68      	ldr	r3, [pc, #416]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a67      	ldr	r2, [pc, #412]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe ff54 	bl	80016ac <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe ff50 	bl	80016ac <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	@ 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e200      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0xe4>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe ff40 	bl	80016ac <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe ff3c 	bl	80016ac <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1ec      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x10c>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d063      	beq.n	8002926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800285e:	4b4c      	ldr	r3, [pc, #304]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800286a:	4b49      	ldr	r3, [pc, #292]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b08      	cmp	r3, #8
 8002874:	d11c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x18c>
 8002876:	4b46      	ldr	r3, [pc, #280]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d116      	bne.n	80028b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_RCC_OscConfig+0x176>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e1c0      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289a:	4b3d      	ldr	r3, [pc, #244]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4939      	ldr	r1, [pc, #228]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	e03a      	b.n	8002926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fef5 	bl	80016ac <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c6:	f7fe fef1 	bl	80016ac <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1a1      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4927      	ldr	r1, [pc, #156]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fa:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fed4 	bl	80016ac <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fe fed0 	bl	80016ac <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e180      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d03a      	beq.n	80029a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d019      	beq.n	800296e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <HAL_RCC_OscConfig+0x274>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7fe feb4 	bl	80016ac <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002948:	f7fe feb0 	bl	80016ac <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e160      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002966:	2001      	movs	r0, #1
 8002968:	f000 faba 	bl	8002ee0 <RCC_Delay>
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_RCC_OscConfig+0x274>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fe fe9a 	bl	80016ac <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297a:	e00f      	b.n	800299c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe fe96 	bl	80016ac <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d908      	bls.n	800299c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e146      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	42420000 	.word	0x42420000
 8002998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	4b92      	ldr	r3, [pc, #584]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e9      	bne.n	800297c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a6 	beq.w	8002b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ba:	4b8b      	ldr	r3, [pc, #556]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a87      	ldr	r2, [pc, #540]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]
 80029d2:	4b85      	ldr	r3, [pc, #532]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e2:	4b82      	ldr	r3, [pc, #520]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d118      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fa:	f7fe fe57 	bl	80016ac <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a02:	f7fe fe53 	bl	80016ac <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b64      	cmp	r3, #100	@ 0x64
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e103      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x312>
 8002a28:	4b6f      	ldr	r3, [pc, #444]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e02d      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x334>
 8002a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a69      	ldr	r2, [pc, #420]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	4b67      	ldr	r3, [pc, #412]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a66      	ldr	r2, [pc, #408]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6213      	str	r3, [r2, #32]
 8002a56:	e01c      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x356>
 8002a60:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a60      	ldr	r2, [pc, #384]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a5d      	ldr	r2, [pc, #372]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	e00b      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6213      	str	r3, [r2, #32]
 8002a86:	4b58      	ldr	r3, [pc, #352]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a57      	ldr	r2, [pc, #348]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d015      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fe07 	bl	80016ac <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fe fe03 	bl	80016ac <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0b1      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ee      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x37e>
 8002ac4:	e014      	b.n	8002af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fdf1 	bl	80016ac <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe fded 	bl	80016ac <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e09b      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	4b40      	ldr	r3, [pc, #256]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b3c      	ldr	r3, [pc, #240]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8087 	beq.w	8002c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d061      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d146      	bne.n	8002bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fdc1 	bl	80016ac <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe fdbd 	bl	80016ac <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e06d      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b40:	4b29      	ldr	r3, [pc, #164]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4921      	ldr	r1, [pc, #132]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b68:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a19      	ldr	r1, [r3, #32]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	491b      	ldr	r1, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe fd91 	bl	80016ac <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fd8d 	bl	80016ac <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e03d      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x46a>
 8002bac:	e035      	b.n	8002c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fd7a 	bl	80016ac <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fd76 	bl	80016ac <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e026      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x498>
 8002bda:	e01e      	b.n	8002c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e019      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_OscConfig+0x500>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0d0      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d910      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b67      	ldr	r3, [pc, #412]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4965      	ldr	r1, [pc, #404]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a58      	ldr	r2, [pc, #352]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d040      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d115      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e073      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06b      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d06:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4936      	ldr	r1, [pc, #216]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fcc8 	bl	80016ac <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe fcc4 	bl	80016ac <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e053      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 020c 	and.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1eb      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d48:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d210      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4922      	ldr	r1, [pc, #136]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x1cc>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_ClockConfig+0x1d0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fc26 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08008358 	.word	0x08008358
 8002df4:	20000008 	.word	0x20000008
 8002df8:	2000000c 	.word	0x2000000c

08002dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x30>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x36>
 8002e2a:	e027      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2e:	613b      	str	r3, [r7, #16]
      break;
 8002e30:	e027      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0c9b      	lsrs	r3, r3, #18
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0c5b      	lsrs	r3, r3, #17
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	4a11      	ldr	r2, [pc, #68]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5e:	fb03 f202 	mul.w	r2, r3, r2
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e004      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	613b      	str	r3, [r7, #16]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e82:	693b      	ldr	r3, [r7, #16]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	007a1200 	.word	0x007a1200
 8002e98:	08008370 	.word	0x08008370
 8002e9c:	08008380 	.word	0x08008380
 8002ea0:	003d0900 	.word	0x003d0900

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b02      	ldr	r3, [pc, #8]	@ (8002eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	20000008 	.word	0x20000008

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ebc:	f7ff fff2 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08008368 	.word	0x08008368

08002ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <RCC_Delay+0x34>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <RCC_Delay+0x38>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0a5b      	lsrs	r3, r3, #9
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002efc:	bf00      	nop
  }
  while (Delay --);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e5a      	subs	r2, r3, #1
 8002f02:	60fa      	str	r2, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f9      	bne.n	8002efc <RCC_Delay+0x1c>
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000008 	.word	0x20000008
 8002f18:	10624dd3 	.word	0x10624dd3

08002f1c <__cvt>:
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f22:	461d      	mov	r5, r3
 8002f24:	bfbb      	ittet	lt
 8002f26:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002f2a:	461d      	movlt	r5, r3
 8002f2c:	2300      	movge	r3, #0
 8002f2e:	232d      	movlt	r3, #45	@ 0x2d
 8002f30:	b088      	sub	sp, #32
 8002f32:	4614      	mov	r4, r2
 8002f34:	bfb8      	it	lt
 8002f36:	4614      	movlt	r4, r2
 8002f38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002f3a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002f3c:	7013      	strb	r3, [r2, #0]
 8002f3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002f40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002f44:	f023 0820 	bic.w	r8, r3, #32
 8002f48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f4c:	d005      	beq.n	8002f5a <__cvt+0x3e>
 8002f4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002f52:	d100      	bne.n	8002f56 <__cvt+0x3a>
 8002f54:	3601      	adds	r6, #1
 8002f56:	2302      	movs	r3, #2
 8002f58:	e000      	b.n	8002f5c <__cvt+0x40>
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	aa07      	add	r2, sp, #28
 8002f5e:	9204      	str	r2, [sp, #16]
 8002f60:	aa06      	add	r2, sp, #24
 8002f62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002f66:	e9cd 3600 	strd	r3, r6, [sp]
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	f001 f87b 	bl	8004068 <_dtoa_r>
 8002f72:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002f76:	4607      	mov	r7, r0
 8002f78:	d119      	bne.n	8002fae <__cvt+0x92>
 8002f7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002f7c:	07db      	lsls	r3, r3, #31
 8002f7e:	d50e      	bpl.n	8002f9e <__cvt+0x82>
 8002f80:	eb00 0906 	add.w	r9, r0, r6
 8002f84:	2200      	movs	r2, #0
 8002f86:	2300      	movs	r3, #0
 8002f88:	4620      	mov	r0, r4
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	f7fd fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8002f90:	b108      	cbz	r0, 8002f96 <__cvt+0x7a>
 8002f92:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f96:	2230      	movs	r2, #48	@ 0x30
 8002f98:	9b07      	ldr	r3, [sp, #28]
 8002f9a:	454b      	cmp	r3, r9
 8002f9c:	d31e      	bcc.n	8002fdc <__cvt+0xc0>
 8002f9e:	4638      	mov	r0, r7
 8002fa0:	9b07      	ldr	r3, [sp, #28]
 8002fa2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002fa4:	1bdb      	subs	r3, r3, r7
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	b008      	add	sp, #32
 8002faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002fb2:	eb00 0906 	add.w	r9, r0, r6
 8002fb6:	d1e5      	bne.n	8002f84 <__cvt+0x68>
 8002fb8:	7803      	ldrb	r3, [r0, #0]
 8002fba:	2b30      	cmp	r3, #48	@ 0x30
 8002fbc:	d10a      	bne.n	8002fd4 <__cvt+0xb8>
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7fd fcef 	bl	80009a8 <__aeabi_dcmpeq>
 8002fca:	b918      	cbnz	r0, 8002fd4 <__cvt+0xb8>
 8002fcc:	f1c6 0601 	rsb	r6, r6, #1
 8002fd0:	f8ca 6000 	str.w	r6, [sl]
 8002fd4:	f8da 3000 	ldr.w	r3, [sl]
 8002fd8:	4499      	add	r9, r3
 8002fda:	e7d3      	b.n	8002f84 <__cvt+0x68>
 8002fdc:	1c59      	adds	r1, r3, #1
 8002fde:	9107      	str	r1, [sp, #28]
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e7d9      	b.n	8002f98 <__cvt+0x7c>

08002fe4 <__exponent>:
 8002fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fe6:	2900      	cmp	r1, #0
 8002fe8:	bfb6      	itet	lt
 8002fea:	232d      	movlt	r3, #45	@ 0x2d
 8002fec:	232b      	movge	r3, #43	@ 0x2b
 8002fee:	4249      	neglt	r1, r1
 8002ff0:	2909      	cmp	r1, #9
 8002ff2:	7002      	strb	r2, [r0, #0]
 8002ff4:	7043      	strb	r3, [r0, #1]
 8002ff6:	dd29      	ble.n	800304c <__exponent+0x68>
 8002ff8:	f10d 0307 	add.w	r3, sp, #7
 8002ffc:	461d      	mov	r5, r3
 8002ffe:	270a      	movs	r7, #10
 8003000:	fbb1 f6f7 	udiv	r6, r1, r7
 8003004:	461a      	mov	r2, r3
 8003006:	fb07 1416 	mls	r4, r7, r6, r1
 800300a:	3430      	adds	r4, #48	@ 0x30
 800300c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003010:	460c      	mov	r4, r1
 8003012:	2c63      	cmp	r4, #99	@ 0x63
 8003014:	4631      	mov	r1, r6
 8003016:	f103 33ff 	add.w	r3, r3, #4294967295
 800301a:	dcf1      	bgt.n	8003000 <__exponent+0x1c>
 800301c:	3130      	adds	r1, #48	@ 0x30
 800301e:	1e94      	subs	r4, r2, #2
 8003020:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003024:	4623      	mov	r3, r4
 8003026:	1c41      	adds	r1, r0, #1
 8003028:	42ab      	cmp	r3, r5
 800302a:	d30a      	bcc.n	8003042 <__exponent+0x5e>
 800302c:	f10d 0309 	add.w	r3, sp, #9
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	42ac      	cmp	r4, r5
 8003034:	bf88      	it	hi
 8003036:	2300      	movhi	r3, #0
 8003038:	3302      	adds	r3, #2
 800303a:	4403      	add	r3, r0
 800303c:	1a18      	subs	r0, r3, r0
 800303e:	b003      	add	sp, #12
 8003040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003042:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003046:	f801 6f01 	strb.w	r6, [r1, #1]!
 800304a:	e7ed      	b.n	8003028 <__exponent+0x44>
 800304c:	2330      	movs	r3, #48	@ 0x30
 800304e:	3130      	adds	r1, #48	@ 0x30
 8003050:	7083      	strb	r3, [r0, #2]
 8003052:	70c1      	strb	r1, [r0, #3]
 8003054:	1d03      	adds	r3, r0, #4
 8003056:	e7f1      	b.n	800303c <__exponent+0x58>

08003058 <_printf_float>:
 8003058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305c:	b091      	sub	sp, #68	@ 0x44
 800305e:	460c      	mov	r4, r1
 8003060:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003064:	4616      	mov	r6, r2
 8003066:	461f      	mov	r7, r3
 8003068:	4605      	mov	r5, r0
 800306a:	f000 feeb 	bl	8003e44 <_localeconv_r>
 800306e:	6803      	ldr	r3, [r0, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	9308      	str	r3, [sp, #32]
 8003074:	f7fd f86c 	bl	8000150 <strlen>
 8003078:	2300      	movs	r3, #0
 800307a:	930e      	str	r3, [sp, #56]	@ 0x38
 800307c:	f8d8 3000 	ldr.w	r3, [r8]
 8003080:	9009      	str	r0, [sp, #36]	@ 0x24
 8003082:	3307      	adds	r3, #7
 8003084:	f023 0307 	bic.w	r3, r3, #7
 8003088:	f103 0208 	add.w	r2, r3, #8
 800308c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003090:	f8d4 b000 	ldr.w	fp, [r4]
 8003094:	f8c8 2000 	str.w	r2, [r8]
 8003098:	e9d3 8900 	ldrd	r8, r9, [r3]
 800309c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80030a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80030a6:	f04f 32ff 	mov.w	r2, #4294967295
 80030aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80030ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80030b2:	4b9c      	ldr	r3, [pc, #624]	@ (8003324 <_printf_float+0x2cc>)
 80030b4:	f7fd fcaa 	bl	8000a0c <__aeabi_dcmpun>
 80030b8:	bb70      	cbnz	r0, 8003118 <_printf_float+0xc0>
 80030ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80030be:	f04f 32ff 	mov.w	r2, #4294967295
 80030c2:	4b98      	ldr	r3, [pc, #608]	@ (8003324 <_printf_float+0x2cc>)
 80030c4:	f7fd fc84 	bl	80009d0 <__aeabi_dcmple>
 80030c8:	bb30      	cbnz	r0, 8003118 <_printf_float+0xc0>
 80030ca:	2200      	movs	r2, #0
 80030cc:	2300      	movs	r3, #0
 80030ce:	4640      	mov	r0, r8
 80030d0:	4649      	mov	r1, r9
 80030d2:	f7fd fc73 	bl	80009bc <__aeabi_dcmplt>
 80030d6:	b110      	cbz	r0, 80030de <_printf_float+0x86>
 80030d8:	232d      	movs	r3, #45	@ 0x2d
 80030da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030de:	4a92      	ldr	r2, [pc, #584]	@ (8003328 <_printf_float+0x2d0>)
 80030e0:	4b92      	ldr	r3, [pc, #584]	@ (800332c <_printf_float+0x2d4>)
 80030e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80030e6:	bf8c      	ite	hi
 80030e8:	4690      	movhi	r8, r2
 80030ea:	4698      	movls	r8, r3
 80030ec:	2303      	movs	r3, #3
 80030ee:	f04f 0900 	mov.w	r9, #0
 80030f2:	6123      	str	r3, [r4, #16]
 80030f4:	f02b 0304 	bic.w	r3, fp, #4
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	4633      	mov	r3, r6
 80030fc:	4621      	mov	r1, r4
 80030fe:	4628      	mov	r0, r5
 8003100:	9700      	str	r7, [sp, #0]
 8003102:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003104:	f000 f9d4 	bl	80034b0 <_printf_common>
 8003108:	3001      	adds	r0, #1
 800310a:	f040 8090 	bne.w	800322e <_printf_float+0x1d6>
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	b011      	add	sp, #68	@ 0x44
 8003114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003118:	4642      	mov	r2, r8
 800311a:	464b      	mov	r3, r9
 800311c:	4640      	mov	r0, r8
 800311e:	4649      	mov	r1, r9
 8003120:	f7fd fc74 	bl	8000a0c <__aeabi_dcmpun>
 8003124:	b148      	cbz	r0, 800313a <_printf_float+0xe2>
 8003126:	464b      	mov	r3, r9
 8003128:	2b00      	cmp	r3, #0
 800312a:	bfb8      	it	lt
 800312c:	232d      	movlt	r3, #45	@ 0x2d
 800312e:	4a80      	ldr	r2, [pc, #512]	@ (8003330 <_printf_float+0x2d8>)
 8003130:	bfb8      	it	lt
 8003132:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003136:	4b7f      	ldr	r3, [pc, #508]	@ (8003334 <_printf_float+0x2dc>)
 8003138:	e7d3      	b.n	80030e2 <_printf_float+0x8a>
 800313a:	6863      	ldr	r3, [r4, #4]
 800313c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	d13f      	bne.n	80031c4 <_printf_float+0x16c>
 8003144:	2306      	movs	r3, #6
 8003146:	6063      	str	r3, [r4, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800314e:	6023      	str	r3, [r4, #0]
 8003150:	9206      	str	r2, [sp, #24]
 8003152:	aa0e      	add	r2, sp, #56	@ 0x38
 8003154:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003158:	aa0d      	add	r2, sp, #52	@ 0x34
 800315a:	9203      	str	r2, [sp, #12]
 800315c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003160:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003164:	6863      	ldr	r3, [r4, #4]
 8003166:	4642      	mov	r2, r8
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	4628      	mov	r0, r5
 800316c:	464b      	mov	r3, r9
 800316e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003170:	f7ff fed4 	bl	8002f1c <__cvt>
 8003174:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003176:	4680      	mov	r8, r0
 8003178:	2947      	cmp	r1, #71	@ 0x47
 800317a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800317c:	d128      	bne.n	80031d0 <_printf_float+0x178>
 800317e:	1cc8      	adds	r0, r1, #3
 8003180:	db02      	blt.n	8003188 <_printf_float+0x130>
 8003182:	6863      	ldr	r3, [r4, #4]
 8003184:	4299      	cmp	r1, r3
 8003186:	dd40      	ble.n	800320a <_printf_float+0x1b2>
 8003188:	f1aa 0a02 	sub.w	sl, sl, #2
 800318c:	fa5f fa8a 	uxtb.w	sl, sl
 8003190:	4652      	mov	r2, sl
 8003192:	3901      	subs	r1, #1
 8003194:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003198:	910d      	str	r1, [sp, #52]	@ 0x34
 800319a:	f7ff ff23 	bl	8002fe4 <__exponent>
 800319e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80031a0:	4681      	mov	r9, r0
 80031a2:	1813      	adds	r3, r2, r0
 80031a4:	2a01      	cmp	r2, #1
 80031a6:	6123      	str	r3, [r4, #16]
 80031a8:	dc02      	bgt.n	80031b0 <_printf_float+0x158>
 80031aa:	6822      	ldr	r2, [r4, #0]
 80031ac:	07d2      	lsls	r2, r2, #31
 80031ae:	d501      	bpl.n	80031b4 <_printf_float+0x15c>
 80031b0:	3301      	adds	r3, #1
 80031b2:	6123      	str	r3, [r4, #16]
 80031b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d09e      	beq.n	80030fa <_printf_float+0xa2>
 80031bc:	232d      	movs	r3, #45	@ 0x2d
 80031be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031c2:	e79a      	b.n	80030fa <_printf_float+0xa2>
 80031c4:	2947      	cmp	r1, #71	@ 0x47
 80031c6:	d1bf      	bne.n	8003148 <_printf_float+0xf0>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1bd      	bne.n	8003148 <_printf_float+0xf0>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e7ba      	b.n	8003146 <_printf_float+0xee>
 80031d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80031d4:	d9dc      	bls.n	8003190 <_printf_float+0x138>
 80031d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80031da:	d118      	bne.n	800320e <_printf_float+0x1b6>
 80031dc:	2900      	cmp	r1, #0
 80031de:	6863      	ldr	r3, [r4, #4]
 80031e0:	dd0b      	ble.n	80031fa <_printf_float+0x1a2>
 80031e2:	6121      	str	r1, [r4, #16]
 80031e4:	b913      	cbnz	r3, 80031ec <_printf_float+0x194>
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	07d0      	lsls	r0, r2, #31
 80031ea:	d502      	bpl.n	80031f2 <_printf_float+0x19a>
 80031ec:	3301      	adds	r3, #1
 80031ee:	440b      	add	r3, r1
 80031f0:	6123      	str	r3, [r4, #16]
 80031f2:	f04f 0900 	mov.w	r9, #0
 80031f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80031f8:	e7dc      	b.n	80031b4 <_printf_float+0x15c>
 80031fa:	b913      	cbnz	r3, 8003202 <_printf_float+0x1aa>
 80031fc:	6822      	ldr	r2, [r4, #0]
 80031fe:	07d2      	lsls	r2, r2, #31
 8003200:	d501      	bpl.n	8003206 <_printf_float+0x1ae>
 8003202:	3302      	adds	r3, #2
 8003204:	e7f4      	b.n	80031f0 <_printf_float+0x198>
 8003206:	2301      	movs	r3, #1
 8003208:	e7f2      	b.n	80031f0 <_printf_float+0x198>
 800320a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800320e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003210:	4299      	cmp	r1, r3
 8003212:	db05      	blt.n	8003220 <_printf_float+0x1c8>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	6121      	str	r1, [r4, #16]
 8003218:	07d8      	lsls	r0, r3, #31
 800321a:	d5ea      	bpl.n	80031f2 <_printf_float+0x19a>
 800321c:	1c4b      	adds	r3, r1, #1
 800321e:	e7e7      	b.n	80031f0 <_printf_float+0x198>
 8003220:	2900      	cmp	r1, #0
 8003222:	bfcc      	ite	gt
 8003224:	2201      	movgt	r2, #1
 8003226:	f1c1 0202 	rsble	r2, r1, #2
 800322a:	4413      	add	r3, r2
 800322c:	e7e0      	b.n	80031f0 <_printf_float+0x198>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	055a      	lsls	r2, r3, #21
 8003232:	d407      	bmi.n	8003244 <_printf_float+0x1ec>
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	4642      	mov	r2, r8
 8003238:	4631      	mov	r1, r6
 800323a:	4628      	mov	r0, r5
 800323c:	47b8      	blx	r7
 800323e:	3001      	adds	r0, #1
 8003240:	d12b      	bne.n	800329a <_printf_float+0x242>
 8003242:	e764      	b.n	800310e <_printf_float+0xb6>
 8003244:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003248:	f240 80dc 	bls.w	8003404 <_printf_float+0x3ac>
 800324c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003250:	2200      	movs	r2, #0
 8003252:	2300      	movs	r3, #0
 8003254:	f7fd fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8003258:	2800      	cmp	r0, #0
 800325a:	d033      	beq.n	80032c4 <_printf_float+0x26c>
 800325c:	2301      	movs	r3, #1
 800325e:	4631      	mov	r1, r6
 8003260:	4628      	mov	r0, r5
 8003262:	4a35      	ldr	r2, [pc, #212]	@ (8003338 <_printf_float+0x2e0>)
 8003264:	47b8      	blx	r7
 8003266:	3001      	adds	r0, #1
 8003268:	f43f af51 	beq.w	800310e <_printf_float+0xb6>
 800326c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003270:	4543      	cmp	r3, r8
 8003272:	db02      	blt.n	800327a <_printf_float+0x222>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	07d8      	lsls	r0, r3, #31
 8003278:	d50f      	bpl.n	800329a <_printf_float+0x242>
 800327a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800327e:	4631      	mov	r1, r6
 8003280:	4628      	mov	r0, r5
 8003282:	47b8      	blx	r7
 8003284:	3001      	adds	r0, #1
 8003286:	f43f af42 	beq.w	800310e <_printf_float+0xb6>
 800328a:	f04f 0900 	mov.w	r9, #0
 800328e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003292:	f104 0a1a 	add.w	sl, r4, #26
 8003296:	45c8      	cmp	r8, r9
 8003298:	dc09      	bgt.n	80032ae <_printf_float+0x256>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	079b      	lsls	r3, r3, #30
 800329e:	f100 8102 	bmi.w	80034a6 <_printf_float+0x44e>
 80032a2:	68e0      	ldr	r0, [r4, #12]
 80032a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80032a6:	4298      	cmp	r0, r3
 80032a8:	bfb8      	it	lt
 80032aa:	4618      	movlt	r0, r3
 80032ac:	e731      	b.n	8003112 <_printf_float+0xba>
 80032ae:	2301      	movs	r3, #1
 80032b0:	4652      	mov	r2, sl
 80032b2:	4631      	mov	r1, r6
 80032b4:	4628      	mov	r0, r5
 80032b6:	47b8      	blx	r7
 80032b8:	3001      	adds	r0, #1
 80032ba:	f43f af28 	beq.w	800310e <_printf_float+0xb6>
 80032be:	f109 0901 	add.w	r9, r9, #1
 80032c2:	e7e8      	b.n	8003296 <_printf_float+0x23e>
 80032c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dc38      	bgt.n	800333c <_printf_float+0x2e4>
 80032ca:	2301      	movs	r3, #1
 80032cc:	4631      	mov	r1, r6
 80032ce:	4628      	mov	r0, r5
 80032d0:	4a19      	ldr	r2, [pc, #100]	@ (8003338 <_printf_float+0x2e0>)
 80032d2:	47b8      	blx	r7
 80032d4:	3001      	adds	r0, #1
 80032d6:	f43f af1a 	beq.w	800310e <_printf_float+0xb6>
 80032da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80032de:	ea59 0303 	orrs.w	r3, r9, r3
 80032e2:	d102      	bne.n	80032ea <_printf_float+0x292>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	07d9      	lsls	r1, r3, #31
 80032e8:	d5d7      	bpl.n	800329a <_printf_float+0x242>
 80032ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032ee:	4631      	mov	r1, r6
 80032f0:	4628      	mov	r0, r5
 80032f2:	47b8      	blx	r7
 80032f4:	3001      	adds	r0, #1
 80032f6:	f43f af0a 	beq.w	800310e <_printf_float+0xb6>
 80032fa:	f04f 0a00 	mov.w	sl, #0
 80032fe:	f104 0b1a 	add.w	fp, r4, #26
 8003302:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003304:	425b      	negs	r3, r3
 8003306:	4553      	cmp	r3, sl
 8003308:	dc01      	bgt.n	800330e <_printf_float+0x2b6>
 800330a:	464b      	mov	r3, r9
 800330c:	e793      	b.n	8003236 <_printf_float+0x1de>
 800330e:	2301      	movs	r3, #1
 8003310:	465a      	mov	r2, fp
 8003312:	4631      	mov	r1, r6
 8003314:	4628      	mov	r0, r5
 8003316:	47b8      	blx	r7
 8003318:	3001      	adds	r0, #1
 800331a:	f43f aef8 	beq.w	800310e <_printf_float+0xb6>
 800331e:	f10a 0a01 	add.w	sl, sl, #1
 8003322:	e7ee      	b.n	8003302 <_printf_float+0x2aa>
 8003324:	7fefffff 	.word	0x7fefffff
 8003328:	08008386 	.word	0x08008386
 800332c:	08008382 	.word	0x08008382
 8003330:	0800838e 	.word	0x0800838e
 8003334:	0800838a 	.word	0x0800838a
 8003338:	08008392 	.word	0x08008392
 800333c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800333e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003342:	4553      	cmp	r3, sl
 8003344:	bfa8      	it	ge
 8003346:	4653      	movge	r3, sl
 8003348:	2b00      	cmp	r3, #0
 800334a:	4699      	mov	r9, r3
 800334c:	dc36      	bgt.n	80033bc <_printf_float+0x364>
 800334e:	f04f 0b00 	mov.w	fp, #0
 8003352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003356:	f104 021a 	add.w	r2, r4, #26
 800335a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800335c:	930a      	str	r3, [sp, #40]	@ 0x28
 800335e:	eba3 0309 	sub.w	r3, r3, r9
 8003362:	455b      	cmp	r3, fp
 8003364:	dc31      	bgt.n	80033ca <_printf_float+0x372>
 8003366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003368:	459a      	cmp	sl, r3
 800336a:	dc3a      	bgt.n	80033e2 <_printf_float+0x38a>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	07da      	lsls	r2, r3, #31
 8003370:	d437      	bmi.n	80033e2 <_printf_float+0x38a>
 8003372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003374:	ebaa 0903 	sub.w	r9, sl, r3
 8003378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800337a:	ebaa 0303 	sub.w	r3, sl, r3
 800337e:	4599      	cmp	r9, r3
 8003380:	bfa8      	it	ge
 8003382:	4699      	movge	r9, r3
 8003384:	f1b9 0f00 	cmp.w	r9, #0
 8003388:	dc33      	bgt.n	80033f2 <_printf_float+0x39a>
 800338a:	f04f 0800 	mov.w	r8, #0
 800338e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003392:	f104 0b1a 	add.w	fp, r4, #26
 8003396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003398:	ebaa 0303 	sub.w	r3, sl, r3
 800339c:	eba3 0309 	sub.w	r3, r3, r9
 80033a0:	4543      	cmp	r3, r8
 80033a2:	f77f af7a 	ble.w	800329a <_printf_float+0x242>
 80033a6:	2301      	movs	r3, #1
 80033a8:	465a      	mov	r2, fp
 80033aa:	4631      	mov	r1, r6
 80033ac:	4628      	mov	r0, r5
 80033ae:	47b8      	blx	r7
 80033b0:	3001      	adds	r0, #1
 80033b2:	f43f aeac 	beq.w	800310e <_printf_float+0xb6>
 80033b6:	f108 0801 	add.w	r8, r8, #1
 80033ba:	e7ec      	b.n	8003396 <_printf_float+0x33e>
 80033bc:	4642      	mov	r2, r8
 80033be:	4631      	mov	r1, r6
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b8      	blx	r7
 80033c4:	3001      	adds	r0, #1
 80033c6:	d1c2      	bne.n	800334e <_printf_float+0x2f6>
 80033c8:	e6a1      	b.n	800310e <_printf_float+0xb6>
 80033ca:	2301      	movs	r3, #1
 80033cc:	4631      	mov	r1, r6
 80033ce:	4628      	mov	r0, r5
 80033d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80033d2:	47b8      	blx	r7
 80033d4:	3001      	adds	r0, #1
 80033d6:	f43f ae9a 	beq.w	800310e <_printf_float+0xb6>
 80033da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80033dc:	f10b 0b01 	add.w	fp, fp, #1
 80033e0:	e7bb      	b.n	800335a <_printf_float+0x302>
 80033e2:	4631      	mov	r1, r6
 80033e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b8      	blx	r7
 80033ec:	3001      	adds	r0, #1
 80033ee:	d1c0      	bne.n	8003372 <_printf_float+0x31a>
 80033f0:	e68d      	b.n	800310e <_printf_float+0xb6>
 80033f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80033f4:	464b      	mov	r3, r9
 80033f6:	4631      	mov	r1, r6
 80033f8:	4628      	mov	r0, r5
 80033fa:	4442      	add	r2, r8
 80033fc:	47b8      	blx	r7
 80033fe:	3001      	adds	r0, #1
 8003400:	d1c3      	bne.n	800338a <_printf_float+0x332>
 8003402:	e684      	b.n	800310e <_printf_float+0xb6>
 8003404:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003408:	f1ba 0f01 	cmp.w	sl, #1
 800340c:	dc01      	bgt.n	8003412 <_printf_float+0x3ba>
 800340e:	07db      	lsls	r3, r3, #31
 8003410:	d536      	bpl.n	8003480 <_printf_float+0x428>
 8003412:	2301      	movs	r3, #1
 8003414:	4642      	mov	r2, r8
 8003416:	4631      	mov	r1, r6
 8003418:	4628      	mov	r0, r5
 800341a:	47b8      	blx	r7
 800341c:	3001      	adds	r0, #1
 800341e:	f43f ae76 	beq.w	800310e <_printf_float+0xb6>
 8003422:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003426:	4631      	mov	r1, r6
 8003428:	4628      	mov	r0, r5
 800342a:	47b8      	blx	r7
 800342c:	3001      	adds	r0, #1
 800342e:	f43f ae6e 	beq.w	800310e <_printf_float+0xb6>
 8003432:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003436:	2200      	movs	r2, #0
 8003438:	2300      	movs	r3, #0
 800343a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800343e:	f7fd fab3 	bl	80009a8 <__aeabi_dcmpeq>
 8003442:	b9c0      	cbnz	r0, 8003476 <_printf_float+0x41e>
 8003444:	4653      	mov	r3, sl
 8003446:	f108 0201 	add.w	r2, r8, #1
 800344a:	4631      	mov	r1, r6
 800344c:	4628      	mov	r0, r5
 800344e:	47b8      	blx	r7
 8003450:	3001      	adds	r0, #1
 8003452:	d10c      	bne.n	800346e <_printf_float+0x416>
 8003454:	e65b      	b.n	800310e <_printf_float+0xb6>
 8003456:	2301      	movs	r3, #1
 8003458:	465a      	mov	r2, fp
 800345a:	4631      	mov	r1, r6
 800345c:	4628      	mov	r0, r5
 800345e:	47b8      	blx	r7
 8003460:	3001      	adds	r0, #1
 8003462:	f43f ae54 	beq.w	800310e <_printf_float+0xb6>
 8003466:	f108 0801 	add.w	r8, r8, #1
 800346a:	45d0      	cmp	r8, sl
 800346c:	dbf3      	blt.n	8003456 <_printf_float+0x3fe>
 800346e:	464b      	mov	r3, r9
 8003470:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003474:	e6e0      	b.n	8003238 <_printf_float+0x1e0>
 8003476:	f04f 0800 	mov.w	r8, #0
 800347a:	f104 0b1a 	add.w	fp, r4, #26
 800347e:	e7f4      	b.n	800346a <_printf_float+0x412>
 8003480:	2301      	movs	r3, #1
 8003482:	4642      	mov	r2, r8
 8003484:	e7e1      	b.n	800344a <_printf_float+0x3f2>
 8003486:	2301      	movs	r3, #1
 8003488:	464a      	mov	r2, r9
 800348a:	4631      	mov	r1, r6
 800348c:	4628      	mov	r0, r5
 800348e:	47b8      	blx	r7
 8003490:	3001      	adds	r0, #1
 8003492:	f43f ae3c 	beq.w	800310e <_printf_float+0xb6>
 8003496:	f108 0801 	add.w	r8, r8, #1
 800349a:	68e3      	ldr	r3, [r4, #12]
 800349c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800349e:	1a5b      	subs	r3, r3, r1
 80034a0:	4543      	cmp	r3, r8
 80034a2:	dcf0      	bgt.n	8003486 <_printf_float+0x42e>
 80034a4:	e6fd      	b.n	80032a2 <_printf_float+0x24a>
 80034a6:	f04f 0800 	mov.w	r8, #0
 80034aa:	f104 0919 	add.w	r9, r4, #25
 80034ae:	e7f4      	b.n	800349a <_printf_float+0x442>

080034b0 <_printf_common>:
 80034b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b4:	4616      	mov	r6, r2
 80034b6:	4698      	mov	r8, r3
 80034b8:	688a      	ldr	r2, [r1, #8]
 80034ba:	690b      	ldr	r3, [r1, #16]
 80034bc:	4607      	mov	r7, r0
 80034be:	4293      	cmp	r3, r2
 80034c0:	bfb8      	it	lt
 80034c2:	4613      	movlt	r3, r2
 80034c4:	6033      	str	r3, [r6, #0]
 80034c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034ca:	460c      	mov	r4, r1
 80034cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034d0:	b10a      	cbz	r2, 80034d6 <_printf_common+0x26>
 80034d2:	3301      	adds	r3, #1
 80034d4:	6033      	str	r3, [r6, #0]
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	0699      	lsls	r1, r3, #26
 80034da:	bf42      	ittt	mi
 80034dc:	6833      	ldrmi	r3, [r6, #0]
 80034de:	3302      	addmi	r3, #2
 80034e0:	6033      	strmi	r3, [r6, #0]
 80034e2:	6825      	ldr	r5, [r4, #0]
 80034e4:	f015 0506 	ands.w	r5, r5, #6
 80034e8:	d106      	bne.n	80034f8 <_printf_common+0x48>
 80034ea:	f104 0a19 	add.w	sl, r4, #25
 80034ee:	68e3      	ldr	r3, [r4, #12]
 80034f0:	6832      	ldr	r2, [r6, #0]
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	42ab      	cmp	r3, r5
 80034f6:	dc2b      	bgt.n	8003550 <_printf_common+0xa0>
 80034f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	3b00      	subs	r3, #0
 8003500:	bf18      	it	ne
 8003502:	2301      	movne	r3, #1
 8003504:	0692      	lsls	r2, r2, #26
 8003506:	d430      	bmi.n	800356a <_printf_common+0xba>
 8003508:	4641      	mov	r1, r8
 800350a:	4638      	mov	r0, r7
 800350c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003510:	47c8      	blx	r9
 8003512:	3001      	adds	r0, #1
 8003514:	d023      	beq.n	800355e <_printf_common+0xae>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	6922      	ldr	r2, [r4, #16]
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf14      	ite	ne
 8003522:	2500      	movne	r5, #0
 8003524:	6833      	ldreq	r3, [r6, #0]
 8003526:	f04f 0600 	mov.w	r6, #0
 800352a:	bf08      	it	eq
 800352c:	68e5      	ldreq	r5, [r4, #12]
 800352e:	f104 041a 	add.w	r4, r4, #26
 8003532:	bf08      	it	eq
 8003534:	1aed      	subeq	r5, r5, r3
 8003536:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800353a:	bf08      	it	eq
 800353c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003540:	4293      	cmp	r3, r2
 8003542:	bfc4      	itt	gt
 8003544:	1a9b      	subgt	r3, r3, r2
 8003546:	18ed      	addgt	r5, r5, r3
 8003548:	42b5      	cmp	r5, r6
 800354a:	d11a      	bne.n	8003582 <_printf_common+0xd2>
 800354c:	2000      	movs	r0, #0
 800354e:	e008      	b.n	8003562 <_printf_common+0xb2>
 8003550:	2301      	movs	r3, #1
 8003552:	4652      	mov	r2, sl
 8003554:	4641      	mov	r1, r8
 8003556:	4638      	mov	r0, r7
 8003558:	47c8      	blx	r9
 800355a:	3001      	adds	r0, #1
 800355c:	d103      	bne.n	8003566 <_printf_common+0xb6>
 800355e:	f04f 30ff 	mov.w	r0, #4294967295
 8003562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003566:	3501      	adds	r5, #1
 8003568:	e7c1      	b.n	80034ee <_printf_common+0x3e>
 800356a:	2030      	movs	r0, #48	@ 0x30
 800356c:	18e1      	adds	r1, r4, r3
 800356e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003578:	4422      	add	r2, r4
 800357a:	3302      	adds	r3, #2
 800357c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003580:	e7c2      	b.n	8003508 <_printf_common+0x58>
 8003582:	2301      	movs	r3, #1
 8003584:	4622      	mov	r2, r4
 8003586:	4641      	mov	r1, r8
 8003588:	4638      	mov	r0, r7
 800358a:	47c8      	blx	r9
 800358c:	3001      	adds	r0, #1
 800358e:	d0e6      	beq.n	800355e <_printf_common+0xae>
 8003590:	3601      	adds	r6, #1
 8003592:	e7d9      	b.n	8003548 <_printf_common+0x98>

08003594 <_printf_i>:
 8003594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	7e0f      	ldrb	r7, [r1, #24]
 800359a:	4691      	mov	r9, r2
 800359c:	2f78      	cmp	r7, #120	@ 0x78
 800359e:	4680      	mov	r8, r0
 80035a0:	460c      	mov	r4, r1
 80035a2:	469a      	mov	sl, r3
 80035a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035aa:	d807      	bhi.n	80035bc <_printf_i+0x28>
 80035ac:	2f62      	cmp	r7, #98	@ 0x62
 80035ae:	d80a      	bhi.n	80035c6 <_printf_i+0x32>
 80035b0:	2f00      	cmp	r7, #0
 80035b2:	f000 80d1 	beq.w	8003758 <_printf_i+0x1c4>
 80035b6:	2f58      	cmp	r7, #88	@ 0x58
 80035b8:	f000 80b8 	beq.w	800372c <_printf_i+0x198>
 80035bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035c4:	e03a      	b.n	800363c <_printf_i+0xa8>
 80035c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035ca:	2b15      	cmp	r3, #21
 80035cc:	d8f6      	bhi.n	80035bc <_printf_i+0x28>
 80035ce:	a101      	add	r1, pc, #4	@ (adr r1, 80035d4 <_printf_i+0x40>)
 80035d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035d4:	0800362d 	.word	0x0800362d
 80035d8:	08003641 	.word	0x08003641
 80035dc:	080035bd 	.word	0x080035bd
 80035e0:	080035bd 	.word	0x080035bd
 80035e4:	080035bd 	.word	0x080035bd
 80035e8:	080035bd 	.word	0x080035bd
 80035ec:	08003641 	.word	0x08003641
 80035f0:	080035bd 	.word	0x080035bd
 80035f4:	080035bd 	.word	0x080035bd
 80035f8:	080035bd 	.word	0x080035bd
 80035fc:	080035bd 	.word	0x080035bd
 8003600:	0800373f 	.word	0x0800373f
 8003604:	0800366b 	.word	0x0800366b
 8003608:	080036f9 	.word	0x080036f9
 800360c:	080035bd 	.word	0x080035bd
 8003610:	080035bd 	.word	0x080035bd
 8003614:	08003761 	.word	0x08003761
 8003618:	080035bd 	.word	0x080035bd
 800361c:	0800366b 	.word	0x0800366b
 8003620:	080035bd 	.word	0x080035bd
 8003624:	080035bd 	.word	0x080035bd
 8003628:	08003701 	.word	0x08003701
 800362c:	6833      	ldr	r3, [r6, #0]
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6032      	str	r2, [r6, #0]
 8003634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800363c:	2301      	movs	r3, #1
 800363e:	e09c      	b.n	800377a <_printf_i+0x1e6>
 8003640:	6833      	ldr	r3, [r6, #0]
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	1d19      	adds	r1, r3, #4
 8003646:	6031      	str	r1, [r6, #0]
 8003648:	0606      	lsls	r6, r0, #24
 800364a:	d501      	bpl.n	8003650 <_printf_i+0xbc>
 800364c:	681d      	ldr	r5, [r3, #0]
 800364e:	e003      	b.n	8003658 <_printf_i+0xc4>
 8003650:	0645      	lsls	r5, r0, #25
 8003652:	d5fb      	bpl.n	800364c <_printf_i+0xb8>
 8003654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003658:	2d00      	cmp	r5, #0
 800365a:	da03      	bge.n	8003664 <_printf_i+0xd0>
 800365c:	232d      	movs	r3, #45	@ 0x2d
 800365e:	426d      	negs	r5, r5
 8003660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003664:	230a      	movs	r3, #10
 8003666:	4858      	ldr	r0, [pc, #352]	@ (80037c8 <_printf_i+0x234>)
 8003668:	e011      	b.n	800368e <_printf_i+0xfa>
 800366a:	6821      	ldr	r1, [r4, #0]
 800366c:	6833      	ldr	r3, [r6, #0]
 800366e:	0608      	lsls	r0, r1, #24
 8003670:	f853 5b04 	ldr.w	r5, [r3], #4
 8003674:	d402      	bmi.n	800367c <_printf_i+0xe8>
 8003676:	0649      	lsls	r1, r1, #25
 8003678:	bf48      	it	mi
 800367a:	b2ad      	uxthmi	r5, r5
 800367c:	2f6f      	cmp	r7, #111	@ 0x6f
 800367e:	6033      	str	r3, [r6, #0]
 8003680:	bf14      	ite	ne
 8003682:	230a      	movne	r3, #10
 8003684:	2308      	moveq	r3, #8
 8003686:	4850      	ldr	r0, [pc, #320]	@ (80037c8 <_printf_i+0x234>)
 8003688:	2100      	movs	r1, #0
 800368a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800368e:	6866      	ldr	r6, [r4, #4]
 8003690:	2e00      	cmp	r6, #0
 8003692:	60a6      	str	r6, [r4, #8]
 8003694:	db05      	blt.n	80036a2 <_printf_i+0x10e>
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	432e      	orrs	r6, r5
 800369a:	f021 0104 	bic.w	r1, r1, #4
 800369e:	6021      	str	r1, [r4, #0]
 80036a0:	d04b      	beq.n	800373a <_printf_i+0x1a6>
 80036a2:	4616      	mov	r6, r2
 80036a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80036a8:	fb03 5711 	mls	r7, r3, r1, r5
 80036ac:	5dc7      	ldrb	r7, [r0, r7]
 80036ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036b2:	462f      	mov	r7, r5
 80036b4:	42bb      	cmp	r3, r7
 80036b6:	460d      	mov	r5, r1
 80036b8:	d9f4      	bls.n	80036a4 <_printf_i+0x110>
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d10b      	bne.n	80036d6 <_printf_i+0x142>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	07df      	lsls	r7, r3, #31
 80036c2:	d508      	bpl.n	80036d6 <_printf_i+0x142>
 80036c4:	6923      	ldr	r3, [r4, #16]
 80036c6:	6861      	ldr	r1, [r4, #4]
 80036c8:	4299      	cmp	r1, r3
 80036ca:	bfde      	ittt	le
 80036cc:	2330      	movle	r3, #48	@ 0x30
 80036ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036d6:	1b92      	subs	r2, r2, r6
 80036d8:	6122      	str	r2, [r4, #16]
 80036da:	464b      	mov	r3, r9
 80036dc:	4621      	mov	r1, r4
 80036de:	4640      	mov	r0, r8
 80036e0:	f8cd a000 	str.w	sl, [sp]
 80036e4:	aa03      	add	r2, sp, #12
 80036e6:	f7ff fee3 	bl	80034b0 <_printf_common>
 80036ea:	3001      	adds	r0, #1
 80036ec:	d14a      	bne.n	8003784 <_printf_i+0x1f0>
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295
 80036f2:	b004      	add	sp, #16
 80036f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	f043 0320 	orr.w	r3, r3, #32
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	2778      	movs	r7, #120	@ 0x78
 8003702:	4832      	ldr	r0, [pc, #200]	@ (80037cc <_printf_i+0x238>)
 8003704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	6831      	ldr	r1, [r6, #0]
 800370c:	061f      	lsls	r7, r3, #24
 800370e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003712:	d402      	bmi.n	800371a <_printf_i+0x186>
 8003714:	065f      	lsls	r7, r3, #25
 8003716:	bf48      	it	mi
 8003718:	b2ad      	uxthmi	r5, r5
 800371a:	6031      	str	r1, [r6, #0]
 800371c:	07d9      	lsls	r1, r3, #31
 800371e:	bf44      	itt	mi
 8003720:	f043 0320 	orrmi.w	r3, r3, #32
 8003724:	6023      	strmi	r3, [r4, #0]
 8003726:	b11d      	cbz	r5, 8003730 <_printf_i+0x19c>
 8003728:	2310      	movs	r3, #16
 800372a:	e7ad      	b.n	8003688 <_printf_i+0xf4>
 800372c:	4826      	ldr	r0, [pc, #152]	@ (80037c8 <_printf_i+0x234>)
 800372e:	e7e9      	b.n	8003704 <_printf_i+0x170>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	f023 0320 	bic.w	r3, r3, #32
 8003736:	6023      	str	r3, [r4, #0]
 8003738:	e7f6      	b.n	8003728 <_printf_i+0x194>
 800373a:	4616      	mov	r6, r2
 800373c:	e7bd      	b.n	80036ba <_printf_i+0x126>
 800373e:	6833      	ldr	r3, [r6, #0]
 8003740:	6825      	ldr	r5, [r4, #0]
 8003742:	1d18      	adds	r0, r3, #4
 8003744:	6961      	ldr	r1, [r4, #20]
 8003746:	6030      	str	r0, [r6, #0]
 8003748:	062e      	lsls	r6, r5, #24
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	d501      	bpl.n	8003752 <_printf_i+0x1be>
 800374e:	6019      	str	r1, [r3, #0]
 8003750:	e002      	b.n	8003758 <_printf_i+0x1c4>
 8003752:	0668      	lsls	r0, r5, #25
 8003754:	d5fb      	bpl.n	800374e <_printf_i+0x1ba>
 8003756:	8019      	strh	r1, [r3, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	4616      	mov	r6, r2
 800375c:	6123      	str	r3, [r4, #16]
 800375e:	e7bc      	b.n	80036da <_printf_i+0x146>
 8003760:	6833      	ldr	r3, [r6, #0]
 8003762:	2100      	movs	r1, #0
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	6032      	str	r2, [r6, #0]
 8003768:	681e      	ldr	r6, [r3, #0]
 800376a:	6862      	ldr	r2, [r4, #4]
 800376c:	4630      	mov	r0, r6
 800376e:	f000 fbe0 	bl	8003f32 <memchr>
 8003772:	b108      	cbz	r0, 8003778 <_printf_i+0x1e4>
 8003774:	1b80      	subs	r0, r0, r6
 8003776:	6060      	str	r0, [r4, #4]
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	2300      	movs	r3, #0
 800377e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003782:	e7aa      	b.n	80036da <_printf_i+0x146>
 8003784:	4632      	mov	r2, r6
 8003786:	4649      	mov	r1, r9
 8003788:	4640      	mov	r0, r8
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	47d0      	blx	sl
 800378e:	3001      	adds	r0, #1
 8003790:	d0ad      	beq.n	80036ee <_printf_i+0x15a>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	079b      	lsls	r3, r3, #30
 8003796:	d413      	bmi.n	80037c0 <_printf_i+0x22c>
 8003798:	68e0      	ldr	r0, [r4, #12]
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	4298      	cmp	r0, r3
 800379e:	bfb8      	it	lt
 80037a0:	4618      	movlt	r0, r3
 80037a2:	e7a6      	b.n	80036f2 <_printf_i+0x15e>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4632      	mov	r2, r6
 80037a8:	4649      	mov	r1, r9
 80037aa:	4640      	mov	r0, r8
 80037ac:	47d0      	blx	sl
 80037ae:	3001      	adds	r0, #1
 80037b0:	d09d      	beq.n	80036ee <_printf_i+0x15a>
 80037b2:	3501      	adds	r5, #1
 80037b4:	68e3      	ldr	r3, [r4, #12]
 80037b6:	9903      	ldr	r1, [sp, #12]
 80037b8:	1a5b      	subs	r3, r3, r1
 80037ba:	42ab      	cmp	r3, r5
 80037bc:	dcf2      	bgt.n	80037a4 <_printf_i+0x210>
 80037be:	e7eb      	b.n	8003798 <_printf_i+0x204>
 80037c0:	2500      	movs	r5, #0
 80037c2:	f104 0619 	add.w	r6, r4, #25
 80037c6:	e7f5      	b.n	80037b4 <_printf_i+0x220>
 80037c8:	08008394 	.word	0x08008394
 80037cc:	080083a5 	.word	0x080083a5

080037d0 <_scanf_float>:
 80037d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d4:	b087      	sub	sp, #28
 80037d6:	9303      	str	r3, [sp, #12]
 80037d8:	688b      	ldr	r3, [r1, #8]
 80037da:	4691      	mov	r9, r2
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80037e2:	bf82      	ittt	hi
 80037e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80037e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80037ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80037f0:	460a      	mov	r2, r1
 80037f2:	f04f 0500 	mov.w	r5, #0
 80037f6:	bf88      	it	hi
 80037f8:	608b      	strhi	r3, [r1, #8]
 80037fa:	680b      	ldr	r3, [r1, #0]
 80037fc:	4680      	mov	r8, r0
 80037fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003802:	f842 3b1c 	str.w	r3, [r2], #28
 8003806:	460c      	mov	r4, r1
 8003808:	bf98      	it	ls
 800380a:	f04f 0b00 	movls.w	fp, #0
 800380e:	4616      	mov	r6, r2
 8003810:	46aa      	mov	sl, r5
 8003812:	462f      	mov	r7, r5
 8003814:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	9502      	str	r5, [sp, #8]
 800381c:	68a2      	ldr	r2, [r4, #8]
 800381e:	b15a      	cbz	r2, 8003838 <_scanf_float+0x68>
 8003820:	f8d9 3000 	ldr.w	r3, [r9]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b4e      	cmp	r3, #78	@ 0x4e
 8003828:	d862      	bhi.n	80038f0 <_scanf_float+0x120>
 800382a:	2b40      	cmp	r3, #64	@ 0x40
 800382c:	d83a      	bhi.n	80038a4 <_scanf_float+0xd4>
 800382e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003832:	b2c8      	uxtb	r0, r1
 8003834:	280e      	cmp	r0, #14
 8003836:	d938      	bls.n	80038aa <_scanf_float+0xda>
 8003838:	b11f      	cbz	r7, 8003842 <_scanf_float+0x72>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003846:	f1ba 0f01 	cmp.w	sl, #1
 800384a:	f200 8114 	bhi.w	8003a76 <_scanf_float+0x2a6>
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	429e      	cmp	r6, r3
 8003852:	f200 8105 	bhi.w	8003a60 <_scanf_float+0x290>
 8003856:	2001      	movs	r0, #1
 8003858:	b007      	add	sp, #28
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003862:	2a0d      	cmp	r2, #13
 8003864:	d8e8      	bhi.n	8003838 <_scanf_float+0x68>
 8003866:	a101      	add	r1, pc, #4	@ (adr r1, 800386c <_scanf_float+0x9c>)
 8003868:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800386c:	080039b5 	.word	0x080039b5
 8003870:	08003839 	.word	0x08003839
 8003874:	08003839 	.word	0x08003839
 8003878:	08003839 	.word	0x08003839
 800387c:	08003a11 	.word	0x08003a11
 8003880:	080039eb 	.word	0x080039eb
 8003884:	08003839 	.word	0x08003839
 8003888:	08003839 	.word	0x08003839
 800388c:	080039c3 	.word	0x080039c3
 8003890:	08003839 	.word	0x08003839
 8003894:	08003839 	.word	0x08003839
 8003898:	08003839 	.word	0x08003839
 800389c:	08003839 	.word	0x08003839
 80038a0:	0800397f 	.word	0x0800397f
 80038a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80038a8:	e7db      	b.n	8003862 <_scanf_float+0x92>
 80038aa:	290e      	cmp	r1, #14
 80038ac:	d8c4      	bhi.n	8003838 <_scanf_float+0x68>
 80038ae:	a001      	add	r0, pc, #4	@ (adr r0, 80038b4 <_scanf_float+0xe4>)
 80038b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80038b4:	0800396f 	.word	0x0800396f
 80038b8:	08003839 	.word	0x08003839
 80038bc:	0800396f 	.word	0x0800396f
 80038c0:	080039ff 	.word	0x080039ff
 80038c4:	08003839 	.word	0x08003839
 80038c8:	08003911 	.word	0x08003911
 80038cc:	08003955 	.word	0x08003955
 80038d0:	08003955 	.word	0x08003955
 80038d4:	08003955 	.word	0x08003955
 80038d8:	08003955 	.word	0x08003955
 80038dc:	08003955 	.word	0x08003955
 80038e0:	08003955 	.word	0x08003955
 80038e4:	08003955 	.word	0x08003955
 80038e8:	08003955 	.word	0x08003955
 80038ec:	08003955 	.word	0x08003955
 80038f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80038f2:	d809      	bhi.n	8003908 <_scanf_float+0x138>
 80038f4:	2b60      	cmp	r3, #96	@ 0x60
 80038f6:	d8b2      	bhi.n	800385e <_scanf_float+0x8e>
 80038f8:	2b54      	cmp	r3, #84	@ 0x54
 80038fa:	d07b      	beq.n	80039f4 <_scanf_float+0x224>
 80038fc:	2b59      	cmp	r3, #89	@ 0x59
 80038fe:	d19b      	bne.n	8003838 <_scanf_float+0x68>
 8003900:	2d07      	cmp	r5, #7
 8003902:	d199      	bne.n	8003838 <_scanf_float+0x68>
 8003904:	2508      	movs	r5, #8
 8003906:	e02f      	b.n	8003968 <_scanf_float+0x198>
 8003908:	2b74      	cmp	r3, #116	@ 0x74
 800390a:	d073      	beq.n	80039f4 <_scanf_float+0x224>
 800390c:	2b79      	cmp	r3, #121	@ 0x79
 800390e:	e7f6      	b.n	80038fe <_scanf_float+0x12e>
 8003910:	6821      	ldr	r1, [r4, #0]
 8003912:	05c8      	lsls	r0, r1, #23
 8003914:	d51e      	bpl.n	8003954 <_scanf_float+0x184>
 8003916:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800391a:	6021      	str	r1, [r4, #0]
 800391c:	3701      	adds	r7, #1
 800391e:	f1bb 0f00 	cmp.w	fp, #0
 8003922:	d003      	beq.n	800392c <_scanf_float+0x15c>
 8003924:	3201      	adds	r2, #1
 8003926:	f10b 3bff 	add.w	fp, fp, #4294967295
 800392a:	60a2      	str	r2, [r4, #8]
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	3b01      	subs	r3, #1
 8003930:	60a3      	str	r3, [r4, #8]
 8003932:	6923      	ldr	r3, [r4, #16]
 8003934:	3301      	adds	r3, #1
 8003936:	6123      	str	r3, [r4, #16]
 8003938:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800393c:	3b01      	subs	r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	f8c9 3004 	str.w	r3, [r9, #4]
 8003944:	f340 8083 	ble.w	8003a4e <_scanf_float+0x27e>
 8003948:	f8d9 3000 	ldr.w	r3, [r9]
 800394c:	3301      	adds	r3, #1
 800394e:	f8c9 3000 	str.w	r3, [r9]
 8003952:	e763      	b.n	800381c <_scanf_float+0x4c>
 8003954:	eb1a 0105 	adds.w	r1, sl, r5
 8003958:	f47f af6e 	bne.w	8003838 <_scanf_float+0x68>
 800395c:	460d      	mov	r5, r1
 800395e:	468a      	mov	sl, r1
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003966:	6022      	str	r2, [r4, #0]
 8003968:	f806 3b01 	strb.w	r3, [r6], #1
 800396c:	e7de      	b.n	800392c <_scanf_float+0x15c>
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	0610      	lsls	r0, r2, #24
 8003972:	f57f af61 	bpl.w	8003838 <_scanf_float+0x68>
 8003976:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800397a:	6022      	str	r2, [r4, #0]
 800397c:	e7f4      	b.n	8003968 <_scanf_float+0x198>
 800397e:	f1ba 0f00 	cmp.w	sl, #0
 8003982:	d10c      	bne.n	800399e <_scanf_float+0x1ce>
 8003984:	b977      	cbnz	r7, 80039a4 <_scanf_float+0x1d4>
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800398c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003990:	d108      	bne.n	80039a4 <_scanf_float+0x1d4>
 8003992:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003996:	f04f 0a01 	mov.w	sl, #1
 800399a:	6022      	str	r2, [r4, #0]
 800399c:	e7e4      	b.n	8003968 <_scanf_float+0x198>
 800399e:	f1ba 0f02 	cmp.w	sl, #2
 80039a2:	d051      	beq.n	8003a48 <_scanf_float+0x278>
 80039a4:	2d01      	cmp	r5, #1
 80039a6:	d002      	beq.n	80039ae <_scanf_float+0x1de>
 80039a8:	2d04      	cmp	r5, #4
 80039aa:	f47f af45 	bne.w	8003838 <_scanf_float+0x68>
 80039ae:	3501      	adds	r5, #1
 80039b0:	b2ed      	uxtb	r5, r5
 80039b2:	e7d9      	b.n	8003968 <_scanf_float+0x198>
 80039b4:	f1ba 0f01 	cmp.w	sl, #1
 80039b8:	f47f af3e 	bne.w	8003838 <_scanf_float+0x68>
 80039bc:	f04f 0a02 	mov.w	sl, #2
 80039c0:	e7d2      	b.n	8003968 <_scanf_float+0x198>
 80039c2:	b975      	cbnz	r5, 80039e2 <_scanf_float+0x212>
 80039c4:	2f00      	cmp	r7, #0
 80039c6:	f47f af38 	bne.w	800383a <_scanf_float+0x6a>
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80039d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80039d4:	f040 80ff 	bne.w	8003bd6 <_scanf_float+0x406>
 80039d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80039dc:	2501      	movs	r5, #1
 80039de:	6022      	str	r2, [r4, #0]
 80039e0:	e7c2      	b.n	8003968 <_scanf_float+0x198>
 80039e2:	2d03      	cmp	r5, #3
 80039e4:	d0e3      	beq.n	80039ae <_scanf_float+0x1de>
 80039e6:	2d05      	cmp	r5, #5
 80039e8:	e7df      	b.n	80039aa <_scanf_float+0x1da>
 80039ea:	2d02      	cmp	r5, #2
 80039ec:	f47f af24 	bne.w	8003838 <_scanf_float+0x68>
 80039f0:	2503      	movs	r5, #3
 80039f2:	e7b9      	b.n	8003968 <_scanf_float+0x198>
 80039f4:	2d06      	cmp	r5, #6
 80039f6:	f47f af1f 	bne.w	8003838 <_scanf_float+0x68>
 80039fa:	2507      	movs	r5, #7
 80039fc:	e7b4      	b.n	8003968 <_scanf_float+0x198>
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	0591      	lsls	r1, r2, #22
 8003a02:	f57f af19 	bpl.w	8003838 <_scanf_float+0x68>
 8003a06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	9702      	str	r7, [sp, #8]
 8003a0e:	e7ab      	b.n	8003968 <_scanf_float+0x198>
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003a16:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003a1a:	d005      	beq.n	8003a28 <_scanf_float+0x258>
 8003a1c:	0550      	lsls	r0, r2, #21
 8003a1e:	f57f af0b 	bpl.w	8003838 <_scanf_float+0x68>
 8003a22:	2f00      	cmp	r7, #0
 8003a24:	f000 80d7 	beq.w	8003bd6 <_scanf_float+0x406>
 8003a28:	0591      	lsls	r1, r2, #22
 8003a2a:	bf58      	it	pl
 8003a2c:	9902      	ldrpl	r1, [sp, #8]
 8003a2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003a32:	bf58      	it	pl
 8003a34:	1a79      	subpl	r1, r7, r1
 8003a36:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003a3a:	f04f 0700 	mov.w	r7, #0
 8003a3e:	bf58      	it	pl
 8003a40:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003a44:	6022      	str	r2, [r4, #0]
 8003a46:	e78f      	b.n	8003968 <_scanf_float+0x198>
 8003a48:	f04f 0a03 	mov.w	sl, #3
 8003a4c:	e78c      	b.n	8003968 <_scanf_float+0x198>
 8003a4e:	4649      	mov	r1, r9
 8003a50:	4640      	mov	r0, r8
 8003a52:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003a56:	4798      	blx	r3
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f43f aedf 	beq.w	800381c <_scanf_float+0x4c>
 8003a5e:	e6eb      	b.n	8003838 <_scanf_float+0x68>
 8003a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003a64:	464a      	mov	r2, r9
 8003a66:	4640      	mov	r0, r8
 8003a68:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003a6c:	4798      	blx	r3
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	6123      	str	r3, [r4, #16]
 8003a74:	e6eb      	b.n	800384e <_scanf_float+0x7e>
 8003a76:	1e6b      	subs	r3, r5, #1
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d824      	bhi.n	8003ac6 <_scanf_float+0x2f6>
 8003a7c:	2d02      	cmp	r5, #2
 8003a7e:	d836      	bhi.n	8003aee <_scanf_float+0x31e>
 8003a80:	9b01      	ldr	r3, [sp, #4]
 8003a82:	429e      	cmp	r6, r3
 8003a84:	f67f aee7 	bls.w	8003856 <_scanf_float+0x86>
 8003a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003a8c:	464a      	mov	r2, r9
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003a94:	4798      	blx	r3
 8003a96:	6923      	ldr	r3, [r4, #16]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	6123      	str	r3, [r4, #16]
 8003a9c:	e7f0      	b.n	8003a80 <_scanf_float+0x2b0>
 8003a9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003aa2:	464a      	mov	r2, r9
 8003aa4:	4640      	mov	r0, r8
 8003aa6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003aaa:	4798      	blx	r3
 8003aac:	6923      	ldr	r3, [r4, #16]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ab6:	fa5f fa8a 	uxtb.w	sl, sl
 8003aba:	f1ba 0f02 	cmp.w	sl, #2
 8003abe:	d1ee      	bne.n	8003a9e <_scanf_float+0x2ce>
 8003ac0:	3d03      	subs	r5, #3
 8003ac2:	b2ed      	uxtb	r5, r5
 8003ac4:	1b76      	subs	r6, r6, r5
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	05da      	lsls	r2, r3, #23
 8003aca:	d530      	bpl.n	8003b2e <_scanf_float+0x35e>
 8003acc:	055b      	lsls	r3, r3, #21
 8003ace:	d511      	bpl.n	8003af4 <_scanf_float+0x324>
 8003ad0:	9b01      	ldr	r3, [sp, #4]
 8003ad2:	429e      	cmp	r6, r3
 8003ad4:	f67f aebf 	bls.w	8003856 <_scanf_float+0x86>
 8003ad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003adc:	464a      	mov	r2, r9
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ae4:	4798      	blx	r3
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	6123      	str	r3, [r4, #16]
 8003aec:	e7f0      	b.n	8003ad0 <_scanf_float+0x300>
 8003aee:	46aa      	mov	sl, r5
 8003af0:	46b3      	mov	fp, r6
 8003af2:	e7de      	b.n	8003ab2 <_scanf_float+0x2e2>
 8003af4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	2965      	cmp	r1, #101	@ 0x65
 8003afc:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b00:	f106 35ff 	add.w	r5, r6, #4294967295
 8003b04:	6123      	str	r3, [r4, #16]
 8003b06:	d00c      	beq.n	8003b22 <_scanf_float+0x352>
 8003b08:	2945      	cmp	r1, #69	@ 0x45
 8003b0a:	d00a      	beq.n	8003b22 <_scanf_float+0x352>
 8003b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b10:	464a      	mov	r2, r9
 8003b12:	4640      	mov	r0, r8
 8003b14:	4798      	blx	r3
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	1eb5      	subs	r5, r6, #2
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	464a      	mov	r2, r9
 8003b24:	4640      	mov	r0, r8
 8003b26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003b2a:	4798      	blx	r3
 8003b2c:	462e      	mov	r6, r5
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	f012 0210 	ands.w	r2, r2, #16
 8003b34:	d001      	beq.n	8003b3a <_scanf_float+0x36a>
 8003b36:	2000      	movs	r0, #0
 8003b38:	e68e      	b.n	8003858 <_scanf_float+0x88>
 8003b3a:	7032      	strb	r2, [r6, #0]
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	d125      	bne.n	8003b94 <_scanf_float+0x3c4>
 8003b48:	9b02      	ldr	r3, [sp, #8]
 8003b4a:	429f      	cmp	r7, r3
 8003b4c:	d00a      	beq.n	8003b64 <_scanf_float+0x394>
 8003b4e:	1bda      	subs	r2, r3, r7
 8003b50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003b54:	429e      	cmp	r6, r3
 8003b56:	bf28      	it	cs
 8003b58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	491f      	ldr	r1, [pc, #124]	@ (8003bdc <_scanf_float+0x40c>)
 8003b60:	f000 f902 	bl	8003d68 <siprintf>
 8003b64:	2200      	movs	r2, #0
 8003b66:	4640      	mov	r0, r8
 8003b68:	9901      	ldr	r1, [sp, #4]
 8003b6a:	f002 fbe9 	bl	8006340 <_strtod_r>
 8003b6e:	9b03      	ldr	r3, [sp, #12]
 8003b70:	6825      	ldr	r5, [r4, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f015 0f02 	tst.w	r5, #2
 8003b78:	4606      	mov	r6, r0
 8003b7a:	460f      	mov	r7, r1
 8003b7c:	f103 0204 	add.w	r2, r3, #4
 8003b80:	d015      	beq.n	8003bae <_scanf_float+0x3de>
 8003b82:	9903      	ldr	r1, [sp, #12]
 8003b84:	600a      	str	r2, [r1, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	e9c3 6700 	strd	r6, r7, [r3]
 8003b8c:	68e3      	ldr	r3, [r4, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60e3      	str	r3, [r4, #12]
 8003b92:	e7d0      	b.n	8003b36 <_scanf_float+0x366>
 8003b94:	9b04      	ldr	r3, [sp, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0e4      	beq.n	8003b64 <_scanf_float+0x394>
 8003b9a:	9905      	ldr	r1, [sp, #20]
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	3101      	adds	r1, #1
 8003ba2:	f002 fc4d 	bl	8006440 <_strtol_r>
 8003ba6:	9b04      	ldr	r3, [sp, #16]
 8003ba8:	9e05      	ldr	r6, [sp, #20]
 8003baa:	1ac2      	subs	r2, r0, r3
 8003bac:	e7d0      	b.n	8003b50 <_scanf_float+0x380>
 8003bae:	076d      	lsls	r5, r5, #29
 8003bb0:	d4e7      	bmi.n	8003b82 <_scanf_float+0x3b2>
 8003bb2:	9d03      	ldr	r5, [sp, #12]
 8003bb4:	602a      	str	r2, [r5, #0]
 8003bb6:	681d      	ldr	r5, [r3, #0]
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	f7fc ff26 	bl	8000a0c <__aeabi_dcmpun>
 8003bc0:	b120      	cbz	r0, 8003bcc <_scanf_float+0x3fc>
 8003bc2:	4807      	ldr	r0, [pc, #28]	@ (8003be0 <_scanf_float+0x410>)
 8003bc4:	f000 f9c4 	bl	8003f50 <nanf>
 8003bc8:	6028      	str	r0, [r5, #0]
 8003bca:	e7df      	b.n	8003b8c <_scanf_float+0x3bc>
 8003bcc:	4630      	mov	r0, r6
 8003bce:	4639      	mov	r1, r7
 8003bd0:	f7fc ff7a 	bl	8000ac8 <__aeabi_d2f>
 8003bd4:	e7f8      	b.n	8003bc8 <_scanf_float+0x3f8>
 8003bd6:	2700      	movs	r7, #0
 8003bd8:	e633      	b.n	8003842 <_scanf_float+0x72>
 8003bda:	bf00      	nop
 8003bdc:	080083b6 	.word	0x080083b6
 8003be0:	080084f7 	.word	0x080084f7

08003be4 <std>:
 8003be4:	2300      	movs	r3, #0
 8003be6:	b510      	push	{r4, lr}
 8003be8:	4604      	mov	r4, r0
 8003bea:	e9c0 3300 	strd	r3, r3, [r0]
 8003bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bf2:	6083      	str	r3, [r0, #8]
 8003bf4:	8181      	strh	r1, [r0, #12]
 8003bf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bf8:	81c2      	strh	r2, [r0, #14]
 8003bfa:	6183      	str	r3, [r0, #24]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	2208      	movs	r2, #8
 8003c00:	305c      	adds	r0, #92	@ 0x5c
 8003c02:	f000 f916 	bl	8003e32 <memset>
 8003c06:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <std+0x58>)
 8003c08:	6224      	str	r4, [r4, #32]
 8003c0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <std+0x5c>)
 8003c0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <std+0x60>)
 8003c12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <std+0x64>)
 8003c16:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c18:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <std+0x68>)
 8003c1a:	429c      	cmp	r4, r3
 8003c1c:	d006      	beq.n	8003c2c <std+0x48>
 8003c1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c22:	4294      	cmp	r4, r2
 8003c24:	d002      	beq.n	8003c2c <std+0x48>
 8003c26:	33d0      	adds	r3, #208	@ 0xd0
 8003c28:	429c      	cmp	r4, r3
 8003c2a:	d105      	bne.n	8003c38 <std+0x54>
 8003c2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c34:	f000 b97a 	b.w	8003f2c <__retarget_lock_init_recursive>
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08003dad 	.word	0x08003dad
 8003c40:	08003dcf 	.word	0x08003dcf
 8003c44:	08003e07 	.word	0x08003e07
 8003c48:	08003e2b 	.word	0x08003e2b
 8003c4c:	2000065c 	.word	0x2000065c

08003c50 <stdio_exit_handler>:
 8003c50:	4a02      	ldr	r2, [pc, #8]	@ (8003c5c <stdio_exit_handler+0xc>)
 8003c52:	4903      	ldr	r1, [pc, #12]	@ (8003c60 <stdio_exit_handler+0x10>)
 8003c54:	4803      	ldr	r0, [pc, #12]	@ (8003c64 <stdio_exit_handler+0x14>)
 8003c56:	f000 b869 	b.w	8003d2c <_fwalk_sglue>
 8003c5a:	bf00      	nop
 8003c5c:	20000014 	.word	0x20000014
 8003c60:	080067f5 	.word	0x080067f5
 8003c64:	20000024 	.word	0x20000024

08003c68 <cleanup_stdio>:
 8003c68:	6841      	ldr	r1, [r0, #4]
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <cleanup_stdio+0x34>)
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	4604      	mov	r4, r0
 8003c72:	d001      	beq.n	8003c78 <cleanup_stdio+0x10>
 8003c74:	f002 fdbe 	bl	80067f4 <_fflush_r>
 8003c78:	68a1      	ldr	r1, [r4, #8]
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <cleanup_stdio+0x38>)
 8003c7c:	4299      	cmp	r1, r3
 8003c7e:	d002      	beq.n	8003c86 <cleanup_stdio+0x1e>
 8003c80:	4620      	mov	r0, r4
 8003c82:	f002 fdb7 	bl	80067f4 <_fflush_r>
 8003c86:	68e1      	ldr	r1, [r4, #12]
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <cleanup_stdio+0x3c>)
 8003c8a:	4299      	cmp	r1, r3
 8003c8c:	d004      	beq.n	8003c98 <cleanup_stdio+0x30>
 8003c8e:	4620      	mov	r0, r4
 8003c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c94:	f002 bdae 	b.w	80067f4 <_fflush_r>
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000065c 	.word	0x2000065c
 8003ca0:	200006c4 	.word	0x200006c4
 8003ca4:	2000072c 	.word	0x2000072c

08003ca8 <global_stdio_init.part.0>:
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <global_stdio_init.part.0+0x30>)
 8003cac:	4c0b      	ldr	r4, [pc, #44]	@ (8003cdc <global_stdio_init.part.0+0x34>)
 8003cae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce0 <global_stdio_init.part.0+0x38>)
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f7ff ff94 	bl	8003be4 <std>
 8003cbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	2109      	movs	r1, #9
 8003cc4:	f7ff ff8e 	bl	8003be4 <std>
 8003cc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ccc:	2202      	movs	r2, #2
 8003cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd2:	2112      	movs	r1, #18
 8003cd4:	f7ff bf86 	b.w	8003be4 <std>
 8003cd8:	20000794 	.word	0x20000794
 8003cdc:	2000065c 	.word	0x2000065c
 8003ce0:	08003c51 	.word	0x08003c51

08003ce4 <__sfp_lock_acquire>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	@ (8003cec <__sfp_lock_acquire+0x8>)
 8003ce6:	f000 b922 	b.w	8003f2e <__retarget_lock_acquire_recursive>
 8003cea:	bf00      	nop
 8003cec:	2000079d 	.word	0x2000079d

08003cf0 <__sfp_lock_release>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	@ (8003cf8 <__sfp_lock_release+0x8>)
 8003cf2:	f000 b91d 	b.w	8003f30 <__retarget_lock_release_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	2000079d 	.word	0x2000079d

08003cfc <__sinit>:
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	4604      	mov	r4, r0
 8003d00:	f7ff fff0 	bl	8003ce4 <__sfp_lock_acquire>
 8003d04:	6a23      	ldr	r3, [r4, #32]
 8003d06:	b11b      	cbz	r3, 8003d10 <__sinit+0x14>
 8003d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0c:	f7ff bff0 	b.w	8003cf0 <__sfp_lock_release>
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <__sinit+0x28>)
 8003d12:	6223      	str	r3, [r4, #32]
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <__sinit+0x2c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f5      	bne.n	8003d08 <__sinit+0xc>
 8003d1c:	f7ff ffc4 	bl	8003ca8 <global_stdio_init.part.0>
 8003d20:	e7f2      	b.n	8003d08 <__sinit+0xc>
 8003d22:	bf00      	nop
 8003d24:	08003c69 	.word	0x08003c69
 8003d28:	20000794 	.word	0x20000794

08003d2c <_fwalk_sglue>:
 8003d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d30:	4607      	mov	r7, r0
 8003d32:	4688      	mov	r8, r1
 8003d34:	4614      	mov	r4, r2
 8003d36:	2600      	movs	r6, #0
 8003d38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d3c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d40:	d505      	bpl.n	8003d4e <_fwalk_sglue+0x22>
 8003d42:	6824      	ldr	r4, [r4, #0]
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d1f7      	bne.n	8003d38 <_fwalk_sglue+0xc>
 8003d48:	4630      	mov	r0, r6
 8003d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d907      	bls.n	8003d64 <_fwalk_sglue+0x38>
 8003d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	d003      	beq.n	8003d64 <_fwalk_sglue+0x38>
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4638      	mov	r0, r7
 8003d60:	47c0      	blx	r8
 8003d62:	4306      	orrs	r6, r0
 8003d64:	3568      	adds	r5, #104	@ 0x68
 8003d66:	e7e9      	b.n	8003d3c <_fwalk_sglue+0x10>

08003d68 <siprintf>:
 8003d68:	b40e      	push	{r1, r2, r3}
 8003d6a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	2400      	movs	r4, #0
 8003d72:	b09d      	sub	sp, #116	@ 0x74
 8003d74:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003d76:	9002      	str	r0, [sp, #8]
 8003d78:	9006      	str	r0, [sp, #24]
 8003d7a:	9107      	str	r1, [sp, #28]
 8003d7c:	9104      	str	r1, [sp, #16]
 8003d7e:	4809      	ldr	r0, [pc, #36]	@ (8003da4 <siprintf+0x3c>)
 8003d80:	4909      	ldr	r1, [pc, #36]	@ (8003da8 <siprintf+0x40>)
 8003d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d86:	9105      	str	r1, [sp, #20]
 8003d88:	6800      	ldr	r0, [r0, #0]
 8003d8a:	a902      	add	r1, sp, #8
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003d90:	f002 fbb4 	bl	80064fc <_svfiprintf_r>
 8003d94:	9b02      	ldr	r3, [sp, #8]
 8003d96:	701c      	strb	r4, [r3, #0]
 8003d98:	b01d      	add	sp, #116	@ 0x74
 8003d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d9e:	b003      	add	sp, #12
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000020 	.word	0x20000020
 8003da8:	ffff0208 	.word	0xffff0208

08003dac <__sread>:
 8003dac:	b510      	push	{r4, lr}
 8003dae:	460c      	mov	r4, r1
 8003db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db4:	f000 f86c 	bl	8003e90 <_read_r>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	bfab      	itete	ge
 8003dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003dc0:	181b      	addge	r3, r3, r0
 8003dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dc6:	bfac      	ite	ge
 8003dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dca:	81a3      	strhlt	r3, [r4, #12]
 8003dcc:	bd10      	pop	{r4, pc}

08003dce <__swrite>:
 8003dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd2:	461f      	mov	r7, r3
 8003dd4:	898b      	ldrh	r3, [r1, #12]
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	05db      	lsls	r3, r3, #23
 8003dda:	460c      	mov	r4, r1
 8003ddc:	4616      	mov	r6, r2
 8003dde:	d505      	bpl.n	8003dec <__swrite+0x1e>
 8003de0:	2302      	movs	r3, #2
 8003de2:	2200      	movs	r2, #0
 8003de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de8:	f000 f840 	bl	8003e6c <_lseek_r>
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	4632      	mov	r2, r6
 8003df0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003df4:	81a3      	strh	r3, [r4, #12]
 8003df6:	4628      	mov	r0, r5
 8003df8:	463b      	mov	r3, r7
 8003dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e02:	f000 b857 	b.w	8003eb4 <_write_r>

08003e06 <__sseek>:
 8003e06:	b510      	push	{r4, lr}
 8003e08:	460c      	mov	r4, r1
 8003e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e0e:	f000 f82d 	bl	8003e6c <_lseek_r>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	bf15      	itete	ne
 8003e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e22:	81a3      	strheq	r3, [r4, #12]
 8003e24:	bf18      	it	ne
 8003e26:	81a3      	strhne	r3, [r4, #12]
 8003e28:	bd10      	pop	{r4, pc}

08003e2a <__sclose>:
 8003e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2e:	f000 b80d 	b.w	8003e4c <_close_r>

08003e32 <memset>:
 8003e32:	4603      	mov	r3, r0
 8003e34:	4402      	add	r2, r0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d100      	bne.n	8003e3c <memset+0xa>
 8003e3a:	4770      	bx	lr
 8003e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e40:	e7f9      	b.n	8003e36 <memset+0x4>
	...

08003e44 <_localeconv_r>:
 8003e44:	4800      	ldr	r0, [pc, #0]	@ (8003e48 <_localeconv_r+0x4>)
 8003e46:	4770      	bx	lr
 8003e48:	20000160 	.word	0x20000160

08003e4c <_close_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	2300      	movs	r3, #0
 8003e50:	4d05      	ldr	r5, [pc, #20]	@ (8003e68 <_close_r+0x1c>)
 8003e52:	4604      	mov	r4, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	f7fd fb3d 	bl	80014d6 <_close>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_close_r+0x1a>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_close_r+0x1a>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	20000798 	.word	0x20000798

08003e6c <_lseek_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4604      	mov	r4, r0
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	2200      	movs	r2, #0
 8003e76:	4d05      	ldr	r5, [pc, #20]	@ (8003e8c <_lseek_r+0x20>)
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fd fb4f 	bl	800151e <_lseek>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_lseek_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_lseek_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000798 	.word	0x20000798

08003e90 <_read_r>:
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	4604      	mov	r4, r0
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4d05      	ldr	r5, [pc, #20]	@ (8003eb0 <_read_r+0x20>)
 8003e9c:	602a      	str	r2, [r5, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f7fd fae0 	bl	8001464 <_read>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_read_r+0x1e>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_read_r+0x1e>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	20000798 	.word	0x20000798

08003eb4 <_write_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4d05      	ldr	r5, [pc, #20]	@ (8003ed4 <_write_r+0x20>)
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f7fd faeb 	bl	800149e <_write>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_write_r+0x1e>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_write_r+0x1e>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20000798 	.word	0x20000798

08003ed8 <__errno>:
 8003ed8:	4b01      	ldr	r3, [pc, #4]	@ (8003ee0 <__errno+0x8>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000020 	.word	0x20000020

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	4d0c      	ldr	r5, [pc, #48]	@ (8003f1c <__libc_init_array+0x38>)
 8003eea:	4c0d      	ldr	r4, [pc, #52]	@ (8003f20 <__libc_init_array+0x3c>)
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	f003 fb6a 	bl	80075cc <_init>
 8003ef8:	2600      	movs	r6, #0
 8003efa:	4d0a      	ldr	r5, [pc, #40]	@ (8003f24 <__libc_init_array+0x40>)
 8003efc:	4c0a      	ldr	r4, [pc, #40]	@ (8003f28 <__libc_init_array+0x44>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	080087b4 	.word	0x080087b4
 8003f20:	080087b4 	.word	0x080087b4
 8003f24:	080087b4 	.word	0x080087b4
 8003f28:	080087b8 	.word	0x080087b8

08003f2c <__retarget_lock_init_recursive>:
 8003f2c:	4770      	bx	lr

08003f2e <__retarget_lock_acquire_recursive>:
 8003f2e:	4770      	bx	lr

08003f30 <__retarget_lock_release_recursive>:
 8003f30:	4770      	bx	lr

08003f32 <memchr>:
 8003f32:	4603      	mov	r3, r0
 8003f34:	b510      	push	{r4, lr}
 8003f36:	b2c9      	uxtb	r1, r1
 8003f38:	4402      	add	r2, r0
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	d101      	bne.n	8003f44 <memchr+0x12>
 8003f40:	2000      	movs	r0, #0
 8003f42:	e003      	b.n	8003f4c <memchr+0x1a>
 8003f44:	7804      	ldrb	r4, [r0, #0]
 8003f46:	3301      	adds	r3, #1
 8003f48:	428c      	cmp	r4, r1
 8003f4a:	d1f6      	bne.n	8003f3a <memchr+0x8>
 8003f4c:	bd10      	pop	{r4, pc}
	...

08003f50 <nanf>:
 8003f50:	4800      	ldr	r0, [pc, #0]	@ (8003f54 <nanf+0x4>)
 8003f52:	4770      	bx	lr
 8003f54:	7fc00000 	.word	0x7fc00000

08003f58 <quorem>:
 8003f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5c:	6903      	ldr	r3, [r0, #16]
 8003f5e:	690c      	ldr	r4, [r1, #16]
 8003f60:	4607      	mov	r7, r0
 8003f62:	42a3      	cmp	r3, r4
 8003f64:	db7e      	blt.n	8004064 <quorem+0x10c>
 8003f66:	3c01      	subs	r4, #1
 8003f68:	00a3      	lsls	r3, r4, #2
 8003f6a:	f100 0514 	add.w	r5, r0, #20
 8003f6e:	f101 0814 	add.w	r8, r1, #20
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f82:	3301      	adds	r3, #1
 8003f84:	429a      	cmp	r2, r3
 8003f86:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f8e:	d32e      	bcc.n	8003fee <quorem+0x96>
 8003f90:	f04f 0a00 	mov.w	sl, #0
 8003f94:	46c4      	mov	ip, r8
 8003f96:	46ae      	mov	lr, r5
 8003f98:	46d3      	mov	fp, sl
 8003f9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f9e:	b298      	uxth	r0, r3
 8003fa0:	fb06 a000 	mla	r0, r6, r0, sl
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	0c02      	lsrs	r2, r0, #16
 8003fa8:	fb06 2303 	mla	r3, r6, r3, r2
 8003fac:	f8de 2000 	ldr.w	r2, [lr]
 8003fb0:	b280      	uxth	r0, r0
 8003fb2:	b292      	uxth	r2, r2
 8003fb4:	1a12      	subs	r2, r2, r0
 8003fb6:	445a      	add	r2, fp
 8003fb8:	f8de 0000 	ldr.w	r0, [lr]
 8003fbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003fc6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003fd0:	45e1      	cmp	r9, ip
 8003fd2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003fd6:	f84e 2b04 	str.w	r2, [lr], #4
 8003fda:	d2de      	bcs.n	8003f9a <quorem+0x42>
 8003fdc:	9b00      	ldr	r3, [sp, #0]
 8003fde:	58eb      	ldr	r3, [r5, r3]
 8003fe0:	b92b      	cbnz	r3, 8003fee <quorem+0x96>
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	3b04      	subs	r3, #4
 8003fe6:	429d      	cmp	r5, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	d32f      	bcc.n	800404c <quorem+0xf4>
 8003fec:	613c      	str	r4, [r7, #16]
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f001 f9c8 	bl	8005384 <__mcmp>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	db25      	blt.n	8004044 <quorem+0xec>
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004000:	f8d1 c000 	ldr.w	ip, [r1]
 8004004:	fa1f fe82 	uxth.w	lr, r2
 8004008:	fa1f f38c 	uxth.w	r3, ip
 800400c:	eba3 030e 	sub.w	r3, r3, lr
 8004010:	4403      	add	r3, r0
 8004012:	0c12      	lsrs	r2, r2, #16
 8004014:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004018:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800401c:	b29b      	uxth	r3, r3
 800401e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004022:	45c1      	cmp	r9, r8
 8004024:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004028:	f841 3b04 	str.w	r3, [r1], #4
 800402c:	d2e6      	bcs.n	8003ffc <quorem+0xa4>
 800402e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004036:	b922      	cbnz	r2, 8004042 <quorem+0xea>
 8004038:	3b04      	subs	r3, #4
 800403a:	429d      	cmp	r5, r3
 800403c:	461a      	mov	r2, r3
 800403e:	d30b      	bcc.n	8004058 <quorem+0x100>
 8004040:	613c      	str	r4, [r7, #16]
 8004042:	3601      	adds	r6, #1
 8004044:	4630      	mov	r0, r6
 8004046:	b003      	add	sp, #12
 8004048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	3b04      	subs	r3, #4
 8004050:	2a00      	cmp	r2, #0
 8004052:	d1cb      	bne.n	8003fec <quorem+0x94>
 8004054:	3c01      	subs	r4, #1
 8004056:	e7c6      	b.n	8003fe6 <quorem+0x8e>
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	3b04      	subs	r3, #4
 800405c:	2a00      	cmp	r2, #0
 800405e:	d1ef      	bne.n	8004040 <quorem+0xe8>
 8004060:	3c01      	subs	r4, #1
 8004062:	e7ea      	b.n	800403a <quorem+0xe2>
 8004064:	2000      	movs	r0, #0
 8004066:	e7ee      	b.n	8004046 <quorem+0xee>

08004068 <_dtoa_r>:
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	4614      	mov	r4, r2
 800406e:	461d      	mov	r5, r3
 8004070:	69c7      	ldr	r7, [r0, #28]
 8004072:	b097      	sub	sp, #92	@ 0x5c
 8004074:	4681      	mov	r9, r0
 8004076:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800407a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800407c:	b97f      	cbnz	r7, 800409e <_dtoa_r+0x36>
 800407e:	2010      	movs	r0, #16
 8004080:	f000 fe0e 	bl	8004ca0 <malloc>
 8004084:	4602      	mov	r2, r0
 8004086:	f8c9 001c 	str.w	r0, [r9, #28]
 800408a:	b920      	cbnz	r0, 8004096 <_dtoa_r+0x2e>
 800408c:	21ef      	movs	r1, #239	@ 0xef
 800408e:	4bac      	ldr	r3, [pc, #688]	@ (8004340 <_dtoa_r+0x2d8>)
 8004090:	48ac      	ldr	r0, [pc, #688]	@ (8004344 <_dtoa_r+0x2dc>)
 8004092:	f002 fc27 	bl	80068e4 <__assert_func>
 8004096:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800409a:	6007      	str	r7, [r0, #0]
 800409c:	60c7      	str	r7, [r0, #12]
 800409e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	b159      	cbz	r1, 80040be <_dtoa_r+0x56>
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	2301      	movs	r3, #1
 80040aa:	4093      	lsls	r3, r2
 80040ac:	604a      	str	r2, [r1, #4]
 80040ae:	608b      	str	r3, [r1, #8]
 80040b0:	4648      	mov	r0, r9
 80040b2:	f000 feeb 	bl	8004e8c <_Bfree>
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	1e2b      	subs	r3, r5, #0
 80040c0:	bfaf      	iteee	ge
 80040c2:	2300      	movge	r3, #0
 80040c4:	2201      	movlt	r2, #1
 80040c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80040ca:	9307      	strlt	r3, [sp, #28]
 80040cc:	bfa8      	it	ge
 80040ce:	6033      	strge	r3, [r6, #0]
 80040d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80040d4:	4b9c      	ldr	r3, [pc, #624]	@ (8004348 <_dtoa_r+0x2e0>)
 80040d6:	bfb8      	it	lt
 80040d8:	6032      	strlt	r2, [r6, #0]
 80040da:	ea33 0308 	bics.w	r3, r3, r8
 80040de:	d112      	bne.n	8004106 <_dtoa_r+0x9e>
 80040e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80040e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80040ec:	4323      	orrs	r3, r4
 80040ee:	f000 855e 	beq.w	8004bae <_dtoa_r+0xb46>
 80040f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800434c <_dtoa_r+0x2e4>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8560 	beq.w	8004bbe <_dtoa_r+0xb56>
 80040fe:	f10a 0303 	add.w	r3, sl, #3
 8004102:	f000 bd5a 	b.w	8004bba <_dtoa_r+0xb52>
 8004106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800410a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800410e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004112:	2200      	movs	r2, #0
 8004114:	2300      	movs	r3, #0
 8004116:	f7fc fc47 	bl	80009a8 <__aeabi_dcmpeq>
 800411a:	4607      	mov	r7, r0
 800411c:	b158      	cbz	r0, 8004136 <_dtoa_r+0xce>
 800411e:	2301      	movs	r3, #1
 8004120:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004126:	b113      	cbz	r3, 800412e <_dtoa_r+0xc6>
 8004128:	4b89      	ldr	r3, [pc, #548]	@ (8004350 <_dtoa_r+0x2e8>)
 800412a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004354 <_dtoa_r+0x2ec>
 8004132:	f000 bd44 	b.w	8004bbe <_dtoa_r+0xb56>
 8004136:	ab14      	add	r3, sp, #80	@ 0x50
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	ab15      	add	r3, sp, #84	@ 0x54
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	4648      	mov	r0, r9
 8004140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004144:	f001 fa36 	bl	80055b4 <__d2b>
 8004148:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800414c:	9003      	str	r0, [sp, #12]
 800414e:	2e00      	cmp	r6, #0
 8004150:	d078      	beq.n	8004244 <_dtoa_r+0x1dc>
 8004152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004158:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800415c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004160:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004164:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004168:	9712      	str	r7, [sp, #72]	@ 0x48
 800416a:	4619      	mov	r1, r3
 800416c:	2200      	movs	r2, #0
 800416e:	4b7a      	ldr	r3, [pc, #488]	@ (8004358 <_dtoa_r+0x2f0>)
 8004170:	f7fb fffa 	bl	8000168 <__aeabi_dsub>
 8004174:	a36c      	add	r3, pc, #432	@ (adr r3, 8004328 <_dtoa_r+0x2c0>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc f9ad 	bl	80004d8 <__aeabi_dmul>
 800417e:	a36c      	add	r3, pc, #432	@ (adr r3, 8004330 <_dtoa_r+0x2c8>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fb fff2 	bl	800016c <__adddf3>
 8004188:	4604      	mov	r4, r0
 800418a:	4630      	mov	r0, r6
 800418c:	460d      	mov	r5, r1
 800418e:	f7fc f939 	bl	8000404 <__aeabi_i2d>
 8004192:	a369      	add	r3, pc, #420	@ (adr r3, 8004338 <_dtoa_r+0x2d0>)
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f7fc f99e 	bl	80004d8 <__aeabi_dmul>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4620      	mov	r0, r4
 80041a2:	4629      	mov	r1, r5
 80041a4:	f7fb ffe2 	bl	800016c <__adddf3>
 80041a8:	4604      	mov	r4, r0
 80041aa:	460d      	mov	r5, r1
 80041ac:	f7fc fc44 	bl	8000a38 <__aeabi_d2iz>
 80041b0:	2200      	movs	r2, #0
 80041b2:	4607      	mov	r7, r0
 80041b4:	2300      	movs	r3, #0
 80041b6:	4620      	mov	r0, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	f7fc fbff 	bl	80009bc <__aeabi_dcmplt>
 80041be:	b140      	cbz	r0, 80041d2 <_dtoa_r+0x16a>
 80041c0:	4638      	mov	r0, r7
 80041c2:	f7fc f91f 	bl	8000404 <__aeabi_i2d>
 80041c6:	4622      	mov	r2, r4
 80041c8:	462b      	mov	r3, r5
 80041ca:	f7fc fbed 	bl	80009a8 <__aeabi_dcmpeq>
 80041ce:	b900      	cbnz	r0, 80041d2 <_dtoa_r+0x16a>
 80041d0:	3f01      	subs	r7, #1
 80041d2:	2f16      	cmp	r7, #22
 80041d4:	d854      	bhi.n	8004280 <_dtoa_r+0x218>
 80041d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041da:	4b60      	ldr	r3, [pc, #384]	@ (800435c <_dtoa_r+0x2f4>)
 80041dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc fbea 	bl	80009bc <__aeabi_dcmplt>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d04b      	beq.n	8004284 <_dtoa_r+0x21c>
 80041ec:	2300      	movs	r3, #0
 80041ee:	3f01      	subs	r7, #1
 80041f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80041f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80041f4:	1b9b      	subs	r3, r3, r6
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	bf49      	itett	mi
 80041fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80041fe:	2300      	movpl	r3, #0
 8004200:	9304      	strmi	r3, [sp, #16]
 8004202:	2300      	movmi	r3, #0
 8004204:	9209      	str	r2, [sp, #36]	@ 0x24
 8004206:	bf54      	ite	pl
 8004208:	9304      	strpl	r3, [sp, #16]
 800420a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800420c:	2f00      	cmp	r7, #0
 800420e:	db3b      	blt.n	8004288 <_dtoa_r+0x220>
 8004210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004212:	970e      	str	r7, [sp, #56]	@ 0x38
 8004214:	443b      	add	r3, r7
 8004216:	9309      	str	r3, [sp, #36]	@ 0x24
 8004218:	2300      	movs	r3, #0
 800421a:	930a      	str	r3, [sp, #40]	@ 0x28
 800421c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800421e:	2b09      	cmp	r3, #9
 8004220:	d865      	bhi.n	80042ee <_dtoa_r+0x286>
 8004222:	2b05      	cmp	r3, #5
 8004224:	bfc4      	itt	gt
 8004226:	3b04      	subgt	r3, #4
 8004228:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800422a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800422c:	bfc8      	it	gt
 800422e:	2400      	movgt	r4, #0
 8004230:	f1a3 0302 	sub.w	r3, r3, #2
 8004234:	bfd8      	it	le
 8004236:	2401      	movle	r4, #1
 8004238:	2b03      	cmp	r3, #3
 800423a:	d864      	bhi.n	8004306 <_dtoa_r+0x29e>
 800423c:	e8df f003 	tbb	[pc, r3]
 8004240:	2c385553 	.word	0x2c385553
 8004244:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004248:	441e      	add	r6, r3
 800424a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800424e:	2b20      	cmp	r3, #32
 8004250:	bfc1      	itttt	gt
 8004252:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004256:	fa08 f803 	lslgt.w	r8, r8, r3
 800425a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800425e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004262:	bfd6      	itet	le
 8004264:	f1c3 0320 	rsble	r3, r3, #32
 8004268:	ea48 0003 	orrgt.w	r0, r8, r3
 800426c:	fa04 f003 	lslle.w	r0, r4, r3
 8004270:	f7fc f8b8 	bl	80003e4 <__aeabi_ui2d>
 8004274:	2201      	movs	r2, #1
 8004276:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800427a:	3e01      	subs	r6, #1
 800427c:	9212      	str	r2, [sp, #72]	@ 0x48
 800427e:	e774      	b.n	800416a <_dtoa_r+0x102>
 8004280:	2301      	movs	r3, #1
 8004282:	e7b5      	b.n	80041f0 <_dtoa_r+0x188>
 8004284:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004286:	e7b4      	b.n	80041f2 <_dtoa_r+0x18a>
 8004288:	9b04      	ldr	r3, [sp, #16]
 800428a:	1bdb      	subs	r3, r3, r7
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	427b      	negs	r3, r7
 8004290:	930a      	str	r3, [sp, #40]	@ 0x28
 8004292:	2300      	movs	r3, #0
 8004294:	930e      	str	r3, [sp, #56]	@ 0x38
 8004296:	e7c1      	b.n	800421c <_dtoa_r+0x1b4>
 8004298:	2301      	movs	r3, #1
 800429a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800429c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800429e:	eb07 0b03 	add.w	fp, r7, r3
 80042a2:	f10b 0301 	add.w	r3, fp, #1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	9308      	str	r3, [sp, #32]
 80042aa:	bfb8      	it	lt
 80042ac:	2301      	movlt	r3, #1
 80042ae:	e006      	b.n	80042be <_dtoa_r+0x256>
 80042b0:	2301      	movs	r3, #1
 80042b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dd28      	ble.n	800430c <_dtoa_r+0x2a4>
 80042ba:	469b      	mov	fp, r3
 80042bc:	9308      	str	r3, [sp, #32]
 80042be:	2100      	movs	r1, #0
 80042c0:	2204      	movs	r2, #4
 80042c2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80042c6:	f102 0514 	add.w	r5, r2, #20
 80042ca:	429d      	cmp	r5, r3
 80042cc:	d926      	bls.n	800431c <_dtoa_r+0x2b4>
 80042ce:	6041      	str	r1, [r0, #4]
 80042d0:	4648      	mov	r0, r9
 80042d2:	f000 fd9b 	bl	8004e0c <_Balloc>
 80042d6:	4682      	mov	sl, r0
 80042d8:	2800      	cmp	r0, #0
 80042da:	d143      	bne.n	8004364 <_dtoa_r+0x2fc>
 80042dc:	4602      	mov	r2, r0
 80042de:	f240 11af 	movw	r1, #431	@ 0x1af
 80042e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004360 <_dtoa_r+0x2f8>)
 80042e4:	e6d4      	b.n	8004090 <_dtoa_r+0x28>
 80042e6:	2300      	movs	r3, #0
 80042e8:	e7e3      	b.n	80042b2 <_dtoa_r+0x24a>
 80042ea:	2300      	movs	r3, #0
 80042ec:	e7d5      	b.n	800429a <_dtoa_r+0x232>
 80042ee:	2401      	movs	r4, #1
 80042f0:	2300      	movs	r3, #0
 80042f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80042f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80042f6:	f04f 3bff 	mov.w	fp, #4294967295
 80042fa:	2200      	movs	r2, #0
 80042fc:	2312      	movs	r3, #18
 80042fe:	f8cd b020 	str.w	fp, [sp, #32]
 8004302:	9221      	str	r2, [sp, #132]	@ 0x84
 8004304:	e7db      	b.n	80042be <_dtoa_r+0x256>
 8004306:	2301      	movs	r3, #1
 8004308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800430a:	e7f4      	b.n	80042f6 <_dtoa_r+0x28e>
 800430c:	f04f 0b01 	mov.w	fp, #1
 8004310:	465b      	mov	r3, fp
 8004312:	f8cd b020 	str.w	fp, [sp, #32]
 8004316:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800431a:	e7d0      	b.n	80042be <_dtoa_r+0x256>
 800431c:	3101      	adds	r1, #1
 800431e:	0052      	lsls	r2, r2, #1
 8004320:	e7d1      	b.n	80042c6 <_dtoa_r+0x25e>
 8004322:	bf00      	nop
 8004324:	f3af 8000 	nop.w
 8004328:	636f4361 	.word	0x636f4361
 800432c:	3fd287a7 	.word	0x3fd287a7
 8004330:	8b60c8b3 	.word	0x8b60c8b3
 8004334:	3fc68a28 	.word	0x3fc68a28
 8004338:	509f79fb 	.word	0x509f79fb
 800433c:	3fd34413 	.word	0x3fd34413
 8004340:	080083c8 	.word	0x080083c8
 8004344:	080083df 	.word	0x080083df
 8004348:	7ff00000 	.word	0x7ff00000
 800434c:	080083c4 	.word	0x080083c4
 8004350:	08008393 	.word	0x08008393
 8004354:	08008392 	.word	0x08008392
 8004358:	3ff80000 	.word	0x3ff80000
 800435c:	08008590 	.word	0x08008590
 8004360:	08008437 	.word	0x08008437
 8004364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004368:	6018      	str	r0, [r3, #0]
 800436a:	9b08      	ldr	r3, [sp, #32]
 800436c:	2b0e      	cmp	r3, #14
 800436e:	f200 80a1 	bhi.w	80044b4 <_dtoa_r+0x44c>
 8004372:	2c00      	cmp	r4, #0
 8004374:	f000 809e 	beq.w	80044b4 <_dtoa_r+0x44c>
 8004378:	2f00      	cmp	r7, #0
 800437a:	dd33      	ble.n	80043e4 <_dtoa_r+0x37c>
 800437c:	4b9c      	ldr	r3, [pc, #624]	@ (80045f0 <_dtoa_r+0x588>)
 800437e:	f007 020f 	and.w	r2, r7, #15
 8004382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004386:	05f8      	lsls	r0, r7, #23
 8004388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800438c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004390:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004394:	d516      	bpl.n	80043c4 <_dtoa_r+0x35c>
 8004396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800439a:	4b96      	ldr	r3, [pc, #600]	@ (80045f4 <_dtoa_r+0x58c>)
 800439c:	2603      	movs	r6, #3
 800439e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043a2:	f7fc f9c3 	bl	800072c <__aeabi_ddiv>
 80043a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043aa:	f004 040f 	and.w	r4, r4, #15
 80043ae:	4d91      	ldr	r5, [pc, #580]	@ (80045f4 <_dtoa_r+0x58c>)
 80043b0:	b954      	cbnz	r4, 80043c8 <_dtoa_r+0x360>
 80043b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80043b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ba:	f7fc f9b7 	bl	800072c <__aeabi_ddiv>
 80043be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043c2:	e028      	b.n	8004416 <_dtoa_r+0x3ae>
 80043c4:	2602      	movs	r6, #2
 80043c6:	e7f2      	b.n	80043ae <_dtoa_r+0x346>
 80043c8:	07e1      	lsls	r1, r4, #31
 80043ca:	d508      	bpl.n	80043de <_dtoa_r+0x376>
 80043cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80043d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043d4:	f7fc f880 	bl	80004d8 <__aeabi_dmul>
 80043d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80043dc:	3601      	adds	r6, #1
 80043de:	1064      	asrs	r4, r4, #1
 80043e0:	3508      	adds	r5, #8
 80043e2:	e7e5      	b.n	80043b0 <_dtoa_r+0x348>
 80043e4:	f000 80af 	beq.w	8004546 <_dtoa_r+0x4de>
 80043e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043ec:	427c      	negs	r4, r7
 80043ee:	4b80      	ldr	r3, [pc, #512]	@ (80045f0 <_dtoa_r+0x588>)
 80043f0:	f004 020f 	and.w	r2, r4, #15
 80043f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fc f86c 	bl	80004d8 <__aeabi_dmul>
 8004400:	2602      	movs	r6, #2
 8004402:	2300      	movs	r3, #0
 8004404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004408:	4d7a      	ldr	r5, [pc, #488]	@ (80045f4 <_dtoa_r+0x58c>)
 800440a:	1124      	asrs	r4, r4, #4
 800440c:	2c00      	cmp	r4, #0
 800440e:	f040 808f 	bne.w	8004530 <_dtoa_r+0x4c8>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1d3      	bne.n	80043be <_dtoa_r+0x356>
 8004416:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800441a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8094 	beq.w	800454a <_dtoa_r+0x4e2>
 8004422:	2200      	movs	r2, #0
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	4b73      	ldr	r3, [pc, #460]	@ (80045f8 <_dtoa_r+0x590>)
 800442a:	f7fc fac7 	bl	80009bc <__aeabi_dcmplt>
 800442e:	2800      	cmp	r0, #0
 8004430:	f000 808b 	beq.w	800454a <_dtoa_r+0x4e2>
 8004434:	9b08      	ldr	r3, [sp, #32]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8087 	beq.w	800454a <_dtoa_r+0x4e2>
 800443c:	f1bb 0f00 	cmp.w	fp, #0
 8004440:	dd34      	ble.n	80044ac <_dtoa_r+0x444>
 8004442:	4620      	mov	r0, r4
 8004444:	2200      	movs	r2, #0
 8004446:	4629      	mov	r1, r5
 8004448:	4b6c      	ldr	r3, [pc, #432]	@ (80045fc <_dtoa_r+0x594>)
 800444a:	f7fc f845 	bl	80004d8 <__aeabi_dmul>
 800444e:	465c      	mov	r4, fp
 8004450:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004454:	f107 38ff 	add.w	r8, r7, #4294967295
 8004458:	3601      	adds	r6, #1
 800445a:	4630      	mov	r0, r6
 800445c:	f7fb ffd2 	bl	8000404 <__aeabi_i2d>
 8004460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004464:	f7fc f838 	bl	80004d8 <__aeabi_dmul>
 8004468:	2200      	movs	r2, #0
 800446a:	4b65      	ldr	r3, [pc, #404]	@ (8004600 <_dtoa_r+0x598>)
 800446c:	f7fb fe7e 	bl	800016c <__adddf3>
 8004470:	4605      	mov	r5, r0
 8004472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004476:	2c00      	cmp	r4, #0
 8004478:	d16a      	bne.n	8004550 <_dtoa_r+0x4e8>
 800447a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800447e:	2200      	movs	r2, #0
 8004480:	4b60      	ldr	r3, [pc, #384]	@ (8004604 <_dtoa_r+0x59c>)
 8004482:	f7fb fe71 	bl	8000168 <__aeabi_dsub>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800448e:	462a      	mov	r2, r5
 8004490:	4633      	mov	r3, r6
 8004492:	f7fc fab1 	bl	80009f8 <__aeabi_dcmpgt>
 8004496:	2800      	cmp	r0, #0
 8004498:	f040 8298 	bne.w	80049cc <_dtoa_r+0x964>
 800449c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044a0:	462a      	mov	r2, r5
 80044a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80044a6:	f7fc fa89 	bl	80009bc <__aeabi_dcmplt>
 80044aa:	bb38      	cbnz	r0, 80044fc <_dtoa_r+0x494>
 80044ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80044b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80044b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f2c0 8157 	blt.w	800476a <_dtoa_r+0x702>
 80044bc:	2f0e      	cmp	r7, #14
 80044be:	f300 8154 	bgt.w	800476a <_dtoa_r+0x702>
 80044c2:	4b4b      	ldr	r3, [pc, #300]	@ (80045f0 <_dtoa_r+0x588>)
 80044c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80044d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f280 80e5 	bge.w	80046a2 <_dtoa_r+0x63a>
 80044d8:	9b08      	ldr	r3, [sp, #32]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f300 80e1 	bgt.w	80046a2 <_dtoa_r+0x63a>
 80044e0:	d10c      	bne.n	80044fc <_dtoa_r+0x494>
 80044e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044e6:	2200      	movs	r2, #0
 80044e8:	4b46      	ldr	r3, [pc, #280]	@ (8004604 <_dtoa_r+0x59c>)
 80044ea:	f7fb fff5 	bl	80004d8 <__aeabi_dmul>
 80044ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044f2:	f7fc fa77 	bl	80009e4 <__aeabi_dcmpge>
 80044f6:	2800      	cmp	r0, #0
 80044f8:	f000 8266 	beq.w	80049c8 <_dtoa_r+0x960>
 80044fc:	2400      	movs	r4, #0
 80044fe:	4625      	mov	r5, r4
 8004500:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004502:	4656      	mov	r6, sl
 8004504:	ea6f 0803 	mvn.w	r8, r3
 8004508:	2700      	movs	r7, #0
 800450a:	4621      	mov	r1, r4
 800450c:	4648      	mov	r0, r9
 800450e:	f000 fcbd 	bl	8004e8c <_Bfree>
 8004512:	2d00      	cmp	r5, #0
 8004514:	f000 80bd 	beq.w	8004692 <_dtoa_r+0x62a>
 8004518:	b12f      	cbz	r7, 8004526 <_dtoa_r+0x4be>
 800451a:	42af      	cmp	r7, r5
 800451c:	d003      	beq.n	8004526 <_dtoa_r+0x4be>
 800451e:	4639      	mov	r1, r7
 8004520:	4648      	mov	r0, r9
 8004522:	f000 fcb3 	bl	8004e8c <_Bfree>
 8004526:	4629      	mov	r1, r5
 8004528:	4648      	mov	r0, r9
 800452a:	f000 fcaf 	bl	8004e8c <_Bfree>
 800452e:	e0b0      	b.n	8004692 <_dtoa_r+0x62a>
 8004530:	07e2      	lsls	r2, r4, #31
 8004532:	d505      	bpl.n	8004540 <_dtoa_r+0x4d8>
 8004534:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004538:	f7fb ffce 	bl	80004d8 <__aeabi_dmul>
 800453c:	2301      	movs	r3, #1
 800453e:	3601      	adds	r6, #1
 8004540:	1064      	asrs	r4, r4, #1
 8004542:	3508      	adds	r5, #8
 8004544:	e762      	b.n	800440c <_dtoa_r+0x3a4>
 8004546:	2602      	movs	r6, #2
 8004548:	e765      	b.n	8004416 <_dtoa_r+0x3ae>
 800454a:	46b8      	mov	r8, r7
 800454c:	9c08      	ldr	r4, [sp, #32]
 800454e:	e784      	b.n	800445a <_dtoa_r+0x3f2>
 8004550:	4b27      	ldr	r3, [pc, #156]	@ (80045f0 <_dtoa_r+0x588>)
 8004552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004554:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800455c:	4454      	add	r4, sl
 800455e:	2900      	cmp	r1, #0
 8004560:	d054      	beq.n	800460c <_dtoa_r+0x5a4>
 8004562:	2000      	movs	r0, #0
 8004564:	4928      	ldr	r1, [pc, #160]	@ (8004608 <_dtoa_r+0x5a0>)
 8004566:	f7fc f8e1 	bl	800072c <__aeabi_ddiv>
 800456a:	4633      	mov	r3, r6
 800456c:	462a      	mov	r2, r5
 800456e:	f7fb fdfb 	bl	8000168 <__aeabi_dsub>
 8004572:	4656      	mov	r6, sl
 8004574:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800457c:	f7fc fa5c 	bl	8000a38 <__aeabi_d2iz>
 8004580:	4605      	mov	r5, r0
 8004582:	f7fb ff3f 	bl	8000404 <__aeabi_i2d>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800458e:	f7fb fdeb 	bl	8000168 <__aeabi_dsub>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	3530      	adds	r5, #48	@ 0x30
 8004598:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800459c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045a0:	f806 5b01 	strb.w	r5, [r6], #1
 80045a4:	f7fc fa0a 	bl	80009bc <__aeabi_dcmplt>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d172      	bne.n	8004692 <_dtoa_r+0x62a>
 80045ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045b0:	2000      	movs	r0, #0
 80045b2:	4911      	ldr	r1, [pc, #68]	@ (80045f8 <_dtoa_r+0x590>)
 80045b4:	f7fb fdd8 	bl	8000168 <__aeabi_dsub>
 80045b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045bc:	f7fc f9fe 	bl	80009bc <__aeabi_dcmplt>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f040 80b4 	bne.w	800472e <_dtoa_r+0x6c6>
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	f43f af70 	beq.w	80044ac <_dtoa_r+0x444>
 80045cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80045d0:	2200      	movs	r2, #0
 80045d2:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <_dtoa_r+0x594>)
 80045d4:	f7fb ff80 	bl	80004d8 <__aeabi_dmul>
 80045d8:	2200      	movs	r2, #0
 80045da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <_dtoa_r+0x594>)
 80045e4:	f7fb ff78 	bl	80004d8 <__aeabi_dmul>
 80045e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045ec:	e7c4      	b.n	8004578 <_dtoa_r+0x510>
 80045ee:	bf00      	nop
 80045f0:	08008590 	.word	0x08008590
 80045f4:	08008568 	.word	0x08008568
 80045f8:	3ff00000 	.word	0x3ff00000
 80045fc:	40240000 	.word	0x40240000
 8004600:	401c0000 	.word	0x401c0000
 8004604:	40140000 	.word	0x40140000
 8004608:	3fe00000 	.word	0x3fe00000
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	f7fb ff62 	bl	80004d8 <__aeabi_dmul>
 8004614:	4656      	mov	r6, sl
 8004616:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800461a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800461c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004620:	f7fc fa0a 	bl	8000a38 <__aeabi_d2iz>
 8004624:	4605      	mov	r5, r0
 8004626:	f7fb feed 	bl	8000404 <__aeabi_i2d>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004632:	f7fb fd99 	bl	8000168 <__aeabi_dsub>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	3530      	adds	r5, #48	@ 0x30
 800463c:	f806 5b01 	strb.w	r5, [r6], #1
 8004640:	42a6      	cmp	r6, r4
 8004642:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	d124      	bne.n	8004696 <_dtoa_r+0x62e>
 800464c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004650:	4bae      	ldr	r3, [pc, #696]	@ (800490c <_dtoa_r+0x8a4>)
 8004652:	f7fb fd8b 	bl	800016c <__adddf3>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800465e:	f7fc f9cb 	bl	80009f8 <__aeabi_dcmpgt>
 8004662:	2800      	cmp	r0, #0
 8004664:	d163      	bne.n	800472e <_dtoa_r+0x6c6>
 8004666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800466a:	2000      	movs	r0, #0
 800466c:	49a7      	ldr	r1, [pc, #668]	@ (800490c <_dtoa_r+0x8a4>)
 800466e:	f7fb fd7b 	bl	8000168 <__aeabi_dsub>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800467a:	f7fc f99f 	bl	80009bc <__aeabi_dcmplt>
 800467e:	2800      	cmp	r0, #0
 8004680:	f43f af14 	beq.w	80044ac <_dtoa_r+0x444>
 8004684:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004686:	1e73      	subs	r3, r6, #1
 8004688:	9313      	str	r3, [sp, #76]	@ 0x4c
 800468a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800468e:	2b30      	cmp	r3, #48	@ 0x30
 8004690:	d0f8      	beq.n	8004684 <_dtoa_r+0x61c>
 8004692:	4647      	mov	r7, r8
 8004694:	e03b      	b.n	800470e <_dtoa_r+0x6a6>
 8004696:	4b9e      	ldr	r3, [pc, #632]	@ (8004910 <_dtoa_r+0x8a8>)
 8004698:	f7fb ff1e 	bl	80004d8 <__aeabi_dmul>
 800469c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046a0:	e7bc      	b.n	800461c <_dtoa_r+0x5b4>
 80046a2:	4656      	mov	r6, sl
 80046a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80046a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046ac:	4620      	mov	r0, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	f7fc f83c 	bl	800072c <__aeabi_ddiv>
 80046b4:	f7fc f9c0 	bl	8000a38 <__aeabi_d2iz>
 80046b8:	4680      	mov	r8, r0
 80046ba:	f7fb fea3 	bl	8000404 <__aeabi_i2d>
 80046be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046c2:	f7fb ff09 	bl	80004d8 <__aeabi_dmul>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f7fb fd4b 	bl	8000168 <__aeabi_dsub>
 80046d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80046d6:	9d08      	ldr	r5, [sp, #32]
 80046d8:	f806 4b01 	strb.w	r4, [r6], #1
 80046dc:	eba6 040a 	sub.w	r4, r6, sl
 80046e0:	42a5      	cmp	r5, r4
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	d133      	bne.n	8004750 <_dtoa_r+0x6e8>
 80046e8:	f7fb fd40 	bl	800016c <__adddf3>
 80046ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046f0:	4604      	mov	r4, r0
 80046f2:	460d      	mov	r5, r1
 80046f4:	f7fc f980 	bl	80009f8 <__aeabi_dcmpgt>
 80046f8:	b9c0      	cbnz	r0, 800472c <_dtoa_r+0x6c4>
 80046fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fc f951 	bl	80009a8 <__aeabi_dcmpeq>
 8004706:	b110      	cbz	r0, 800470e <_dtoa_r+0x6a6>
 8004708:	f018 0f01 	tst.w	r8, #1
 800470c:	d10e      	bne.n	800472c <_dtoa_r+0x6c4>
 800470e:	4648      	mov	r0, r9
 8004710:	9903      	ldr	r1, [sp, #12]
 8004712:	f000 fbbb 	bl	8004e8c <_Bfree>
 8004716:	2300      	movs	r3, #0
 8004718:	7033      	strb	r3, [r6, #0]
 800471a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800471c:	3701      	adds	r7, #1
 800471e:	601f      	str	r7, [r3, #0]
 8004720:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 824b 	beq.w	8004bbe <_dtoa_r+0xb56>
 8004728:	601e      	str	r6, [r3, #0]
 800472a:	e248      	b.n	8004bbe <_dtoa_r+0xb56>
 800472c:	46b8      	mov	r8, r7
 800472e:	4633      	mov	r3, r6
 8004730:	461e      	mov	r6, r3
 8004732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004736:	2a39      	cmp	r2, #57	@ 0x39
 8004738:	d106      	bne.n	8004748 <_dtoa_r+0x6e0>
 800473a:	459a      	cmp	sl, r3
 800473c:	d1f8      	bne.n	8004730 <_dtoa_r+0x6c8>
 800473e:	2230      	movs	r2, #48	@ 0x30
 8004740:	f108 0801 	add.w	r8, r8, #1
 8004744:	f88a 2000 	strb.w	r2, [sl]
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	3201      	adds	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e7a0      	b.n	8004692 <_dtoa_r+0x62a>
 8004750:	2200      	movs	r2, #0
 8004752:	4b6f      	ldr	r3, [pc, #444]	@ (8004910 <_dtoa_r+0x8a8>)
 8004754:	f7fb fec0 	bl	80004d8 <__aeabi_dmul>
 8004758:	2200      	movs	r2, #0
 800475a:	2300      	movs	r3, #0
 800475c:	4604      	mov	r4, r0
 800475e:	460d      	mov	r5, r1
 8004760:	f7fc f922 	bl	80009a8 <__aeabi_dcmpeq>
 8004764:	2800      	cmp	r0, #0
 8004766:	d09f      	beq.n	80046a8 <_dtoa_r+0x640>
 8004768:	e7d1      	b.n	800470e <_dtoa_r+0x6a6>
 800476a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800476c:	2a00      	cmp	r2, #0
 800476e:	f000 80ea 	beq.w	8004946 <_dtoa_r+0x8de>
 8004772:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004774:	2a01      	cmp	r2, #1
 8004776:	f300 80cd 	bgt.w	8004914 <_dtoa_r+0x8ac>
 800477a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800477c:	2a00      	cmp	r2, #0
 800477e:	f000 80c1 	beq.w	8004904 <_dtoa_r+0x89c>
 8004782:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004786:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004788:	9e04      	ldr	r6, [sp, #16]
 800478a:	9a04      	ldr	r2, [sp, #16]
 800478c:	2101      	movs	r1, #1
 800478e:	441a      	add	r2, r3
 8004790:	9204      	str	r2, [sp, #16]
 8004792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004794:	4648      	mov	r0, r9
 8004796:	441a      	add	r2, r3
 8004798:	9209      	str	r2, [sp, #36]	@ 0x24
 800479a:	f000 fc75 	bl	8005088 <__i2b>
 800479e:	4605      	mov	r5, r0
 80047a0:	b166      	cbz	r6, 80047bc <_dtoa_r+0x754>
 80047a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dd09      	ble.n	80047bc <_dtoa_r+0x754>
 80047a8:	42b3      	cmp	r3, r6
 80047aa:	bfa8      	it	ge
 80047ac:	4633      	movge	r3, r6
 80047ae:	9a04      	ldr	r2, [sp, #16]
 80047b0:	1af6      	subs	r6, r6, r3
 80047b2:	1ad2      	subs	r2, r2, r3
 80047b4:	9204      	str	r2, [sp, #16]
 80047b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80047bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047be:	b30b      	cbz	r3, 8004804 <_dtoa_r+0x79c>
 80047c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80c6 	beq.w	8004954 <_dtoa_r+0x8ec>
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	f000 80c0 	beq.w	800494e <_dtoa_r+0x8e6>
 80047ce:	4629      	mov	r1, r5
 80047d0:	4622      	mov	r2, r4
 80047d2:	4648      	mov	r0, r9
 80047d4:	f000 fd10 	bl	80051f8 <__pow5mult>
 80047d8:	9a03      	ldr	r2, [sp, #12]
 80047da:	4601      	mov	r1, r0
 80047dc:	4605      	mov	r5, r0
 80047de:	4648      	mov	r0, r9
 80047e0:	f000 fc68 	bl	80050b4 <__multiply>
 80047e4:	9903      	ldr	r1, [sp, #12]
 80047e6:	4680      	mov	r8, r0
 80047e8:	4648      	mov	r0, r9
 80047ea:	f000 fb4f 	bl	8004e8c <_Bfree>
 80047ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047f0:	1b1b      	subs	r3, r3, r4
 80047f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80047f4:	f000 80b1 	beq.w	800495a <_dtoa_r+0x8f2>
 80047f8:	4641      	mov	r1, r8
 80047fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047fc:	4648      	mov	r0, r9
 80047fe:	f000 fcfb 	bl	80051f8 <__pow5mult>
 8004802:	9003      	str	r0, [sp, #12]
 8004804:	2101      	movs	r1, #1
 8004806:	4648      	mov	r0, r9
 8004808:	f000 fc3e 	bl	8005088 <__i2b>
 800480c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800480e:	4604      	mov	r4, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 81d8 	beq.w	8004bc6 <_dtoa_r+0xb5e>
 8004816:	461a      	mov	r2, r3
 8004818:	4601      	mov	r1, r0
 800481a:	4648      	mov	r0, r9
 800481c:	f000 fcec 	bl	80051f8 <__pow5mult>
 8004820:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004822:	4604      	mov	r4, r0
 8004824:	2b01      	cmp	r3, #1
 8004826:	f300 809f 	bgt.w	8004968 <_dtoa_r+0x900>
 800482a:	9b06      	ldr	r3, [sp, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8097 	bne.w	8004960 <_dtoa_r+0x8f8>
 8004832:	9b07      	ldr	r3, [sp, #28]
 8004834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004838:	2b00      	cmp	r3, #0
 800483a:	f040 8093 	bne.w	8004964 <_dtoa_r+0x8fc>
 800483e:	9b07      	ldr	r3, [sp, #28]
 8004840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004844:	0d1b      	lsrs	r3, r3, #20
 8004846:	051b      	lsls	r3, r3, #20
 8004848:	b133      	cbz	r3, 8004858 <_dtoa_r+0x7f0>
 800484a:	9b04      	ldr	r3, [sp, #16]
 800484c:	3301      	adds	r3, #1
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004852:	3301      	adds	r3, #1
 8004854:	9309      	str	r3, [sp, #36]	@ 0x24
 8004856:	2301      	movs	r3, #1
 8004858:	930a      	str	r3, [sp, #40]	@ 0x28
 800485a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 81b8 	beq.w	8004bd2 <_dtoa_r+0xb6a>
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004868:	6918      	ldr	r0, [r3, #16]
 800486a:	f000 fbc1 	bl	8004ff0 <__hi0bits>
 800486e:	f1c0 0020 	rsb	r0, r0, #32
 8004872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004874:	4418      	add	r0, r3
 8004876:	f010 001f 	ands.w	r0, r0, #31
 800487a:	f000 8082 	beq.w	8004982 <_dtoa_r+0x91a>
 800487e:	f1c0 0320 	rsb	r3, r0, #32
 8004882:	2b04      	cmp	r3, #4
 8004884:	dd73      	ble.n	800496e <_dtoa_r+0x906>
 8004886:	9b04      	ldr	r3, [sp, #16]
 8004888:	f1c0 001c 	rsb	r0, r0, #28
 800488c:	4403      	add	r3, r0
 800488e:	9304      	str	r3, [sp, #16]
 8004890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004892:	4406      	add	r6, r0
 8004894:	4403      	add	r3, r0
 8004896:	9309      	str	r3, [sp, #36]	@ 0x24
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	dd05      	ble.n	80048aa <_dtoa_r+0x842>
 800489e:	461a      	mov	r2, r3
 80048a0:	4648      	mov	r0, r9
 80048a2:	9903      	ldr	r1, [sp, #12]
 80048a4:	f000 fd02 	bl	80052ac <__lshift>
 80048a8:	9003      	str	r0, [sp, #12]
 80048aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dd05      	ble.n	80048bc <_dtoa_r+0x854>
 80048b0:	4621      	mov	r1, r4
 80048b2:	461a      	mov	r2, r3
 80048b4:	4648      	mov	r0, r9
 80048b6:	f000 fcf9 	bl	80052ac <__lshift>
 80048ba:	4604      	mov	r4, r0
 80048bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d061      	beq.n	8004986 <_dtoa_r+0x91e>
 80048c2:	4621      	mov	r1, r4
 80048c4:	9803      	ldr	r0, [sp, #12]
 80048c6:	f000 fd5d 	bl	8005384 <__mcmp>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	da5b      	bge.n	8004986 <_dtoa_r+0x91e>
 80048ce:	2300      	movs	r3, #0
 80048d0:	220a      	movs	r2, #10
 80048d2:	4648      	mov	r0, r9
 80048d4:	9903      	ldr	r1, [sp, #12]
 80048d6:	f000 fafb 	bl	8004ed0 <__multadd>
 80048da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048dc:	f107 38ff 	add.w	r8, r7, #4294967295
 80048e0:	9003      	str	r0, [sp, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8177 	beq.w	8004bd6 <_dtoa_r+0xb6e>
 80048e8:	4629      	mov	r1, r5
 80048ea:	2300      	movs	r3, #0
 80048ec:	220a      	movs	r2, #10
 80048ee:	4648      	mov	r0, r9
 80048f0:	f000 faee 	bl	8004ed0 <__multadd>
 80048f4:	f1bb 0f00 	cmp.w	fp, #0
 80048f8:	4605      	mov	r5, r0
 80048fa:	dc6f      	bgt.n	80049dc <_dtoa_r+0x974>
 80048fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048fe:	2b02      	cmp	r3, #2
 8004900:	dc49      	bgt.n	8004996 <_dtoa_r+0x92e>
 8004902:	e06b      	b.n	80049dc <_dtoa_r+0x974>
 8004904:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800490a:	e73c      	b.n	8004786 <_dtoa_r+0x71e>
 800490c:	3fe00000 	.word	0x3fe00000
 8004910:	40240000 	.word	0x40240000
 8004914:	9b08      	ldr	r3, [sp, #32]
 8004916:	1e5c      	subs	r4, r3, #1
 8004918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800491a:	42a3      	cmp	r3, r4
 800491c:	db09      	blt.n	8004932 <_dtoa_r+0x8ca>
 800491e:	1b1c      	subs	r4, r3, r4
 8004920:	9b08      	ldr	r3, [sp, #32]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f6bf af30 	bge.w	8004788 <_dtoa_r+0x720>
 8004928:	9b04      	ldr	r3, [sp, #16]
 800492a:	9a08      	ldr	r2, [sp, #32]
 800492c:	1a9e      	subs	r6, r3, r2
 800492e:	2300      	movs	r3, #0
 8004930:	e72b      	b.n	800478a <_dtoa_r+0x722>
 8004932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004936:	1ae3      	subs	r3, r4, r3
 8004938:	441a      	add	r2, r3
 800493a:	940a      	str	r4, [sp, #40]	@ 0x28
 800493c:	9e04      	ldr	r6, [sp, #16]
 800493e:	2400      	movs	r4, #0
 8004940:	9b08      	ldr	r3, [sp, #32]
 8004942:	920e      	str	r2, [sp, #56]	@ 0x38
 8004944:	e721      	b.n	800478a <_dtoa_r+0x722>
 8004946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004948:	9e04      	ldr	r6, [sp, #16]
 800494a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800494c:	e728      	b.n	80047a0 <_dtoa_r+0x738>
 800494e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004952:	e751      	b.n	80047f8 <_dtoa_r+0x790>
 8004954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004956:	9903      	ldr	r1, [sp, #12]
 8004958:	e750      	b.n	80047fc <_dtoa_r+0x794>
 800495a:	f8cd 800c 	str.w	r8, [sp, #12]
 800495e:	e751      	b.n	8004804 <_dtoa_r+0x79c>
 8004960:	2300      	movs	r3, #0
 8004962:	e779      	b.n	8004858 <_dtoa_r+0x7f0>
 8004964:	9b06      	ldr	r3, [sp, #24]
 8004966:	e777      	b.n	8004858 <_dtoa_r+0x7f0>
 8004968:	2300      	movs	r3, #0
 800496a:	930a      	str	r3, [sp, #40]	@ 0x28
 800496c:	e779      	b.n	8004862 <_dtoa_r+0x7fa>
 800496e:	d093      	beq.n	8004898 <_dtoa_r+0x830>
 8004970:	9a04      	ldr	r2, [sp, #16]
 8004972:	331c      	adds	r3, #28
 8004974:	441a      	add	r2, r3
 8004976:	9204      	str	r2, [sp, #16]
 8004978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800497a:	441e      	add	r6, r3
 800497c:	441a      	add	r2, r3
 800497e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004980:	e78a      	b.n	8004898 <_dtoa_r+0x830>
 8004982:	4603      	mov	r3, r0
 8004984:	e7f4      	b.n	8004970 <_dtoa_r+0x908>
 8004986:	9b08      	ldr	r3, [sp, #32]
 8004988:	46b8      	mov	r8, r7
 800498a:	2b00      	cmp	r3, #0
 800498c:	dc20      	bgt.n	80049d0 <_dtoa_r+0x968>
 800498e:	469b      	mov	fp, r3
 8004990:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004992:	2b02      	cmp	r3, #2
 8004994:	dd1e      	ble.n	80049d4 <_dtoa_r+0x96c>
 8004996:	f1bb 0f00 	cmp.w	fp, #0
 800499a:	f47f adb1 	bne.w	8004500 <_dtoa_r+0x498>
 800499e:	4621      	mov	r1, r4
 80049a0:	465b      	mov	r3, fp
 80049a2:	2205      	movs	r2, #5
 80049a4:	4648      	mov	r0, r9
 80049a6:	f000 fa93 	bl	8004ed0 <__multadd>
 80049aa:	4601      	mov	r1, r0
 80049ac:	4604      	mov	r4, r0
 80049ae:	9803      	ldr	r0, [sp, #12]
 80049b0:	f000 fce8 	bl	8005384 <__mcmp>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	f77f ada3 	ble.w	8004500 <_dtoa_r+0x498>
 80049ba:	4656      	mov	r6, sl
 80049bc:	2331      	movs	r3, #49	@ 0x31
 80049be:	f108 0801 	add.w	r8, r8, #1
 80049c2:	f806 3b01 	strb.w	r3, [r6], #1
 80049c6:	e59f      	b.n	8004508 <_dtoa_r+0x4a0>
 80049c8:	46b8      	mov	r8, r7
 80049ca:	9c08      	ldr	r4, [sp, #32]
 80049cc:	4625      	mov	r5, r4
 80049ce:	e7f4      	b.n	80049ba <_dtoa_r+0x952>
 80049d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80049d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8101 	beq.w	8004bde <_dtoa_r+0xb76>
 80049dc:	2e00      	cmp	r6, #0
 80049de:	dd05      	ble.n	80049ec <_dtoa_r+0x984>
 80049e0:	4629      	mov	r1, r5
 80049e2:	4632      	mov	r2, r6
 80049e4:	4648      	mov	r0, r9
 80049e6:	f000 fc61 	bl	80052ac <__lshift>
 80049ea:	4605      	mov	r5, r0
 80049ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d05c      	beq.n	8004aac <_dtoa_r+0xa44>
 80049f2:	4648      	mov	r0, r9
 80049f4:	6869      	ldr	r1, [r5, #4]
 80049f6:	f000 fa09 	bl	8004e0c <_Balloc>
 80049fa:	4606      	mov	r6, r0
 80049fc:	b928      	cbnz	r0, 8004a0a <_dtoa_r+0x9a2>
 80049fe:	4602      	mov	r2, r0
 8004a00:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004a04:	4b80      	ldr	r3, [pc, #512]	@ (8004c08 <_dtoa_r+0xba0>)
 8004a06:	f7ff bb43 	b.w	8004090 <_dtoa_r+0x28>
 8004a0a:	692a      	ldr	r2, [r5, #16]
 8004a0c:	f105 010c 	add.w	r1, r5, #12
 8004a10:	3202      	adds	r2, #2
 8004a12:	0092      	lsls	r2, r2, #2
 8004a14:	300c      	adds	r0, #12
 8004a16:	f001 ff51 	bl	80068bc <memcpy>
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4648      	mov	r0, r9
 8004a20:	f000 fc44 	bl	80052ac <__lshift>
 8004a24:	462f      	mov	r7, r5
 8004a26:	4605      	mov	r5, r0
 8004a28:	f10a 0301 	add.w	r3, sl, #1
 8004a2c:	9304      	str	r3, [sp, #16]
 8004a2e:	eb0a 030b 	add.w	r3, sl, fp
 8004a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a34:	9b06      	ldr	r3, [sp, #24]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	9803      	ldr	r0, [sp, #12]
 8004a42:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a46:	f7ff fa87 	bl	8003f58 <quorem>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	3330      	adds	r3, #48	@ 0x30
 8004a50:	9006      	str	r0, [sp, #24]
 8004a52:	9803      	ldr	r0, [sp, #12]
 8004a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a56:	f000 fc95 	bl	8005384 <__mcmp>
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	9008      	str	r0, [sp, #32]
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4648      	mov	r0, r9
 8004a62:	f000 fcab 	bl	80053bc <__mdiff>
 8004a66:	68c2      	ldr	r2, [r0, #12]
 8004a68:	4606      	mov	r6, r0
 8004a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a6c:	bb02      	cbnz	r2, 8004ab0 <_dtoa_r+0xa48>
 8004a6e:	4601      	mov	r1, r0
 8004a70:	9803      	ldr	r0, [sp, #12]
 8004a72:	f000 fc87 	bl	8005384 <__mcmp>
 8004a76:	4602      	mov	r2, r0
 8004a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4648      	mov	r0, r9
 8004a7e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004a82:	f000 fa03 	bl	8004e8c <_Bfree>
 8004a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004a8a:	9e04      	ldr	r6, [sp, #16]
 8004a8c:	ea42 0103 	orr.w	r1, r2, r3
 8004a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a92:	4319      	orrs	r1, r3
 8004a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a96:	d10d      	bne.n	8004ab4 <_dtoa_r+0xa4c>
 8004a98:	2b39      	cmp	r3, #57	@ 0x39
 8004a9a:	d027      	beq.n	8004aec <_dtoa_r+0xa84>
 8004a9c:	9a08      	ldr	r2, [sp, #32]
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	dd01      	ble.n	8004aa6 <_dtoa_r+0xa3e>
 8004aa2:	9b06      	ldr	r3, [sp, #24]
 8004aa4:	3331      	adds	r3, #49	@ 0x31
 8004aa6:	f88b 3000 	strb.w	r3, [fp]
 8004aaa:	e52e      	b.n	800450a <_dtoa_r+0x4a2>
 8004aac:	4628      	mov	r0, r5
 8004aae:	e7b9      	b.n	8004a24 <_dtoa_r+0x9bc>
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	e7e2      	b.n	8004a7a <_dtoa_r+0xa12>
 8004ab4:	9908      	ldr	r1, [sp, #32]
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	db04      	blt.n	8004ac4 <_dtoa_r+0xa5c>
 8004aba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004abc:	4301      	orrs	r1, r0
 8004abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac0:	4301      	orrs	r1, r0
 8004ac2:	d120      	bne.n	8004b06 <_dtoa_r+0xa9e>
 8004ac4:	2a00      	cmp	r2, #0
 8004ac6:	ddee      	ble.n	8004aa6 <_dtoa_r+0xa3e>
 8004ac8:	2201      	movs	r2, #1
 8004aca:	9903      	ldr	r1, [sp, #12]
 8004acc:	4648      	mov	r0, r9
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	f000 fbec 	bl	80052ac <__lshift>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	9003      	str	r0, [sp, #12]
 8004ad8:	f000 fc54 	bl	8005384 <__mcmp>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	9b04      	ldr	r3, [sp, #16]
 8004ae0:	dc02      	bgt.n	8004ae8 <_dtoa_r+0xa80>
 8004ae2:	d1e0      	bne.n	8004aa6 <_dtoa_r+0xa3e>
 8004ae4:	07da      	lsls	r2, r3, #31
 8004ae6:	d5de      	bpl.n	8004aa6 <_dtoa_r+0xa3e>
 8004ae8:	2b39      	cmp	r3, #57	@ 0x39
 8004aea:	d1da      	bne.n	8004aa2 <_dtoa_r+0xa3a>
 8004aec:	2339      	movs	r3, #57	@ 0x39
 8004aee:	f88b 3000 	strb.w	r3, [fp]
 8004af2:	4633      	mov	r3, r6
 8004af4:	461e      	mov	r6, r3
 8004af6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	2a39      	cmp	r2, #57	@ 0x39
 8004afe:	d04e      	beq.n	8004b9e <_dtoa_r+0xb36>
 8004b00:	3201      	adds	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e501      	b.n	800450a <_dtoa_r+0x4a2>
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	dd03      	ble.n	8004b12 <_dtoa_r+0xaaa>
 8004b0a:	2b39      	cmp	r3, #57	@ 0x39
 8004b0c:	d0ee      	beq.n	8004aec <_dtoa_r+0xa84>
 8004b0e:	3301      	adds	r3, #1
 8004b10:	e7c9      	b.n	8004aa6 <_dtoa_r+0xa3e>
 8004b12:	9a04      	ldr	r2, [sp, #16]
 8004b14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b1a:	428a      	cmp	r2, r1
 8004b1c:	d028      	beq.n	8004b70 <_dtoa_r+0xb08>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	220a      	movs	r2, #10
 8004b22:	9903      	ldr	r1, [sp, #12]
 8004b24:	4648      	mov	r0, r9
 8004b26:	f000 f9d3 	bl	8004ed0 <__multadd>
 8004b2a:	42af      	cmp	r7, r5
 8004b2c:	9003      	str	r0, [sp, #12]
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	f04f 020a 	mov.w	r2, #10
 8004b36:	4639      	mov	r1, r7
 8004b38:	4648      	mov	r0, r9
 8004b3a:	d107      	bne.n	8004b4c <_dtoa_r+0xae4>
 8004b3c:	f000 f9c8 	bl	8004ed0 <__multadd>
 8004b40:	4607      	mov	r7, r0
 8004b42:	4605      	mov	r5, r0
 8004b44:	9b04      	ldr	r3, [sp, #16]
 8004b46:	3301      	adds	r3, #1
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	e777      	b.n	8004a3c <_dtoa_r+0x9d4>
 8004b4c:	f000 f9c0 	bl	8004ed0 <__multadd>
 8004b50:	4629      	mov	r1, r5
 8004b52:	4607      	mov	r7, r0
 8004b54:	2300      	movs	r3, #0
 8004b56:	220a      	movs	r2, #10
 8004b58:	4648      	mov	r0, r9
 8004b5a:	f000 f9b9 	bl	8004ed0 <__multadd>
 8004b5e:	4605      	mov	r5, r0
 8004b60:	e7f0      	b.n	8004b44 <_dtoa_r+0xadc>
 8004b62:	f1bb 0f00 	cmp.w	fp, #0
 8004b66:	bfcc      	ite	gt
 8004b68:	465e      	movgt	r6, fp
 8004b6a:	2601      	movle	r6, #1
 8004b6c:	2700      	movs	r7, #0
 8004b6e:	4456      	add	r6, sl
 8004b70:	2201      	movs	r2, #1
 8004b72:	9903      	ldr	r1, [sp, #12]
 8004b74:	4648      	mov	r0, r9
 8004b76:	9304      	str	r3, [sp, #16]
 8004b78:	f000 fb98 	bl	80052ac <__lshift>
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	9003      	str	r0, [sp, #12]
 8004b80:	f000 fc00 	bl	8005384 <__mcmp>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	dcb4      	bgt.n	8004af2 <_dtoa_r+0xa8a>
 8004b88:	d102      	bne.n	8004b90 <_dtoa_r+0xb28>
 8004b8a:	9b04      	ldr	r3, [sp, #16]
 8004b8c:	07db      	lsls	r3, r3, #31
 8004b8e:	d4b0      	bmi.n	8004af2 <_dtoa_r+0xa8a>
 8004b90:	4633      	mov	r3, r6
 8004b92:	461e      	mov	r6, r3
 8004b94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b98:	2a30      	cmp	r2, #48	@ 0x30
 8004b9a:	d0fa      	beq.n	8004b92 <_dtoa_r+0xb2a>
 8004b9c:	e4b5      	b.n	800450a <_dtoa_r+0x4a2>
 8004b9e:	459a      	cmp	sl, r3
 8004ba0:	d1a8      	bne.n	8004af4 <_dtoa_r+0xa8c>
 8004ba2:	2331      	movs	r3, #49	@ 0x31
 8004ba4:	f108 0801 	add.w	r8, r8, #1
 8004ba8:	f88a 3000 	strb.w	r3, [sl]
 8004bac:	e4ad      	b.n	800450a <_dtoa_r+0x4a2>
 8004bae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004bb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004c0c <_dtoa_r+0xba4>
 8004bb4:	b11b      	cbz	r3, 8004bbe <_dtoa_r+0xb56>
 8004bb6:	f10a 0308 	add.w	r3, sl, #8
 8004bba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	b017      	add	sp, #92	@ 0x5c
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f77f ae2e 	ble.w	800482a <_dtoa_r+0x7c2>
 8004bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	e64d      	b.n	8004872 <_dtoa_r+0x80a>
 8004bd6:	f1bb 0f00 	cmp.w	fp, #0
 8004bda:	f77f aed9 	ble.w	8004990 <_dtoa_r+0x928>
 8004bde:	4656      	mov	r6, sl
 8004be0:	4621      	mov	r1, r4
 8004be2:	9803      	ldr	r0, [sp, #12]
 8004be4:	f7ff f9b8 	bl	8003f58 <quorem>
 8004be8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004bec:	f806 3b01 	strb.w	r3, [r6], #1
 8004bf0:	eba6 020a 	sub.w	r2, r6, sl
 8004bf4:	4593      	cmp	fp, r2
 8004bf6:	ddb4      	ble.n	8004b62 <_dtoa_r+0xafa>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	220a      	movs	r2, #10
 8004bfc:	4648      	mov	r0, r9
 8004bfe:	9903      	ldr	r1, [sp, #12]
 8004c00:	f000 f966 	bl	8004ed0 <__multadd>
 8004c04:	9003      	str	r0, [sp, #12]
 8004c06:	e7eb      	b.n	8004be0 <_dtoa_r+0xb78>
 8004c08:	08008437 	.word	0x08008437
 8004c0c:	080083bb 	.word	0x080083bb

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d040      	beq.n	8004c9a <_free_r+0x8a>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f000 f8e6 	bl	8004df4 <__malloc_lock>
 8004c28:	4a1c      	ldr	r2, [pc, #112]	@ (8004c9c <_free_r+0x8c>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	b933      	cbnz	r3, 8004c3c <_free_r+0x2c>
 8004c2e:	6063      	str	r3, [r4, #4]
 8004c30:	6014      	str	r4, [r2, #0]
 8004c32:	4628      	mov	r0, r5
 8004c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c38:	f000 b8e2 	b.w	8004e00 <__malloc_unlock>
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d908      	bls.n	8004c52 <_free_r+0x42>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428b      	cmp	r3, r1
 8004c46:	bf01      	itttt	eq
 8004c48:	6819      	ldreq	r1, [r3, #0]
 8004c4a:	685b      	ldreq	r3, [r3, #4]
 8004c4c:	1809      	addeq	r1, r1, r0
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	e7ed      	b.n	8004c2e <_free_r+0x1e>
 8004c52:	461a      	mov	r2, r3
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	b10b      	cbz	r3, 8004c5c <_free_r+0x4c>
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	d9fa      	bls.n	8004c52 <_free_r+0x42>
 8004c5c:	6811      	ldr	r1, [r2, #0]
 8004c5e:	1850      	adds	r0, r2, r1
 8004c60:	42a0      	cmp	r0, r4
 8004c62:	d10b      	bne.n	8004c7c <_free_r+0x6c>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	4401      	add	r1, r0
 8004c68:	1850      	adds	r0, r2, r1
 8004c6a:	4283      	cmp	r3, r0
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	d1e0      	bne.n	8004c32 <_free_r+0x22>
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4408      	add	r0, r1
 8004c76:	6010      	str	r0, [r2, #0]
 8004c78:	6053      	str	r3, [r2, #4]
 8004c7a:	e7da      	b.n	8004c32 <_free_r+0x22>
 8004c7c:	d902      	bls.n	8004c84 <_free_r+0x74>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	e7d6      	b.n	8004c32 <_free_r+0x22>
 8004c84:	6820      	ldr	r0, [r4, #0]
 8004c86:	1821      	adds	r1, r4, r0
 8004c88:	428b      	cmp	r3, r1
 8004c8a:	bf01      	itttt	eq
 8004c8c:	6819      	ldreq	r1, [r3, #0]
 8004c8e:	685b      	ldreq	r3, [r3, #4]
 8004c90:	1809      	addeq	r1, r1, r0
 8004c92:	6021      	streq	r1, [r4, #0]
 8004c94:	6063      	str	r3, [r4, #4]
 8004c96:	6054      	str	r4, [r2, #4]
 8004c98:	e7cb      	b.n	8004c32 <_free_r+0x22>
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	200007a4 	.word	0x200007a4

08004ca0 <malloc>:
 8004ca0:	4b02      	ldr	r3, [pc, #8]	@ (8004cac <malloc+0xc>)
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	f000 b825 	b.w	8004cf4 <_malloc_r>
 8004caa:	bf00      	nop
 8004cac:	20000020 	.word	0x20000020

08004cb0 <sbrk_aligned>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	4e0f      	ldr	r6, [pc, #60]	@ (8004cf0 <sbrk_aligned+0x40>)
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	6831      	ldr	r1, [r6, #0]
 8004cb8:	4605      	mov	r5, r0
 8004cba:	b911      	cbnz	r1, 8004cc2 <sbrk_aligned+0x12>
 8004cbc:	f001 fdee 	bl	800689c <_sbrk_r>
 8004cc0:	6030      	str	r0, [r6, #0]
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f001 fde9 	bl	800689c <_sbrk_r>
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	d103      	bne.n	8004cd6 <sbrk_aligned+0x26>
 8004cce:	f04f 34ff 	mov.w	r4, #4294967295
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	1cc4      	adds	r4, r0, #3
 8004cd8:	f024 0403 	bic.w	r4, r4, #3
 8004cdc:	42a0      	cmp	r0, r4
 8004cde:	d0f8      	beq.n	8004cd2 <sbrk_aligned+0x22>
 8004ce0:	1a21      	subs	r1, r4, r0
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f001 fdda 	bl	800689c <_sbrk_r>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d1f2      	bne.n	8004cd2 <sbrk_aligned+0x22>
 8004cec:	e7ef      	b.n	8004cce <sbrk_aligned+0x1e>
 8004cee:	bf00      	nop
 8004cf0:	200007a0 	.word	0x200007a0

08004cf4 <_malloc_r>:
 8004cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cf8:	1ccd      	adds	r5, r1, #3
 8004cfa:	f025 0503 	bic.w	r5, r5, #3
 8004cfe:	3508      	adds	r5, #8
 8004d00:	2d0c      	cmp	r5, #12
 8004d02:	bf38      	it	cc
 8004d04:	250c      	movcc	r5, #12
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	4606      	mov	r6, r0
 8004d0a:	db01      	blt.n	8004d10 <_malloc_r+0x1c>
 8004d0c:	42a9      	cmp	r1, r5
 8004d0e:	d904      	bls.n	8004d1a <_malloc_r+0x26>
 8004d10:	230c      	movs	r3, #12
 8004d12:	6033      	str	r3, [r6, #0]
 8004d14:	2000      	movs	r0, #0
 8004d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004df0 <_malloc_r+0xfc>
 8004d1e:	f000 f869 	bl	8004df4 <__malloc_lock>
 8004d22:	f8d8 3000 	ldr.w	r3, [r8]
 8004d26:	461c      	mov	r4, r3
 8004d28:	bb44      	cbnz	r4, 8004d7c <_malloc_r+0x88>
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f7ff ffbf 	bl	8004cb0 <sbrk_aligned>
 8004d32:	1c43      	adds	r3, r0, #1
 8004d34:	4604      	mov	r4, r0
 8004d36:	d158      	bne.n	8004dea <_malloc_r+0xf6>
 8004d38:	f8d8 4000 	ldr.w	r4, [r8]
 8004d3c:	4627      	mov	r7, r4
 8004d3e:	2f00      	cmp	r7, #0
 8004d40:	d143      	bne.n	8004dca <_malloc_r+0xd6>
 8004d42:	2c00      	cmp	r4, #0
 8004d44:	d04b      	beq.n	8004dde <_malloc_r+0xea>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	4639      	mov	r1, r7
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	eb04 0903 	add.w	r9, r4, r3
 8004d50:	f001 fda4 	bl	800689c <_sbrk_r>
 8004d54:	4581      	cmp	r9, r0
 8004d56:	d142      	bne.n	8004dde <_malloc_r+0xea>
 8004d58:	6821      	ldr	r1, [r4, #0]
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	1a6d      	subs	r5, r5, r1
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7ff ffa6 	bl	8004cb0 <sbrk_aligned>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d03a      	beq.n	8004dde <_malloc_r+0xea>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	442b      	add	r3, r5
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	bb62      	cbnz	r2, 8004dd0 <_malloc_r+0xdc>
 8004d76:	f8c8 7000 	str.w	r7, [r8]
 8004d7a:	e00f      	b.n	8004d9c <_malloc_r+0xa8>
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	1b52      	subs	r2, r2, r5
 8004d80:	d420      	bmi.n	8004dc4 <_malloc_r+0xd0>
 8004d82:	2a0b      	cmp	r2, #11
 8004d84:	d917      	bls.n	8004db6 <_malloc_r+0xc2>
 8004d86:	1961      	adds	r1, r4, r5
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	6025      	str	r5, [r4, #0]
 8004d8c:	bf18      	it	ne
 8004d8e:	6059      	strne	r1, [r3, #4]
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	bf08      	it	eq
 8004d94:	f8c8 1000 	streq.w	r1, [r8]
 8004d98:	5162      	str	r2, [r4, r5]
 8004d9a:	604b      	str	r3, [r1, #4]
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 f82f 	bl	8004e00 <__malloc_unlock>
 8004da2:	f104 000b 	add.w	r0, r4, #11
 8004da6:	1d23      	adds	r3, r4, #4
 8004da8:	f020 0007 	bic.w	r0, r0, #7
 8004dac:	1ac2      	subs	r2, r0, r3
 8004dae:	bf1c      	itt	ne
 8004db0:	1a1b      	subne	r3, r3, r0
 8004db2:	50a3      	strne	r3, [r4, r2]
 8004db4:	e7af      	b.n	8004d16 <_malloc_r+0x22>
 8004db6:	6862      	ldr	r2, [r4, #4]
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	bf0c      	ite	eq
 8004dbc:	f8c8 2000 	streq.w	r2, [r8]
 8004dc0:	605a      	strne	r2, [r3, #4]
 8004dc2:	e7eb      	b.n	8004d9c <_malloc_r+0xa8>
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	6864      	ldr	r4, [r4, #4]
 8004dc8:	e7ae      	b.n	8004d28 <_malloc_r+0x34>
 8004dca:	463c      	mov	r4, r7
 8004dcc:	687f      	ldr	r7, [r7, #4]
 8004dce:	e7b6      	b.n	8004d3e <_malloc_r+0x4a>
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	d1fb      	bne.n	8004dd0 <_malloc_r+0xdc>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6053      	str	r3, [r2, #4]
 8004ddc:	e7de      	b.n	8004d9c <_malloc_r+0xa8>
 8004dde:	230c      	movs	r3, #12
 8004de0:	4630      	mov	r0, r6
 8004de2:	6033      	str	r3, [r6, #0]
 8004de4:	f000 f80c 	bl	8004e00 <__malloc_unlock>
 8004de8:	e794      	b.n	8004d14 <_malloc_r+0x20>
 8004dea:	6005      	str	r5, [r0, #0]
 8004dec:	e7d6      	b.n	8004d9c <_malloc_r+0xa8>
 8004dee:	bf00      	nop
 8004df0:	200007a4 	.word	0x200007a4

08004df4 <__malloc_lock>:
 8004df4:	4801      	ldr	r0, [pc, #4]	@ (8004dfc <__malloc_lock+0x8>)
 8004df6:	f7ff b89a 	b.w	8003f2e <__retarget_lock_acquire_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	2000079c 	.word	0x2000079c

08004e00 <__malloc_unlock>:
 8004e00:	4801      	ldr	r0, [pc, #4]	@ (8004e08 <__malloc_unlock+0x8>)
 8004e02:	f7ff b895 	b.w	8003f30 <__retarget_lock_release_recursive>
 8004e06:	bf00      	nop
 8004e08:	2000079c 	.word	0x2000079c

08004e0c <_Balloc>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	69c6      	ldr	r6, [r0, #28]
 8004e10:	4604      	mov	r4, r0
 8004e12:	460d      	mov	r5, r1
 8004e14:	b976      	cbnz	r6, 8004e34 <_Balloc+0x28>
 8004e16:	2010      	movs	r0, #16
 8004e18:	f7ff ff42 	bl	8004ca0 <malloc>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	61e0      	str	r0, [r4, #28]
 8004e20:	b920      	cbnz	r0, 8004e2c <_Balloc+0x20>
 8004e22:	216b      	movs	r1, #107	@ 0x6b
 8004e24:	4b17      	ldr	r3, [pc, #92]	@ (8004e84 <_Balloc+0x78>)
 8004e26:	4818      	ldr	r0, [pc, #96]	@ (8004e88 <_Balloc+0x7c>)
 8004e28:	f001 fd5c 	bl	80068e4 <__assert_func>
 8004e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e30:	6006      	str	r6, [r0, #0]
 8004e32:	60c6      	str	r6, [r0, #12]
 8004e34:	69e6      	ldr	r6, [r4, #28]
 8004e36:	68f3      	ldr	r3, [r6, #12]
 8004e38:	b183      	cbz	r3, 8004e5c <_Balloc+0x50>
 8004e3a:	69e3      	ldr	r3, [r4, #28]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e42:	b9b8      	cbnz	r0, 8004e74 <_Balloc+0x68>
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f605 	lsl.w	r6, r1, r5
 8004e4a:	1d72      	adds	r2, r6, #5
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	f001 fd66 	bl	8006920 <_calloc_r>
 8004e54:	b160      	cbz	r0, 8004e70 <_Balloc+0x64>
 8004e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e5a:	e00e      	b.n	8004e7a <_Balloc+0x6e>
 8004e5c:	2221      	movs	r2, #33	@ 0x21
 8004e5e:	2104      	movs	r1, #4
 8004e60:	4620      	mov	r0, r4
 8004e62:	f001 fd5d 	bl	8006920 <_calloc_r>
 8004e66:	69e3      	ldr	r3, [r4, #28]
 8004e68:	60f0      	str	r0, [r6, #12]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e4      	bne.n	8004e3a <_Balloc+0x2e>
 8004e70:	2000      	movs	r0, #0
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	6802      	ldr	r2, [r0, #0]
 8004e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e80:	e7f7      	b.n	8004e72 <_Balloc+0x66>
 8004e82:	bf00      	nop
 8004e84:	080083c8 	.word	0x080083c8
 8004e88:	08008448 	.word	0x08008448

08004e8c <_Bfree>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	69c6      	ldr	r6, [r0, #28]
 8004e90:	4605      	mov	r5, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b976      	cbnz	r6, 8004eb4 <_Bfree+0x28>
 8004e96:	2010      	movs	r0, #16
 8004e98:	f7ff ff02 	bl	8004ca0 <malloc>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	61e8      	str	r0, [r5, #28]
 8004ea0:	b920      	cbnz	r0, 8004eac <_Bfree+0x20>
 8004ea2:	218f      	movs	r1, #143	@ 0x8f
 8004ea4:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <_Bfree+0x3c>)
 8004ea6:	4809      	ldr	r0, [pc, #36]	@ (8004ecc <_Bfree+0x40>)
 8004ea8:	f001 fd1c 	bl	80068e4 <__assert_func>
 8004eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004eb0:	6006      	str	r6, [r0, #0]
 8004eb2:	60c6      	str	r6, [r0, #12]
 8004eb4:	b13c      	cbz	r4, 8004ec6 <_Bfree+0x3a>
 8004eb6:	69eb      	ldr	r3, [r5, #28]
 8004eb8:	6862      	ldr	r2, [r4, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ec0:	6021      	str	r1, [r4, #0]
 8004ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	080083c8 	.word	0x080083c8
 8004ecc:	08008448 	.word	0x08008448

08004ed0 <__multadd>:
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	461e      	mov	r6, r3
 8004eda:	2000      	movs	r0, #0
 8004edc:	690d      	ldr	r5, [r1, #16]
 8004ede:	f101 0c14 	add.w	ip, r1, #20
 8004ee2:	f8dc 3000 	ldr.w	r3, [ip]
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	b299      	uxth	r1, r3
 8004eea:	fb02 6101 	mla	r1, r2, r1, r6
 8004eee:	0c1e      	lsrs	r6, r3, #16
 8004ef0:	0c0b      	lsrs	r3, r1, #16
 8004ef2:	fb02 3306 	mla	r3, r2, r6, r3
 8004ef6:	b289      	uxth	r1, r1
 8004ef8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004efc:	4285      	cmp	r5, r0
 8004efe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f02:	f84c 1b04 	str.w	r1, [ip], #4
 8004f06:	dcec      	bgt.n	8004ee2 <__multadd+0x12>
 8004f08:	b30e      	cbz	r6, 8004f4e <__multadd+0x7e>
 8004f0a:	68a3      	ldr	r3, [r4, #8]
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	dc19      	bgt.n	8004f44 <__multadd+0x74>
 8004f10:	6861      	ldr	r1, [r4, #4]
 8004f12:	4638      	mov	r0, r7
 8004f14:	3101      	adds	r1, #1
 8004f16:	f7ff ff79 	bl	8004e0c <_Balloc>
 8004f1a:	4680      	mov	r8, r0
 8004f1c:	b928      	cbnz	r0, 8004f2a <__multadd+0x5a>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	21ba      	movs	r1, #186	@ 0xba
 8004f22:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <__multadd+0x84>)
 8004f24:	480c      	ldr	r0, [pc, #48]	@ (8004f58 <__multadd+0x88>)
 8004f26:	f001 fcdd 	bl	80068e4 <__assert_func>
 8004f2a:	6922      	ldr	r2, [r4, #16]
 8004f2c:	f104 010c 	add.w	r1, r4, #12
 8004f30:	3202      	adds	r2, #2
 8004f32:	0092      	lsls	r2, r2, #2
 8004f34:	300c      	adds	r0, #12
 8004f36:	f001 fcc1 	bl	80068bc <memcpy>
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f7ff ffa5 	bl	8004e8c <_Bfree>
 8004f42:	4644      	mov	r4, r8
 8004f44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f48:	3501      	adds	r5, #1
 8004f4a:	615e      	str	r6, [r3, #20]
 8004f4c:	6125      	str	r5, [r4, #16]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	08008437 	.word	0x08008437
 8004f58:	08008448 	.word	0x08008448

08004f5c <__s2b>:
 8004f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f60:	4615      	mov	r5, r2
 8004f62:	2209      	movs	r2, #9
 8004f64:	461f      	mov	r7, r3
 8004f66:	3308      	adds	r3, #8
 8004f68:	460c      	mov	r4, r1
 8004f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f6e:	4606      	mov	r6, r0
 8004f70:	2201      	movs	r2, #1
 8004f72:	2100      	movs	r1, #0
 8004f74:	429a      	cmp	r2, r3
 8004f76:	db09      	blt.n	8004f8c <__s2b+0x30>
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f7ff ff47 	bl	8004e0c <_Balloc>
 8004f7e:	b940      	cbnz	r0, 8004f92 <__s2b+0x36>
 8004f80:	4602      	mov	r2, r0
 8004f82:	21d3      	movs	r1, #211	@ 0xd3
 8004f84:	4b18      	ldr	r3, [pc, #96]	@ (8004fe8 <__s2b+0x8c>)
 8004f86:	4819      	ldr	r0, [pc, #100]	@ (8004fec <__s2b+0x90>)
 8004f88:	f001 fcac 	bl	80068e4 <__assert_func>
 8004f8c:	0052      	lsls	r2, r2, #1
 8004f8e:	3101      	adds	r1, #1
 8004f90:	e7f0      	b.n	8004f74 <__s2b+0x18>
 8004f92:	9b08      	ldr	r3, [sp, #32]
 8004f94:	2d09      	cmp	r5, #9
 8004f96:	6143      	str	r3, [r0, #20]
 8004f98:	f04f 0301 	mov.w	r3, #1
 8004f9c:	6103      	str	r3, [r0, #16]
 8004f9e:	dd16      	ble.n	8004fce <__s2b+0x72>
 8004fa0:	f104 0909 	add.w	r9, r4, #9
 8004fa4:	46c8      	mov	r8, r9
 8004fa6:	442c      	add	r4, r5
 8004fa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004fac:	4601      	mov	r1, r0
 8004fae:	220a      	movs	r2, #10
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	3b30      	subs	r3, #48	@ 0x30
 8004fb4:	f7ff ff8c 	bl	8004ed0 <__multadd>
 8004fb8:	45a0      	cmp	r8, r4
 8004fba:	d1f5      	bne.n	8004fa8 <__s2b+0x4c>
 8004fbc:	f1a5 0408 	sub.w	r4, r5, #8
 8004fc0:	444c      	add	r4, r9
 8004fc2:	1b2d      	subs	r5, r5, r4
 8004fc4:	1963      	adds	r3, r4, r5
 8004fc6:	42bb      	cmp	r3, r7
 8004fc8:	db04      	blt.n	8004fd4 <__s2b+0x78>
 8004fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fce:	2509      	movs	r5, #9
 8004fd0:	340a      	adds	r4, #10
 8004fd2:	e7f6      	b.n	8004fc2 <__s2b+0x66>
 8004fd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004fd8:	4601      	mov	r1, r0
 8004fda:	220a      	movs	r2, #10
 8004fdc:	4630      	mov	r0, r6
 8004fde:	3b30      	subs	r3, #48	@ 0x30
 8004fe0:	f7ff ff76 	bl	8004ed0 <__multadd>
 8004fe4:	e7ee      	b.n	8004fc4 <__s2b+0x68>
 8004fe6:	bf00      	nop
 8004fe8:	08008437 	.word	0x08008437
 8004fec:	08008448 	.word	0x08008448

08004ff0 <__hi0bits>:
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004ff6:	bf3a      	itte	cc
 8004ff8:	0403      	lslcc	r3, r0, #16
 8004ffa:	2010      	movcc	r0, #16
 8004ffc:	2000      	movcs	r0, #0
 8004ffe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005002:	bf3c      	itt	cc
 8005004:	021b      	lslcc	r3, r3, #8
 8005006:	3008      	addcc	r0, #8
 8005008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800500c:	bf3c      	itt	cc
 800500e:	011b      	lslcc	r3, r3, #4
 8005010:	3004      	addcc	r0, #4
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005016:	bf3c      	itt	cc
 8005018:	009b      	lslcc	r3, r3, #2
 800501a:	3002      	addcc	r0, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	db05      	blt.n	800502c <__hi0bits+0x3c>
 8005020:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005024:	f100 0001 	add.w	r0, r0, #1
 8005028:	bf08      	it	eq
 800502a:	2020      	moveq	r0, #32
 800502c:	4770      	bx	lr

0800502e <__lo0bits>:
 800502e:	6803      	ldr	r3, [r0, #0]
 8005030:	4602      	mov	r2, r0
 8005032:	f013 0007 	ands.w	r0, r3, #7
 8005036:	d00b      	beq.n	8005050 <__lo0bits+0x22>
 8005038:	07d9      	lsls	r1, r3, #31
 800503a:	d421      	bmi.n	8005080 <__lo0bits+0x52>
 800503c:	0798      	lsls	r0, r3, #30
 800503e:	bf49      	itett	mi
 8005040:	085b      	lsrmi	r3, r3, #1
 8005042:	089b      	lsrpl	r3, r3, #2
 8005044:	2001      	movmi	r0, #1
 8005046:	6013      	strmi	r3, [r2, #0]
 8005048:	bf5c      	itt	pl
 800504a:	2002      	movpl	r0, #2
 800504c:	6013      	strpl	r3, [r2, #0]
 800504e:	4770      	bx	lr
 8005050:	b299      	uxth	r1, r3
 8005052:	b909      	cbnz	r1, 8005058 <__lo0bits+0x2a>
 8005054:	2010      	movs	r0, #16
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	b2d9      	uxtb	r1, r3
 800505a:	b909      	cbnz	r1, 8005060 <__lo0bits+0x32>
 800505c:	3008      	adds	r0, #8
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	0719      	lsls	r1, r3, #28
 8005062:	bf04      	itt	eq
 8005064:	091b      	lsreq	r3, r3, #4
 8005066:	3004      	addeq	r0, #4
 8005068:	0799      	lsls	r1, r3, #30
 800506a:	bf04      	itt	eq
 800506c:	089b      	lsreq	r3, r3, #2
 800506e:	3002      	addeq	r0, #2
 8005070:	07d9      	lsls	r1, r3, #31
 8005072:	d403      	bmi.n	800507c <__lo0bits+0x4e>
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	f100 0001 	add.w	r0, r0, #1
 800507a:	d003      	beq.n	8005084 <__lo0bits+0x56>
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4770      	bx	lr
 8005080:	2000      	movs	r0, #0
 8005082:	4770      	bx	lr
 8005084:	2020      	movs	r0, #32
 8005086:	4770      	bx	lr

08005088 <__i2b>:
 8005088:	b510      	push	{r4, lr}
 800508a:	460c      	mov	r4, r1
 800508c:	2101      	movs	r1, #1
 800508e:	f7ff febd 	bl	8004e0c <_Balloc>
 8005092:	4602      	mov	r2, r0
 8005094:	b928      	cbnz	r0, 80050a2 <__i2b+0x1a>
 8005096:	f240 1145 	movw	r1, #325	@ 0x145
 800509a:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <__i2b+0x24>)
 800509c:	4804      	ldr	r0, [pc, #16]	@ (80050b0 <__i2b+0x28>)
 800509e:	f001 fc21 	bl	80068e4 <__assert_func>
 80050a2:	2301      	movs	r3, #1
 80050a4:	6144      	str	r4, [r0, #20]
 80050a6:	6103      	str	r3, [r0, #16]
 80050a8:	bd10      	pop	{r4, pc}
 80050aa:	bf00      	nop
 80050ac:	08008437 	.word	0x08008437
 80050b0:	08008448 	.word	0x08008448

080050b4 <__multiply>:
 80050b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b8:	4617      	mov	r7, r2
 80050ba:	690a      	ldr	r2, [r1, #16]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4689      	mov	r9, r1
 80050c0:	429a      	cmp	r2, r3
 80050c2:	bfa2      	ittt	ge
 80050c4:	463b      	movge	r3, r7
 80050c6:	460f      	movge	r7, r1
 80050c8:	4699      	movge	r9, r3
 80050ca:	693d      	ldr	r5, [r7, #16]
 80050cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	eb05 060a 	add.w	r6, r5, sl
 80050d8:	42b3      	cmp	r3, r6
 80050da:	b085      	sub	sp, #20
 80050dc:	bfb8      	it	lt
 80050de:	3101      	addlt	r1, #1
 80050e0:	f7ff fe94 	bl	8004e0c <_Balloc>
 80050e4:	b930      	cbnz	r0, 80050f4 <__multiply+0x40>
 80050e6:	4602      	mov	r2, r0
 80050e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80050ec:	4b40      	ldr	r3, [pc, #256]	@ (80051f0 <__multiply+0x13c>)
 80050ee:	4841      	ldr	r0, [pc, #260]	@ (80051f4 <__multiply+0x140>)
 80050f0:	f001 fbf8 	bl	80068e4 <__assert_func>
 80050f4:	f100 0414 	add.w	r4, r0, #20
 80050f8:	4623      	mov	r3, r4
 80050fa:	2200      	movs	r2, #0
 80050fc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005100:	4573      	cmp	r3, lr
 8005102:	d320      	bcc.n	8005146 <__multiply+0x92>
 8005104:	f107 0814 	add.w	r8, r7, #20
 8005108:	f109 0114 	add.w	r1, r9, #20
 800510c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005110:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005114:	9302      	str	r3, [sp, #8]
 8005116:	1beb      	subs	r3, r5, r7
 8005118:	3b15      	subs	r3, #21
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	3304      	adds	r3, #4
 8005120:	3715      	adds	r7, #21
 8005122:	42bd      	cmp	r5, r7
 8005124:	bf38      	it	cc
 8005126:	2304      	movcc	r3, #4
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	9b02      	ldr	r3, [sp, #8]
 800512c:	9103      	str	r1, [sp, #12]
 800512e:	428b      	cmp	r3, r1
 8005130:	d80c      	bhi.n	800514c <__multiply+0x98>
 8005132:	2e00      	cmp	r6, #0
 8005134:	dd03      	ble.n	800513e <__multiply+0x8a>
 8005136:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800513a:	2b00      	cmp	r3, #0
 800513c:	d055      	beq.n	80051ea <__multiply+0x136>
 800513e:	6106      	str	r6, [r0, #16]
 8005140:	b005      	add	sp, #20
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	f843 2b04 	str.w	r2, [r3], #4
 800514a:	e7d9      	b.n	8005100 <__multiply+0x4c>
 800514c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005150:	f1ba 0f00 	cmp.w	sl, #0
 8005154:	d01f      	beq.n	8005196 <__multiply+0xe2>
 8005156:	46c4      	mov	ip, r8
 8005158:	46a1      	mov	r9, r4
 800515a:	2700      	movs	r7, #0
 800515c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005160:	f8d9 3000 	ldr.w	r3, [r9]
 8005164:	fa1f fb82 	uxth.w	fp, r2
 8005168:	b29b      	uxth	r3, r3
 800516a:	fb0a 330b 	mla	r3, sl, fp, r3
 800516e:	443b      	add	r3, r7
 8005170:	f8d9 7000 	ldr.w	r7, [r9]
 8005174:	0c12      	lsrs	r2, r2, #16
 8005176:	0c3f      	lsrs	r7, r7, #16
 8005178:	fb0a 7202 	mla	r2, sl, r2, r7
 800517c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005180:	b29b      	uxth	r3, r3
 8005182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005186:	4565      	cmp	r5, ip
 8005188:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800518c:	f849 3b04 	str.w	r3, [r9], #4
 8005190:	d8e4      	bhi.n	800515c <__multiply+0xa8>
 8005192:	9b01      	ldr	r3, [sp, #4]
 8005194:	50e7      	str	r7, [r4, r3]
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	3104      	adds	r1, #4
 800519a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800519e:	f1b9 0f00 	cmp.w	r9, #0
 80051a2:	d020      	beq.n	80051e6 <__multiply+0x132>
 80051a4:	4647      	mov	r7, r8
 80051a6:	46a4      	mov	ip, r4
 80051a8:	f04f 0a00 	mov.w	sl, #0
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	f8b7 b000 	ldrh.w	fp, [r7]
 80051b2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	fb09 220b 	mla	r2, r9, fp, r2
 80051bc:	4452      	add	r2, sl
 80051be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051c2:	f84c 3b04 	str.w	r3, [ip], #4
 80051c6:	f857 3b04 	ldr.w	r3, [r7], #4
 80051ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051ce:	f8bc 3000 	ldrh.w	r3, [ip]
 80051d2:	42bd      	cmp	r5, r7
 80051d4:	fb09 330a 	mla	r3, r9, sl, r3
 80051d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80051dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051e0:	d8e5      	bhi.n	80051ae <__multiply+0xfa>
 80051e2:	9a01      	ldr	r2, [sp, #4]
 80051e4:	50a3      	str	r3, [r4, r2]
 80051e6:	3404      	adds	r4, #4
 80051e8:	e79f      	b.n	800512a <__multiply+0x76>
 80051ea:	3e01      	subs	r6, #1
 80051ec:	e7a1      	b.n	8005132 <__multiply+0x7e>
 80051ee:	bf00      	nop
 80051f0:	08008437 	.word	0x08008437
 80051f4:	08008448 	.word	0x08008448

080051f8 <__pow5mult>:
 80051f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051fc:	4615      	mov	r5, r2
 80051fe:	f012 0203 	ands.w	r2, r2, #3
 8005202:	4607      	mov	r7, r0
 8005204:	460e      	mov	r6, r1
 8005206:	d007      	beq.n	8005218 <__pow5mult+0x20>
 8005208:	4c25      	ldr	r4, [pc, #148]	@ (80052a0 <__pow5mult+0xa8>)
 800520a:	3a01      	subs	r2, #1
 800520c:	2300      	movs	r3, #0
 800520e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005212:	f7ff fe5d 	bl	8004ed0 <__multadd>
 8005216:	4606      	mov	r6, r0
 8005218:	10ad      	asrs	r5, r5, #2
 800521a:	d03d      	beq.n	8005298 <__pow5mult+0xa0>
 800521c:	69fc      	ldr	r4, [r7, #28]
 800521e:	b97c      	cbnz	r4, 8005240 <__pow5mult+0x48>
 8005220:	2010      	movs	r0, #16
 8005222:	f7ff fd3d 	bl	8004ca0 <malloc>
 8005226:	4602      	mov	r2, r0
 8005228:	61f8      	str	r0, [r7, #28]
 800522a:	b928      	cbnz	r0, 8005238 <__pow5mult+0x40>
 800522c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005230:	4b1c      	ldr	r3, [pc, #112]	@ (80052a4 <__pow5mult+0xac>)
 8005232:	481d      	ldr	r0, [pc, #116]	@ (80052a8 <__pow5mult+0xb0>)
 8005234:	f001 fb56 	bl	80068e4 <__assert_func>
 8005238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800523c:	6004      	str	r4, [r0, #0]
 800523e:	60c4      	str	r4, [r0, #12]
 8005240:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005248:	b94c      	cbnz	r4, 800525e <__pow5mult+0x66>
 800524a:	f240 2171 	movw	r1, #625	@ 0x271
 800524e:	4638      	mov	r0, r7
 8005250:	f7ff ff1a 	bl	8005088 <__i2b>
 8005254:	2300      	movs	r3, #0
 8005256:	4604      	mov	r4, r0
 8005258:	f8c8 0008 	str.w	r0, [r8, #8]
 800525c:	6003      	str	r3, [r0, #0]
 800525e:	f04f 0900 	mov.w	r9, #0
 8005262:	07eb      	lsls	r3, r5, #31
 8005264:	d50a      	bpl.n	800527c <__pow5mult+0x84>
 8005266:	4631      	mov	r1, r6
 8005268:	4622      	mov	r2, r4
 800526a:	4638      	mov	r0, r7
 800526c:	f7ff ff22 	bl	80050b4 <__multiply>
 8005270:	4680      	mov	r8, r0
 8005272:	4631      	mov	r1, r6
 8005274:	4638      	mov	r0, r7
 8005276:	f7ff fe09 	bl	8004e8c <_Bfree>
 800527a:	4646      	mov	r6, r8
 800527c:	106d      	asrs	r5, r5, #1
 800527e:	d00b      	beq.n	8005298 <__pow5mult+0xa0>
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	b938      	cbnz	r0, 8005294 <__pow5mult+0x9c>
 8005284:	4622      	mov	r2, r4
 8005286:	4621      	mov	r1, r4
 8005288:	4638      	mov	r0, r7
 800528a:	f7ff ff13 	bl	80050b4 <__multiply>
 800528e:	6020      	str	r0, [r4, #0]
 8005290:	f8c0 9000 	str.w	r9, [r0]
 8005294:	4604      	mov	r4, r0
 8005296:	e7e4      	b.n	8005262 <__pow5mult+0x6a>
 8005298:	4630      	mov	r0, r6
 800529a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800529e:	bf00      	nop
 80052a0:	08008558 	.word	0x08008558
 80052a4:	080083c8 	.word	0x080083c8
 80052a8:	08008448 	.word	0x08008448

080052ac <__lshift>:
 80052ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	460c      	mov	r4, r1
 80052b2:	4607      	mov	r7, r0
 80052b4:	4691      	mov	r9, r2
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	6849      	ldr	r1, [r1, #4]
 80052ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80052c4:	f108 0601 	add.w	r6, r8, #1
 80052c8:	42b3      	cmp	r3, r6
 80052ca:	db0b      	blt.n	80052e4 <__lshift+0x38>
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff fd9d 	bl	8004e0c <_Balloc>
 80052d2:	4605      	mov	r5, r0
 80052d4:	b948      	cbnz	r0, 80052ea <__lshift+0x3e>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80052dc:	4b27      	ldr	r3, [pc, #156]	@ (800537c <__lshift+0xd0>)
 80052de:	4828      	ldr	r0, [pc, #160]	@ (8005380 <__lshift+0xd4>)
 80052e0:	f001 fb00 	bl	80068e4 <__assert_func>
 80052e4:	3101      	adds	r1, #1
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	e7ee      	b.n	80052c8 <__lshift+0x1c>
 80052ea:	2300      	movs	r3, #0
 80052ec:	f100 0114 	add.w	r1, r0, #20
 80052f0:	f100 0210 	add.w	r2, r0, #16
 80052f4:	4618      	mov	r0, r3
 80052f6:	4553      	cmp	r3, sl
 80052f8:	db33      	blt.n	8005362 <__lshift+0xb6>
 80052fa:	6920      	ldr	r0, [r4, #16]
 80052fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005300:	f104 0314 	add.w	r3, r4, #20
 8005304:	f019 091f 	ands.w	r9, r9, #31
 8005308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800530c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005310:	d02b      	beq.n	800536a <__lshift+0xbe>
 8005312:	468a      	mov	sl, r1
 8005314:	2200      	movs	r2, #0
 8005316:	f1c9 0e20 	rsb	lr, r9, #32
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	fa00 f009 	lsl.w	r0, r0, r9
 8005320:	4310      	orrs	r0, r2
 8005322:	f84a 0b04 	str.w	r0, [sl], #4
 8005326:	f853 2b04 	ldr.w	r2, [r3], #4
 800532a:	459c      	cmp	ip, r3
 800532c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005330:	d8f3      	bhi.n	800531a <__lshift+0x6e>
 8005332:	ebac 0304 	sub.w	r3, ip, r4
 8005336:	3b15      	subs	r3, #21
 8005338:	f023 0303 	bic.w	r3, r3, #3
 800533c:	3304      	adds	r3, #4
 800533e:	f104 0015 	add.w	r0, r4, #21
 8005342:	4560      	cmp	r0, ip
 8005344:	bf88      	it	hi
 8005346:	2304      	movhi	r3, #4
 8005348:	50ca      	str	r2, [r1, r3]
 800534a:	b10a      	cbz	r2, 8005350 <__lshift+0xa4>
 800534c:	f108 0602 	add.w	r6, r8, #2
 8005350:	3e01      	subs	r6, #1
 8005352:	4638      	mov	r0, r7
 8005354:	4621      	mov	r1, r4
 8005356:	612e      	str	r6, [r5, #16]
 8005358:	f7ff fd98 	bl	8004e8c <_Bfree>
 800535c:	4628      	mov	r0, r5
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005362:	f842 0f04 	str.w	r0, [r2, #4]!
 8005366:	3301      	adds	r3, #1
 8005368:	e7c5      	b.n	80052f6 <__lshift+0x4a>
 800536a:	3904      	subs	r1, #4
 800536c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005370:	459c      	cmp	ip, r3
 8005372:	f841 2f04 	str.w	r2, [r1, #4]!
 8005376:	d8f9      	bhi.n	800536c <__lshift+0xc0>
 8005378:	e7ea      	b.n	8005350 <__lshift+0xa4>
 800537a:	bf00      	nop
 800537c:	08008437 	.word	0x08008437
 8005380:	08008448 	.word	0x08008448

08005384 <__mcmp>:
 8005384:	4603      	mov	r3, r0
 8005386:	690a      	ldr	r2, [r1, #16]
 8005388:	6900      	ldr	r0, [r0, #16]
 800538a:	b530      	push	{r4, r5, lr}
 800538c:	1a80      	subs	r0, r0, r2
 800538e:	d10e      	bne.n	80053ae <__mcmp+0x2a>
 8005390:	3314      	adds	r3, #20
 8005392:	3114      	adds	r1, #20
 8005394:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005398:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800539c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80053a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80053a4:	4295      	cmp	r5, r2
 80053a6:	d003      	beq.n	80053b0 <__mcmp+0x2c>
 80053a8:	d205      	bcs.n	80053b6 <__mcmp+0x32>
 80053aa:	f04f 30ff 	mov.w	r0, #4294967295
 80053ae:	bd30      	pop	{r4, r5, pc}
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d3f3      	bcc.n	800539c <__mcmp+0x18>
 80053b4:	e7fb      	b.n	80053ae <__mcmp+0x2a>
 80053b6:	2001      	movs	r0, #1
 80053b8:	e7f9      	b.n	80053ae <__mcmp+0x2a>
	...

080053bc <__mdiff>:
 80053bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	4689      	mov	r9, r1
 80053c2:	4606      	mov	r6, r0
 80053c4:	4611      	mov	r1, r2
 80053c6:	4648      	mov	r0, r9
 80053c8:	4614      	mov	r4, r2
 80053ca:	f7ff ffdb 	bl	8005384 <__mcmp>
 80053ce:	1e05      	subs	r5, r0, #0
 80053d0:	d112      	bne.n	80053f8 <__mdiff+0x3c>
 80053d2:	4629      	mov	r1, r5
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff fd19 	bl	8004e0c <_Balloc>
 80053da:	4602      	mov	r2, r0
 80053dc:	b928      	cbnz	r0, 80053ea <__mdiff+0x2e>
 80053de:	f240 2137 	movw	r1, #567	@ 0x237
 80053e2:	4b3e      	ldr	r3, [pc, #248]	@ (80054dc <__mdiff+0x120>)
 80053e4:	483e      	ldr	r0, [pc, #248]	@ (80054e0 <__mdiff+0x124>)
 80053e6:	f001 fa7d 	bl	80068e4 <__assert_func>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80053f0:	4610      	mov	r0, r2
 80053f2:	b003      	add	sp, #12
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f8:	bfbc      	itt	lt
 80053fa:	464b      	movlt	r3, r9
 80053fc:	46a1      	movlt	r9, r4
 80053fe:	4630      	mov	r0, r6
 8005400:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005404:	bfba      	itte	lt
 8005406:	461c      	movlt	r4, r3
 8005408:	2501      	movlt	r5, #1
 800540a:	2500      	movge	r5, #0
 800540c:	f7ff fcfe 	bl	8004e0c <_Balloc>
 8005410:	4602      	mov	r2, r0
 8005412:	b918      	cbnz	r0, 800541c <__mdiff+0x60>
 8005414:	f240 2145 	movw	r1, #581	@ 0x245
 8005418:	4b30      	ldr	r3, [pc, #192]	@ (80054dc <__mdiff+0x120>)
 800541a:	e7e3      	b.n	80053e4 <__mdiff+0x28>
 800541c:	f100 0b14 	add.w	fp, r0, #20
 8005420:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005424:	f109 0310 	add.w	r3, r9, #16
 8005428:	60c5      	str	r5, [r0, #12]
 800542a:	f04f 0c00 	mov.w	ip, #0
 800542e:	f109 0514 	add.w	r5, r9, #20
 8005432:	46d9      	mov	r9, fp
 8005434:	6926      	ldr	r6, [r4, #16]
 8005436:	f104 0e14 	add.w	lr, r4, #20
 800543a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800543e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	f85e 0b04 	ldr.w	r0, [lr], #4
 800544a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800544e:	b281      	uxth	r1, r0
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	fa1f f38a 	uxth.w	r3, sl
 8005456:	1a5b      	subs	r3, r3, r1
 8005458:	0c00      	lsrs	r0, r0, #16
 800545a:	4463      	add	r3, ip
 800545c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005460:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800546a:	4576      	cmp	r6, lr
 800546c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005470:	f849 3b04 	str.w	r3, [r9], #4
 8005474:	d8e6      	bhi.n	8005444 <__mdiff+0x88>
 8005476:	1b33      	subs	r3, r6, r4
 8005478:	3b15      	subs	r3, #21
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	3415      	adds	r4, #21
 8005480:	3304      	adds	r3, #4
 8005482:	42a6      	cmp	r6, r4
 8005484:	bf38      	it	cc
 8005486:	2304      	movcc	r3, #4
 8005488:	441d      	add	r5, r3
 800548a:	445b      	add	r3, fp
 800548c:	461e      	mov	r6, r3
 800548e:	462c      	mov	r4, r5
 8005490:	4544      	cmp	r4, r8
 8005492:	d30e      	bcc.n	80054b2 <__mdiff+0xf6>
 8005494:	f108 0103 	add.w	r1, r8, #3
 8005498:	1b49      	subs	r1, r1, r5
 800549a:	f021 0103 	bic.w	r1, r1, #3
 800549e:	3d03      	subs	r5, #3
 80054a0:	45a8      	cmp	r8, r5
 80054a2:	bf38      	it	cc
 80054a4:	2100      	movcc	r1, #0
 80054a6:	440b      	add	r3, r1
 80054a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80054ac:	b199      	cbz	r1, 80054d6 <__mdiff+0x11a>
 80054ae:	6117      	str	r7, [r2, #16]
 80054b0:	e79e      	b.n	80053f0 <__mdiff+0x34>
 80054b2:	46e6      	mov	lr, ip
 80054b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80054b8:	fa1f fc81 	uxth.w	ip, r1
 80054bc:	44f4      	add	ip, lr
 80054be:	0c08      	lsrs	r0, r1, #16
 80054c0:	4471      	add	r1, lr
 80054c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80054c6:	b289      	uxth	r1, r1
 80054c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80054cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80054d0:	f846 1b04 	str.w	r1, [r6], #4
 80054d4:	e7dc      	b.n	8005490 <__mdiff+0xd4>
 80054d6:	3f01      	subs	r7, #1
 80054d8:	e7e6      	b.n	80054a8 <__mdiff+0xec>
 80054da:	bf00      	nop
 80054dc:	08008437 	.word	0x08008437
 80054e0:	08008448 	.word	0x08008448

080054e4 <__ulp>:
 80054e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005520 <__ulp+0x3c>)
 80054e6:	400b      	ands	r3, r1
 80054e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dc08      	bgt.n	8005502 <__ulp+0x1e>
 80054f0:	425b      	negs	r3, r3
 80054f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80054f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80054fa:	da04      	bge.n	8005506 <__ulp+0x22>
 80054fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005500:	4113      	asrs	r3, r2
 8005502:	2200      	movs	r2, #0
 8005504:	e008      	b.n	8005518 <__ulp+0x34>
 8005506:	f1a2 0314 	sub.w	r3, r2, #20
 800550a:	2b1e      	cmp	r3, #30
 800550c:	bfd6      	itet	le
 800550e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005512:	2201      	movgt	r2, #1
 8005514:	40da      	lsrle	r2, r3
 8005516:	2300      	movs	r3, #0
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	7ff00000 	.word	0x7ff00000

08005524 <__b2d>:
 8005524:	6902      	ldr	r2, [r0, #16]
 8005526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005528:	f100 0614 	add.w	r6, r0, #20
 800552c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005530:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005534:	4f1e      	ldr	r7, [pc, #120]	@ (80055b0 <__b2d+0x8c>)
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff fd5a 	bl	8004ff0 <__hi0bits>
 800553c:	4603      	mov	r3, r0
 800553e:	f1c0 0020 	rsb	r0, r0, #32
 8005542:	2b0a      	cmp	r3, #10
 8005544:	f1a2 0504 	sub.w	r5, r2, #4
 8005548:	6008      	str	r0, [r1, #0]
 800554a:	dc12      	bgt.n	8005572 <__b2d+0x4e>
 800554c:	42ae      	cmp	r6, r5
 800554e:	bf2c      	ite	cs
 8005550:	2200      	movcs	r2, #0
 8005552:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005556:	f1c3 0c0b 	rsb	ip, r3, #11
 800555a:	3315      	adds	r3, #21
 800555c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005560:	fa04 f303 	lsl.w	r3, r4, r3
 8005564:	fa22 f20c 	lsr.w	r2, r2, ip
 8005568:	ea4e 0107 	orr.w	r1, lr, r7
 800556c:	431a      	orrs	r2, r3
 800556e:	4610      	mov	r0, r2
 8005570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005572:	42ae      	cmp	r6, r5
 8005574:	bf36      	itet	cc
 8005576:	f1a2 0508 	subcc.w	r5, r2, #8
 800557a:	2200      	movcs	r2, #0
 800557c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005580:	3b0b      	subs	r3, #11
 8005582:	d012      	beq.n	80055aa <__b2d+0x86>
 8005584:	f1c3 0720 	rsb	r7, r3, #32
 8005588:	fa22 f107 	lsr.w	r1, r2, r7
 800558c:	409c      	lsls	r4, r3
 800558e:	430c      	orrs	r4, r1
 8005590:	42b5      	cmp	r5, r6
 8005592:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005596:	bf94      	ite	ls
 8005598:	2400      	movls	r4, #0
 800559a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800559e:	409a      	lsls	r2, r3
 80055a0:	40fc      	lsrs	r4, r7
 80055a2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80055a6:	4322      	orrs	r2, r4
 80055a8:	e7e1      	b.n	800556e <__b2d+0x4a>
 80055aa:	ea44 0107 	orr.w	r1, r4, r7
 80055ae:	e7de      	b.n	800556e <__b2d+0x4a>
 80055b0:	3ff00000 	.word	0x3ff00000

080055b4 <__d2b>:
 80055b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80055b8:	2101      	movs	r1, #1
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
 80055be:	9e08      	ldr	r6, [sp, #32]
 80055c0:	f7ff fc24 	bl	8004e0c <_Balloc>
 80055c4:	4604      	mov	r4, r0
 80055c6:	b930      	cbnz	r0, 80055d6 <__d2b+0x22>
 80055c8:	4602      	mov	r2, r0
 80055ca:	f240 310f 	movw	r1, #783	@ 0x30f
 80055ce:	4b23      	ldr	r3, [pc, #140]	@ (800565c <__d2b+0xa8>)
 80055d0:	4823      	ldr	r0, [pc, #140]	@ (8005660 <__d2b+0xac>)
 80055d2:	f001 f987 	bl	80068e4 <__assert_func>
 80055d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80055da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055de:	b10d      	cbz	r5, 80055e4 <__d2b+0x30>
 80055e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	f1b8 0300 	subs.w	r3, r8, #0
 80055ea:	d024      	beq.n	8005636 <__d2b+0x82>
 80055ec:	4668      	mov	r0, sp
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	f7ff fd1d 	bl	800502e <__lo0bits>
 80055f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80055f8:	b1d8      	cbz	r0, 8005632 <__d2b+0x7e>
 80055fa:	f1c0 0320 	rsb	r3, r0, #32
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	430b      	orrs	r3, r1
 8005604:	40c2      	lsrs	r2, r0
 8005606:	6163      	str	r3, [r4, #20]
 8005608:	9201      	str	r2, [sp, #4]
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf0c      	ite	eq
 8005610:	2201      	moveq	r2, #1
 8005612:	2202      	movne	r2, #2
 8005614:	61a3      	str	r3, [r4, #24]
 8005616:	6122      	str	r2, [r4, #16]
 8005618:	b1ad      	cbz	r5, 8005646 <__d2b+0x92>
 800561a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800561e:	4405      	add	r5, r0
 8005620:	6035      	str	r5, [r6, #0]
 8005622:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005628:	6018      	str	r0, [r3, #0]
 800562a:	4620      	mov	r0, r4
 800562c:	b002      	add	sp, #8
 800562e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005632:	6161      	str	r1, [r4, #20]
 8005634:	e7e9      	b.n	800560a <__d2b+0x56>
 8005636:	a801      	add	r0, sp, #4
 8005638:	f7ff fcf9 	bl	800502e <__lo0bits>
 800563c:	9b01      	ldr	r3, [sp, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	6163      	str	r3, [r4, #20]
 8005642:	3020      	adds	r0, #32
 8005644:	e7e7      	b.n	8005616 <__d2b+0x62>
 8005646:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800564a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800564e:	6030      	str	r0, [r6, #0]
 8005650:	6918      	ldr	r0, [r3, #16]
 8005652:	f7ff fccd 	bl	8004ff0 <__hi0bits>
 8005656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800565a:	e7e4      	b.n	8005626 <__d2b+0x72>
 800565c:	08008437 	.word	0x08008437
 8005660:	08008448 	.word	0x08008448

08005664 <__ratio>:
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	b085      	sub	sp, #20
 800566a:	e9cd 1000 	strd	r1, r0, [sp]
 800566e:	a902      	add	r1, sp, #8
 8005670:	f7ff ff58 	bl	8005524 <__b2d>
 8005674:	468b      	mov	fp, r1
 8005676:	4606      	mov	r6, r0
 8005678:	460f      	mov	r7, r1
 800567a:	9800      	ldr	r0, [sp, #0]
 800567c:	a903      	add	r1, sp, #12
 800567e:	f7ff ff51 	bl	8005524 <__b2d>
 8005682:	460d      	mov	r5, r1
 8005684:	9b01      	ldr	r3, [sp, #4]
 8005686:	4689      	mov	r9, r1
 8005688:	6919      	ldr	r1, [r3, #16]
 800568a:	9b00      	ldr	r3, [sp, #0]
 800568c:	4604      	mov	r4, r0
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	4630      	mov	r0, r6
 8005692:	1ac9      	subs	r1, r1, r3
 8005694:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bfcd      	iteet	gt
 80056a2:	463a      	movgt	r2, r7
 80056a4:	462a      	movle	r2, r5
 80056a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80056aa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80056ae:	bfd8      	it	le
 80056b0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80056b4:	464b      	mov	r3, r9
 80056b6:	4622      	mov	r2, r4
 80056b8:	4659      	mov	r1, fp
 80056ba:	f7fb f837 	bl	800072c <__aeabi_ddiv>
 80056be:	b005      	add	sp, #20
 80056c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056c4 <__copybits>:
 80056c4:	3901      	subs	r1, #1
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	1149      	asrs	r1, r1, #5
 80056ca:	6914      	ldr	r4, [r2, #16]
 80056cc:	3101      	adds	r1, #1
 80056ce:	f102 0314 	add.w	r3, r2, #20
 80056d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80056d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80056da:	1f05      	subs	r5, r0, #4
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d30c      	bcc.n	80056fa <__copybits+0x36>
 80056e0:	1aa3      	subs	r3, r4, r2
 80056e2:	3b11      	subs	r3, #17
 80056e4:	f023 0303 	bic.w	r3, r3, #3
 80056e8:	3211      	adds	r2, #17
 80056ea:	42a2      	cmp	r2, r4
 80056ec:	bf88      	it	hi
 80056ee:	2300      	movhi	r3, #0
 80056f0:	4418      	add	r0, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	4288      	cmp	r0, r1
 80056f6:	d305      	bcc.n	8005704 <__copybits+0x40>
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80056fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8005702:	e7eb      	b.n	80056dc <__copybits+0x18>
 8005704:	f840 3b04 	str.w	r3, [r0], #4
 8005708:	e7f4      	b.n	80056f4 <__copybits+0x30>

0800570a <__any_on>:
 800570a:	f100 0214 	add.w	r2, r0, #20
 800570e:	6900      	ldr	r0, [r0, #16]
 8005710:	114b      	asrs	r3, r1, #5
 8005712:	4298      	cmp	r0, r3
 8005714:	b510      	push	{r4, lr}
 8005716:	db11      	blt.n	800573c <__any_on+0x32>
 8005718:	dd0a      	ble.n	8005730 <__any_on+0x26>
 800571a:	f011 011f 	ands.w	r1, r1, #31
 800571e:	d007      	beq.n	8005730 <__any_on+0x26>
 8005720:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005724:	fa24 f001 	lsr.w	r0, r4, r1
 8005728:	fa00 f101 	lsl.w	r1, r0, r1
 800572c:	428c      	cmp	r4, r1
 800572e:	d10b      	bne.n	8005748 <__any_on+0x3e>
 8005730:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005734:	4293      	cmp	r3, r2
 8005736:	d803      	bhi.n	8005740 <__any_on+0x36>
 8005738:	2000      	movs	r0, #0
 800573a:	bd10      	pop	{r4, pc}
 800573c:	4603      	mov	r3, r0
 800573e:	e7f7      	b.n	8005730 <__any_on+0x26>
 8005740:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005744:	2900      	cmp	r1, #0
 8005746:	d0f5      	beq.n	8005734 <__any_on+0x2a>
 8005748:	2001      	movs	r0, #1
 800574a:	e7f6      	b.n	800573a <__any_on+0x30>

0800574c <sulp>:
 800574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005750:	460f      	mov	r7, r1
 8005752:	4690      	mov	r8, r2
 8005754:	f7ff fec6 	bl	80054e4 <__ulp>
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	f1b8 0f00 	cmp.w	r8, #0
 8005760:	d011      	beq.n	8005786 <sulp+0x3a>
 8005762:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005766:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800576a:	2b00      	cmp	r3, #0
 800576c:	dd0b      	ble.n	8005786 <sulp+0x3a>
 800576e:	2400      	movs	r4, #0
 8005770:	051b      	lsls	r3, r3, #20
 8005772:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005776:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800577a:	4622      	mov	r2, r4
 800577c:	462b      	mov	r3, r5
 800577e:	f7fa feab 	bl	80004d8 <__aeabi_dmul>
 8005782:	4604      	mov	r4, r0
 8005784:	460d      	mov	r5, r1
 8005786:	4620      	mov	r0, r4
 8005788:	4629      	mov	r1, r5
 800578a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005790 <_strtod_l>:
 8005790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	b09f      	sub	sp, #124	@ 0x7c
 8005796:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005798:	2200      	movs	r2, #0
 800579a:	460c      	mov	r4, r1
 800579c:	921a      	str	r2, [sp, #104]	@ 0x68
 800579e:	f04f 0a00 	mov.w	sl, #0
 80057a2:	f04f 0b00 	mov.w	fp, #0
 80057a6:	460a      	mov	r2, r1
 80057a8:	9005      	str	r0, [sp, #20]
 80057aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80057ac:	7811      	ldrb	r1, [r2, #0]
 80057ae:	292b      	cmp	r1, #43	@ 0x2b
 80057b0:	d048      	beq.n	8005844 <_strtod_l+0xb4>
 80057b2:	d836      	bhi.n	8005822 <_strtod_l+0x92>
 80057b4:	290d      	cmp	r1, #13
 80057b6:	d830      	bhi.n	800581a <_strtod_l+0x8a>
 80057b8:	2908      	cmp	r1, #8
 80057ba:	d830      	bhi.n	800581e <_strtod_l+0x8e>
 80057bc:	2900      	cmp	r1, #0
 80057be:	d039      	beq.n	8005834 <_strtod_l+0xa4>
 80057c0:	2200      	movs	r2, #0
 80057c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80057c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80057c6:	782a      	ldrb	r2, [r5, #0]
 80057c8:	2a30      	cmp	r2, #48	@ 0x30
 80057ca:	f040 80b0 	bne.w	800592e <_strtod_l+0x19e>
 80057ce:	786a      	ldrb	r2, [r5, #1]
 80057d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80057d4:	2a58      	cmp	r2, #88	@ 0x58
 80057d6:	d16c      	bne.n	80058b2 <_strtod_l+0x122>
 80057d8:	9302      	str	r3, [sp, #8]
 80057da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057dc:	4a8f      	ldr	r2, [pc, #572]	@ (8005a1c <_strtod_l+0x28c>)
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	ab1a      	add	r3, sp, #104	@ 0x68
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	9805      	ldr	r0, [sp, #20]
 80057e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80057e8:	a919      	add	r1, sp, #100	@ 0x64
 80057ea:	f001 f915 	bl	8006a18 <__gethex>
 80057ee:	f010 060f 	ands.w	r6, r0, #15
 80057f2:	4604      	mov	r4, r0
 80057f4:	d005      	beq.n	8005802 <_strtod_l+0x72>
 80057f6:	2e06      	cmp	r6, #6
 80057f8:	d126      	bne.n	8005848 <_strtod_l+0xb8>
 80057fa:	2300      	movs	r3, #0
 80057fc:	3501      	adds	r5, #1
 80057fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8005800:	930e      	str	r3, [sp, #56]	@ 0x38
 8005802:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005804:	2b00      	cmp	r3, #0
 8005806:	f040 8582 	bne.w	800630e <_strtod_l+0xb7e>
 800580a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800580c:	b1bb      	cbz	r3, 800583e <_strtod_l+0xae>
 800580e:	4650      	mov	r0, sl
 8005810:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005814:	b01f      	add	sp, #124	@ 0x7c
 8005816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581a:	2920      	cmp	r1, #32
 800581c:	d1d0      	bne.n	80057c0 <_strtod_l+0x30>
 800581e:	3201      	adds	r2, #1
 8005820:	e7c3      	b.n	80057aa <_strtod_l+0x1a>
 8005822:	292d      	cmp	r1, #45	@ 0x2d
 8005824:	d1cc      	bne.n	80057c0 <_strtod_l+0x30>
 8005826:	2101      	movs	r1, #1
 8005828:	910e      	str	r1, [sp, #56]	@ 0x38
 800582a:	1c51      	adds	r1, r2, #1
 800582c:	9119      	str	r1, [sp, #100]	@ 0x64
 800582e:	7852      	ldrb	r2, [r2, #1]
 8005830:	2a00      	cmp	r2, #0
 8005832:	d1c7      	bne.n	80057c4 <_strtod_l+0x34>
 8005834:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005836:	9419      	str	r4, [sp, #100]	@ 0x64
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 8566 	bne.w	800630a <_strtod_l+0xb7a>
 800583e:	4650      	mov	r0, sl
 8005840:	4659      	mov	r1, fp
 8005842:	e7e7      	b.n	8005814 <_strtod_l+0x84>
 8005844:	2100      	movs	r1, #0
 8005846:	e7ef      	b.n	8005828 <_strtod_l+0x98>
 8005848:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800584a:	b13a      	cbz	r2, 800585c <_strtod_l+0xcc>
 800584c:	2135      	movs	r1, #53	@ 0x35
 800584e:	a81c      	add	r0, sp, #112	@ 0x70
 8005850:	f7ff ff38 	bl	80056c4 <__copybits>
 8005854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005856:	9805      	ldr	r0, [sp, #20]
 8005858:	f7ff fb18 	bl	8004e8c <_Bfree>
 800585c:	3e01      	subs	r6, #1
 800585e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005860:	2e04      	cmp	r6, #4
 8005862:	d806      	bhi.n	8005872 <_strtod_l+0xe2>
 8005864:	e8df f006 	tbb	[pc, r6]
 8005868:	201d0314 	.word	0x201d0314
 800586c:	14          	.byte	0x14
 800586d:	00          	.byte	0x00
 800586e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005872:	05e1      	lsls	r1, r4, #23
 8005874:	bf48      	it	mi
 8005876:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800587a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800587e:	0d1b      	lsrs	r3, r3, #20
 8005880:	051b      	lsls	r3, r3, #20
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1bd      	bne.n	8005802 <_strtod_l+0x72>
 8005886:	f7fe fb27 	bl	8003ed8 <__errno>
 800588a:	2322      	movs	r3, #34	@ 0x22
 800588c:	6003      	str	r3, [r0, #0]
 800588e:	e7b8      	b.n	8005802 <_strtod_l+0x72>
 8005890:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005894:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005898:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800589c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80058a0:	e7e7      	b.n	8005872 <_strtod_l+0xe2>
 80058a2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005a20 <_strtod_l+0x290>
 80058a6:	e7e4      	b.n	8005872 <_strtod_l+0xe2>
 80058a8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80058ac:	f04f 3aff 	mov.w	sl, #4294967295
 80058b0:	e7df      	b.n	8005872 <_strtod_l+0xe2>
 80058b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b30      	cmp	r3, #48	@ 0x30
 80058bc:	d0f9      	beq.n	80058b2 <_strtod_l+0x122>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d09f      	beq.n	8005802 <_strtod_l+0x72>
 80058c2:	2301      	movs	r3, #1
 80058c4:	2700      	movs	r7, #0
 80058c6:	220a      	movs	r2, #10
 80058c8:	46b9      	mov	r9, r7
 80058ca:	9308      	str	r3, [sp, #32]
 80058cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058ce:	970b      	str	r7, [sp, #44]	@ 0x2c
 80058d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80058d2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80058d4:	7805      	ldrb	r5, [r0, #0]
 80058d6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80058da:	b2d9      	uxtb	r1, r3
 80058dc:	2909      	cmp	r1, #9
 80058de:	d928      	bls.n	8005932 <_strtod_l+0x1a2>
 80058e0:	2201      	movs	r2, #1
 80058e2:	4950      	ldr	r1, [pc, #320]	@ (8005a24 <_strtod_l+0x294>)
 80058e4:	f000 ffc8 	bl	8006878 <strncmp>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d032      	beq.n	8005952 <_strtod_l+0x1c2>
 80058ec:	2000      	movs	r0, #0
 80058ee:	462a      	mov	r2, r5
 80058f0:	4603      	mov	r3, r0
 80058f2:	464d      	mov	r5, r9
 80058f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80058f6:	2a65      	cmp	r2, #101	@ 0x65
 80058f8:	d001      	beq.n	80058fe <_strtod_l+0x16e>
 80058fa:	2a45      	cmp	r2, #69	@ 0x45
 80058fc:	d114      	bne.n	8005928 <_strtod_l+0x198>
 80058fe:	b91d      	cbnz	r5, 8005908 <_strtod_l+0x178>
 8005900:	9a08      	ldr	r2, [sp, #32]
 8005902:	4302      	orrs	r2, r0
 8005904:	d096      	beq.n	8005834 <_strtod_l+0xa4>
 8005906:	2500      	movs	r5, #0
 8005908:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800590a:	1c62      	adds	r2, r4, #1
 800590c:	9219      	str	r2, [sp, #100]	@ 0x64
 800590e:	7862      	ldrb	r2, [r4, #1]
 8005910:	2a2b      	cmp	r2, #43	@ 0x2b
 8005912:	d07a      	beq.n	8005a0a <_strtod_l+0x27a>
 8005914:	2a2d      	cmp	r2, #45	@ 0x2d
 8005916:	d07e      	beq.n	8005a16 <_strtod_l+0x286>
 8005918:	f04f 0c00 	mov.w	ip, #0
 800591c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005920:	2909      	cmp	r1, #9
 8005922:	f240 8085 	bls.w	8005a30 <_strtod_l+0x2a0>
 8005926:	9419      	str	r4, [sp, #100]	@ 0x64
 8005928:	f04f 0800 	mov.w	r8, #0
 800592c:	e0a5      	b.n	8005a7a <_strtod_l+0x2ea>
 800592e:	2300      	movs	r3, #0
 8005930:	e7c8      	b.n	80058c4 <_strtod_l+0x134>
 8005932:	f1b9 0f08 	cmp.w	r9, #8
 8005936:	bfd8      	it	le
 8005938:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800593a:	f100 0001 	add.w	r0, r0, #1
 800593e:	bfd6      	itet	le
 8005940:	fb02 3301 	mlale	r3, r2, r1, r3
 8005944:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005948:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800594a:	f109 0901 	add.w	r9, r9, #1
 800594e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005950:	e7bf      	b.n	80058d2 <_strtod_l+0x142>
 8005952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	9219      	str	r2, [sp, #100]	@ 0x64
 8005958:	785a      	ldrb	r2, [r3, #1]
 800595a:	f1b9 0f00 	cmp.w	r9, #0
 800595e:	d03b      	beq.n	80059d8 <_strtod_l+0x248>
 8005960:	464d      	mov	r5, r9
 8005962:	900a      	str	r0, [sp, #40]	@ 0x28
 8005964:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005968:	2b09      	cmp	r3, #9
 800596a:	d912      	bls.n	8005992 <_strtod_l+0x202>
 800596c:	2301      	movs	r3, #1
 800596e:	e7c2      	b.n	80058f6 <_strtod_l+0x166>
 8005970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005972:	3001      	adds	r0, #1
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	9219      	str	r2, [sp, #100]	@ 0x64
 8005978:	785a      	ldrb	r2, [r3, #1]
 800597a:	2a30      	cmp	r2, #48	@ 0x30
 800597c:	d0f8      	beq.n	8005970 <_strtod_l+0x1e0>
 800597e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005982:	2b08      	cmp	r3, #8
 8005984:	f200 84c8 	bhi.w	8006318 <_strtod_l+0xb88>
 8005988:	900a      	str	r0, [sp, #40]	@ 0x28
 800598a:	2000      	movs	r0, #0
 800598c:	4605      	mov	r5, r0
 800598e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005990:	930c      	str	r3, [sp, #48]	@ 0x30
 8005992:	3a30      	subs	r2, #48	@ 0x30
 8005994:	f100 0301 	add.w	r3, r0, #1
 8005998:	d018      	beq.n	80059cc <_strtod_l+0x23c>
 800599a:	462e      	mov	r6, r5
 800599c:	f04f 0e0a 	mov.w	lr, #10
 80059a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059a2:	4419      	add	r1, r3
 80059a4:	910a      	str	r1, [sp, #40]	@ 0x28
 80059a6:	1c71      	adds	r1, r6, #1
 80059a8:	eba1 0c05 	sub.w	ip, r1, r5
 80059ac:	4563      	cmp	r3, ip
 80059ae:	dc15      	bgt.n	80059dc <_strtod_l+0x24c>
 80059b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80059b4:	182b      	adds	r3, r5, r0
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	f105 0501 	add.w	r5, r5, #1
 80059bc:	4405      	add	r5, r0
 80059be:	dc1a      	bgt.n	80059f6 <_strtod_l+0x266>
 80059c0:	230a      	movs	r3, #10
 80059c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059c4:	fb03 2301 	mla	r3, r3, r1, r2
 80059c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059ca:	2300      	movs	r3, #0
 80059cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059ce:	4618      	mov	r0, r3
 80059d0:	1c51      	adds	r1, r2, #1
 80059d2:	9119      	str	r1, [sp, #100]	@ 0x64
 80059d4:	7852      	ldrb	r2, [r2, #1]
 80059d6:	e7c5      	b.n	8005964 <_strtod_l+0x1d4>
 80059d8:	4648      	mov	r0, r9
 80059da:	e7ce      	b.n	800597a <_strtod_l+0x1ea>
 80059dc:	2e08      	cmp	r6, #8
 80059de:	dc05      	bgt.n	80059ec <_strtod_l+0x25c>
 80059e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80059e2:	fb0e f606 	mul.w	r6, lr, r6
 80059e6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80059e8:	460e      	mov	r6, r1
 80059ea:	e7dc      	b.n	80059a6 <_strtod_l+0x216>
 80059ec:	2910      	cmp	r1, #16
 80059ee:	bfd8      	it	le
 80059f0:	fb0e f707 	mulle.w	r7, lr, r7
 80059f4:	e7f8      	b.n	80059e8 <_strtod_l+0x258>
 80059f6:	2b0f      	cmp	r3, #15
 80059f8:	bfdc      	itt	le
 80059fa:	230a      	movle	r3, #10
 80059fc:	fb03 2707 	mlale	r7, r3, r7, r2
 8005a00:	e7e3      	b.n	80059ca <_strtod_l+0x23a>
 8005a02:	2300      	movs	r3, #0
 8005a04:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a06:	2301      	movs	r3, #1
 8005a08:	e77a      	b.n	8005900 <_strtod_l+0x170>
 8005a0a:	f04f 0c00 	mov.w	ip, #0
 8005a0e:	1ca2      	adds	r2, r4, #2
 8005a10:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a12:	78a2      	ldrb	r2, [r4, #2]
 8005a14:	e782      	b.n	800591c <_strtod_l+0x18c>
 8005a16:	f04f 0c01 	mov.w	ip, #1
 8005a1a:	e7f8      	b.n	8005a0e <_strtod_l+0x27e>
 8005a1c:	0800866c 	.word	0x0800866c
 8005a20:	7ff00000 	.word	0x7ff00000
 8005a24:	080084a1 	.word	0x080084a1
 8005a28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a2a:	1c51      	adds	r1, r2, #1
 8005a2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a2e:	7852      	ldrb	r2, [r2, #1]
 8005a30:	2a30      	cmp	r2, #48	@ 0x30
 8005a32:	d0f9      	beq.n	8005a28 <_strtod_l+0x298>
 8005a34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005a38:	2908      	cmp	r1, #8
 8005a3a:	f63f af75 	bhi.w	8005928 <_strtod_l+0x198>
 8005a3e:	f04f 080a 	mov.w	r8, #10
 8005a42:	3a30      	subs	r2, #48	@ 0x30
 8005a44:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a48:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005a4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a4c:	1c56      	adds	r6, r2, #1
 8005a4e:	9619      	str	r6, [sp, #100]	@ 0x64
 8005a50:	7852      	ldrb	r2, [r2, #1]
 8005a52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005a56:	f1be 0f09 	cmp.w	lr, #9
 8005a5a:	d939      	bls.n	8005ad0 <_strtod_l+0x340>
 8005a5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005a62:	1a76      	subs	r6, r6, r1
 8005a64:	2e08      	cmp	r6, #8
 8005a66:	dc03      	bgt.n	8005a70 <_strtod_l+0x2e0>
 8005a68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a6a:	4588      	cmp	r8, r1
 8005a6c:	bfa8      	it	ge
 8005a6e:	4688      	movge	r8, r1
 8005a70:	f1bc 0f00 	cmp.w	ip, #0
 8005a74:	d001      	beq.n	8005a7a <_strtod_l+0x2ea>
 8005a76:	f1c8 0800 	rsb	r8, r8, #0
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	d14e      	bne.n	8005b1c <_strtod_l+0x38c>
 8005a7e:	9908      	ldr	r1, [sp, #32]
 8005a80:	4308      	orrs	r0, r1
 8005a82:	f47f aebe 	bne.w	8005802 <_strtod_l+0x72>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f47f aed4 	bne.w	8005834 <_strtod_l+0xa4>
 8005a8c:	2a69      	cmp	r2, #105	@ 0x69
 8005a8e:	d028      	beq.n	8005ae2 <_strtod_l+0x352>
 8005a90:	dc25      	bgt.n	8005ade <_strtod_l+0x34e>
 8005a92:	2a49      	cmp	r2, #73	@ 0x49
 8005a94:	d025      	beq.n	8005ae2 <_strtod_l+0x352>
 8005a96:	2a4e      	cmp	r2, #78	@ 0x4e
 8005a98:	f47f aecc 	bne.w	8005834 <_strtod_l+0xa4>
 8005a9c:	4999      	ldr	r1, [pc, #612]	@ (8005d04 <_strtod_l+0x574>)
 8005a9e:	a819      	add	r0, sp, #100	@ 0x64
 8005aa0:	f001 f9dc 	bl	8006e5c <__match>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f43f aec5 	beq.w	8005834 <_strtod_l+0xa4>
 8005aaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b28      	cmp	r3, #40	@ 0x28
 8005ab0:	d12e      	bne.n	8005b10 <_strtod_l+0x380>
 8005ab2:	4995      	ldr	r1, [pc, #596]	@ (8005d08 <_strtod_l+0x578>)
 8005ab4:	aa1c      	add	r2, sp, #112	@ 0x70
 8005ab6:	a819      	add	r0, sp, #100	@ 0x64
 8005ab8:	f001 f9e4 	bl	8006e84 <__hexnan>
 8005abc:	2805      	cmp	r0, #5
 8005abe:	d127      	bne.n	8005b10 <_strtod_l+0x380>
 8005ac0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005ac2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005ac6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005aca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005ace:	e698      	b.n	8005802 <_strtod_l+0x72>
 8005ad0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ad2:	fb08 2101 	mla	r1, r8, r1, r2
 8005ad6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005ada:	9209      	str	r2, [sp, #36]	@ 0x24
 8005adc:	e7b5      	b.n	8005a4a <_strtod_l+0x2ba>
 8005ade:	2a6e      	cmp	r2, #110	@ 0x6e
 8005ae0:	e7da      	b.n	8005a98 <_strtod_l+0x308>
 8005ae2:	498a      	ldr	r1, [pc, #552]	@ (8005d0c <_strtod_l+0x57c>)
 8005ae4:	a819      	add	r0, sp, #100	@ 0x64
 8005ae6:	f001 f9b9 	bl	8006e5c <__match>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	f43f aea2 	beq.w	8005834 <_strtod_l+0xa4>
 8005af0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005af2:	4987      	ldr	r1, [pc, #540]	@ (8005d10 <_strtod_l+0x580>)
 8005af4:	3b01      	subs	r3, #1
 8005af6:	a819      	add	r0, sp, #100	@ 0x64
 8005af8:	9319      	str	r3, [sp, #100]	@ 0x64
 8005afa:	f001 f9af 	bl	8006e5c <__match>
 8005afe:	b910      	cbnz	r0, 8005b06 <_strtod_l+0x376>
 8005b00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b02:	3301      	adds	r3, #1
 8005b04:	9319      	str	r3, [sp, #100]	@ 0x64
 8005b06:	f04f 0a00 	mov.w	sl, #0
 8005b0a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8005d14 <_strtod_l+0x584>
 8005b0e:	e678      	b.n	8005802 <_strtod_l+0x72>
 8005b10:	4881      	ldr	r0, [pc, #516]	@ (8005d18 <_strtod_l+0x588>)
 8005b12:	f000 fee1 	bl	80068d8 <nan>
 8005b16:	4682      	mov	sl, r0
 8005b18:	468b      	mov	fp, r1
 8005b1a:	e672      	b.n	8005802 <_strtod_l+0x72>
 8005b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b1e:	f1b9 0f00 	cmp.w	r9, #0
 8005b22:	bf08      	it	eq
 8005b24:	46a9      	moveq	r9, r5
 8005b26:	eba8 0303 	sub.w	r3, r8, r3
 8005b2a:	2d10      	cmp	r5, #16
 8005b2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005b2e:	462c      	mov	r4, r5
 8005b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b32:	bfa8      	it	ge
 8005b34:	2410      	movge	r4, #16
 8005b36:	f7fa fc55 	bl	80003e4 <__aeabi_ui2d>
 8005b3a:	2d09      	cmp	r5, #9
 8005b3c:	4682      	mov	sl, r0
 8005b3e:	468b      	mov	fp, r1
 8005b40:	dc11      	bgt.n	8005b66 <_strtod_l+0x3d6>
 8005b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f43f ae5c 	beq.w	8005802 <_strtod_l+0x72>
 8005b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b4c:	dd76      	ble.n	8005c3c <_strtod_l+0x4ac>
 8005b4e:	2b16      	cmp	r3, #22
 8005b50:	dc5d      	bgt.n	8005c0e <_strtod_l+0x47e>
 8005b52:	4972      	ldr	r1, [pc, #456]	@ (8005d1c <_strtod_l+0x58c>)
 8005b54:	4652      	mov	r2, sl
 8005b56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b5a:	465b      	mov	r3, fp
 8005b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b60:	f7fa fcba 	bl	80004d8 <__aeabi_dmul>
 8005b64:	e7d7      	b.n	8005b16 <_strtod_l+0x386>
 8005b66:	4b6d      	ldr	r3, [pc, #436]	@ (8005d1c <_strtod_l+0x58c>)
 8005b68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005b70:	f7fa fcb2 	bl	80004d8 <__aeabi_dmul>
 8005b74:	4682      	mov	sl, r0
 8005b76:	4638      	mov	r0, r7
 8005b78:	468b      	mov	fp, r1
 8005b7a:	f7fa fc33 	bl	80003e4 <__aeabi_ui2d>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4650      	mov	r0, sl
 8005b84:	4659      	mov	r1, fp
 8005b86:	f7fa faf1 	bl	800016c <__adddf3>
 8005b8a:	2d0f      	cmp	r5, #15
 8005b8c:	4682      	mov	sl, r0
 8005b8e:	468b      	mov	fp, r1
 8005b90:	ddd7      	ble.n	8005b42 <_strtod_l+0x3b2>
 8005b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b94:	1b2c      	subs	r4, r5, r4
 8005b96:	441c      	add	r4, r3
 8005b98:	2c00      	cmp	r4, #0
 8005b9a:	f340 8093 	ble.w	8005cc4 <_strtod_l+0x534>
 8005b9e:	f014 030f 	ands.w	r3, r4, #15
 8005ba2:	d00a      	beq.n	8005bba <_strtod_l+0x42a>
 8005ba4:	495d      	ldr	r1, [pc, #372]	@ (8005d1c <_strtod_l+0x58c>)
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb0:	465b      	mov	r3, fp
 8005bb2:	f7fa fc91 	bl	80004d8 <__aeabi_dmul>
 8005bb6:	4682      	mov	sl, r0
 8005bb8:	468b      	mov	fp, r1
 8005bba:	f034 040f 	bics.w	r4, r4, #15
 8005bbe:	d073      	beq.n	8005ca8 <_strtod_l+0x518>
 8005bc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005bc4:	dd49      	ble.n	8005c5a <_strtod_l+0x4ca>
 8005bc6:	2400      	movs	r4, #0
 8005bc8:	46a0      	mov	r8, r4
 8005bca:	46a1      	mov	r9, r4
 8005bcc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005bce:	2322      	movs	r3, #34	@ 0x22
 8005bd0:	f04f 0a00 	mov.w	sl, #0
 8005bd4:	9a05      	ldr	r2, [sp, #20]
 8005bd6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8005d14 <_strtod_l+0x584>
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f43f ae0f 	beq.w	8005802 <_strtod_l+0x72>
 8005be4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005be6:	9805      	ldr	r0, [sp, #20]
 8005be8:	f7ff f950 	bl	8004e8c <_Bfree>
 8005bec:	4649      	mov	r1, r9
 8005bee:	9805      	ldr	r0, [sp, #20]
 8005bf0:	f7ff f94c 	bl	8004e8c <_Bfree>
 8005bf4:	4641      	mov	r1, r8
 8005bf6:	9805      	ldr	r0, [sp, #20]
 8005bf8:	f7ff f948 	bl	8004e8c <_Bfree>
 8005bfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bfe:	9805      	ldr	r0, [sp, #20]
 8005c00:	f7ff f944 	bl	8004e8c <_Bfree>
 8005c04:	4621      	mov	r1, r4
 8005c06:	9805      	ldr	r0, [sp, #20]
 8005c08:	f7ff f940 	bl	8004e8c <_Bfree>
 8005c0c:	e5f9      	b.n	8005802 <_strtod_l+0x72>
 8005c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005c14:	4293      	cmp	r3, r2
 8005c16:	dbbc      	blt.n	8005b92 <_strtod_l+0x402>
 8005c18:	4c40      	ldr	r4, [pc, #256]	@ (8005d1c <_strtod_l+0x58c>)
 8005c1a:	f1c5 050f 	rsb	r5, r5, #15
 8005c1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005c22:	4652      	mov	r2, sl
 8005c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c28:	465b      	mov	r3, fp
 8005c2a:	f7fa fc55 	bl	80004d8 <__aeabi_dmul>
 8005c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c30:	1b5d      	subs	r5, r3, r5
 8005c32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c3a:	e791      	b.n	8005b60 <_strtod_l+0x3d0>
 8005c3c:	3316      	adds	r3, #22
 8005c3e:	dba8      	blt.n	8005b92 <_strtod_l+0x402>
 8005c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c42:	4650      	mov	r0, sl
 8005c44:	eba3 0808 	sub.w	r8, r3, r8
 8005c48:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <_strtod_l+0x58c>)
 8005c4a:	4659      	mov	r1, fp
 8005c4c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005c50:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005c54:	f7fa fd6a 	bl	800072c <__aeabi_ddiv>
 8005c58:	e75d      	b.n	8005b16 <_strtod_l+0x386>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	4659      	mov	r1, fp
 8005c60:	461e      	mov	r6, r3
 8005c62:	4f2f      	ldr	r7, [pc, #188]	@ (8005d20 <_strtod_l+0x590>)
 8005c64:	1124      	asrs	r4, r4, #4
 8005c66:	2c01      	cmp	r4, #1
 8005c68:	dc21      	bgt.n	8005cae <_strtod_l+0x51e>
 8005c6a:	b10b      	cbz	r3, 8005c70 <_strtod_l+0x4e0>
 8005c6c:	4682      	mov	sl, r0
 8005c6e:	468b      	mov	fp, r1
 8005c70:	492b      	ldr	r1, [pc, #172]	@ (8005d20 <_strtod_l+0x590>)
 8005c72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005c76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c80:	465b      	mov	r3, fp
 8005c82:	f7fa fc29 	bl	80004d8 <__aeabi_dmul>
 8005c86:	4b23      	ldr	r3, [pc, #140]	@ (8005d14 <_strtod_l+0x584>)
 8005c88:	460a      	mov	r2, r1
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	4925      	ldr	r1, [pc, #148]	@ (8005d24 <_strtod_l+0x594>)
 8005c8e:	4682      	mov	sl, r0
 8005c90:	428b      	cmp	r3, r1
 8005c92:	d898      	bhi.n	8005bc6 <_strtod_l+0x436>
 8005c94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	bf86      	itte	hi
 8005c9c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ca0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8005d28 <_strtod_l+0x598>
 8005ca4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9308      	str	r3, [sp, #32]
 8005cac:	e076      	b.n	8005d9c <_strtod_l+0x60c>
 8005cae:	07e2      	lsls	r2, r4, #31
 8005cb0:	d504      	bpl.n	8005cbc <_strtod_l+0x52c>
 8005cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb6:	f7fa fc0f 	bl	80004d8 <__aeabi_dmul>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	1064      	asrs	r4, r4, #1
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	e7d0      	b.n	8005c66 <_strtod_l+0x4d6>
 8005cc4:	d0f0      	beq.n	8005ca8 <_strtod_l+0x518>
 8005cc6:	4264      	negs	r4, r4
 8005cc8:	f014 020f 	ands.w	r2, r4, #15
 8005ccc:	d00a      	beq.n	8005ce4 <_strtod_l+0x554>
 8005cce:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <_strtod_l+0x58c>)
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fd26 	bl	800072c <__aeabi_ddiv>
 8005ce0:	4682      	mov	sl, r0
 8005ce2:	468b      	mov	fp, r1
 8005ce4:	1124      	asrs	r4, r4, #4
 8005ce6:	d0df      	beq.n	8005ca8 <_strtod_l+0x518>
 8005ce8:	2c1f      	cmp	r4, #31
 8005cea:	dd1f      	ble.n	8005d2c <_strtod_l+0x59c>
 8005cec:	2400      	movs	r4, #0
 8005cee:	46a0      	mov	r8, r4
 8005cf0:	46a1      	mov	r9, r4
 8005cf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005cf4:	2322      	movs	r3, #34	@ 0x22
 8005cf6:	9a05      	ldr	r2, [sp, #20]
 8005cf8:	f04f 0a00 	mov.w	sl, #0
 8005cfc:	f04f 0b00 	mov.w	fp, #0
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e76b      	b.n	8005bdc <_strtod_l+0x44c>
 8005d04:	0800838f 	.word	0x0800838f
 8005d08:	08008658 	.word	0x08008658
 8005d0c:	08008387 	.word	0x08008387
 8005d10:	080083be 	.word	0x080083be
 8005d14:	7ff00000 	.word	0x7ff00000
 8005d18:	080084f7 	.word	0x080084f7
 8005d1c:	08008590 	.word	0x08008590
 8005d20:	08008568 	.word	0x08008568
 8005d24:	7ca00000 	.word	0x7ca00000
 8005d28:	7fefffff 	.word	0x7fefffff
 8005d2c:	f014 0310 	ands.w	r3, r4, #16
 8005d30:	bf18      	it	ne
 8005d32:	236a      	movne	r3, #106	@ 0x6a
 8005d34:	4650      	mov	r0, sl
 8005d36:	9308      	str	r3, [sp, #32]
 8005d38:	4659      	mov	r1, fp
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	4e77      	ldr	r6, [pc, #476]	@ (8005f1c <_strtod_l+0x78c>)
 8005d3e:	07e7      	lsls	r7, r4, #31
 8005d40:	d504      	bpl.n	8005d4c <_strtod_l+0x5bc>
 8005d42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d46:	f7fa fbc7 	bl	80004d8 <__aeabi_dmul>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	1064      	asrs	r4, r4, #1
 8005d4e:	f106 0608 	add.w	r6, r6, #8
 8005d52:	d1f4      	bne.n	8005d3e <_strtod_l+0x5ae>
 8005d54:	b10b      	cbz	r3, 8005d5a <_strtod_l+0x5ca>
 8005d56:	4682      	mov	sl, r0
 8005d58:	468b      	mov	fp, r1
 8005d5a:	9b08      	ldr	r3, [sp, #32]
 8005d5c:	b1b3      	cbz	r3, 8005d8c <_strtod_l+0x5fc>
 8005d5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	4659      	mov	r1, fp
 8005d6a:	dd0f      	ble.n	8005d8c <_strtod_l+0x5fc>
 8005d6c:	2b1f      	cmp	r3, #31
 8005d6e:	dd58      	ble.n	8005e22 <_strtod_l+0x692>
 8005d70:	2b34      	cmp	r3, #52	@ 0x34
 8005d72:	bfd8      	it	le
 8005d74:	f04f 33ff 	movle.w	r3, #4294967295
 8005d78:	f04f 0a00 	mov.w	sl, #0
 8005d7c:	bfcf      	iteee	gt
 8005d7e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005d82:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005d86:	4093      	lslle	r3, r2
 8005d88:	ea03 0b01 	andle.w	fp, r3, r1
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4650      	mov	r0, sl
 8005d92:	4659      	mov	r1, fp
 8005d94:	f7fa fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d1a7      	bne.n	8005cec <_strtod_l+0x55c>
 8005d9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d9e:	464a      	mov	r2, r9
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005da4:	462b      	mov	r3, r5
 8005da6:	9805      	ldr	r0, [sp, #20]
 8005da8:	f7ff f8d8 	bl	8004f5c <__s2b>
 8005dac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005dae:	2800      	cmp	r0, #0
 8005db0:	f43f af09 	beq.w	8005bc6 <_strtod_l+0x436>
 8005db4:	2400      	movs	r4, #0
 8005db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	eba3 0308 	sub.w	r3, r3, r8
 8005dc0:	bfa8      	it	ge
 8005dc2:	2300      	movge	r3, #0
 8005dc4:	46a0      	mov	r8, r4
 8005dc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005dc8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005dcc:	9316      	str	r3, [sp, #88]	@ 0x58
 8005dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dd0:	9805      	ldr	r0, [sp, #20]
 8005dd2:	6859      	ldr	r1, [r3, #4]
 8005dd4:	f7ff f81a 	bl	8004e0c <_Balloc>
 8005dd8:	4681      	mov	r9, r0
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f43f aef7 	beq.w	8005bce <_strtod_l+0x43e>
 8005de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005de2:	300c      	adds	r0, #12
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	f103 010c 	add.w	r1, r3, #12
 8005dea:	3202      	adds	r2, #2
 8005dec:	0092      	lsls	r2, r2, #2
 8005dee:	f000 fd65 	bl	80068bc <memcpy>
 8005df2:	ab1c      	add	r3, sp, #112	@ 0x70
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4652      	mov	r2, sl
 8005dfc:	465b      	mov	r3, fp
 8005dfe:	9805      	ldr	r0, [sp, #20]
 8005e00:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005e04:	f7ff fbd6 	bl	80055b4 <__d2b>
 8005e08:	901a      	str	r0, [sp, #104]	@ 0x68
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	f43f aedf 	beq.w	8005bce <_strtod_l+0x43e>
 8005e10:	2101      	movs	r1, #1
 8005e12:	9805      	ldr	r0, [sp, #20]
 8005e14:	f7ff f938 	bl	8005088 <__i2b>
 8005e18:	4680      	mov	r8, r0
 8005e1a:	b948      	cbnz	r0, 8005e30 <_strtod_l+0x6a0>
 8005e1c:	f04f 0800 	mov.w	r8, #0
 8005e20:	e6d5      	b.n	8005bce <_strtod_l+0x43e>
 8005e22:	f04f 32ff 	mov.w	r2, #4294967295
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	ea03 0a0a 	and.w	sl, r3, sl
 8005e2e:	e7ad      	b.n	8005d8c <_strtod_l+0x5fc>
 8005e30:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005e32:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	bfab      	itete	ge
 8005e38:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005e3a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005e3c:	18ef      	addge	r7, r5, r3
 8005e3e:	1b5e      	sublt	r6, r3, r5
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	bfa8      	it	ge
 8005e44:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005e46:	eba5 0503 	sub.w	r5, r5, r3
 8005e4a:	4415      	add	r5, r2
 8005e4c:	4b34      	ldr	r3, [pc, #208]	@ (8005f20 <_strtod_l+0x790>)
 8005e4e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005e52:	bfb8      	it	lt
 8005e54:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005e56:	429d      	cmp	r5, r3
 8005e58:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005e5c:	da50      	bge.n	8005f00 <_strtod_l+0x770>
 8005e5e:	1b5b      	subs	r3, r3, r5
 8005e60:	2b1f      	cmp	r3, #31
 8005e62:	f04f 0101 	mov.w	r1, #1
 8005e66:	eba2 0203 	sub.w	r2, r2, r3
 8005e6a:	dc3d      	bgt.n	8005ee8 <_strtod_l+0x758>
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e72:	2300      	movs	r3, #0
 8005e74:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e76:	18bd      	adds	r5, r7, r2
 8005e78:	9b08      	ldr	r3, [sp, #32]
 8005e7a:	42af      	cmp	r7, r5
 8005e7c:	4416      	add	r6, r2
 8005e7e:	441e      	add	r6, r3
 8005e80:	463b      	mov	r3, r7
 8005e82:	bfa8      	it	ge
 8005e84:	462b      	movge	r3, r5
 8005e86:	42b3      	cmp	r3, r6
 8005e88:	bfa8      	it	ge
 8005e8a:	4633      	movge	r3, r6
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfc2      	ittt	gt
 8005e90:	1aed      	subgt	r5, r5, r3
 8005e92:	1af6      	subgt	r6, r6, r3
 8005e94:	1aff      	subgt	r7, r7, r3
 8005e96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dd16      	ble.n	8005eca <_strtod_l+0x73a>
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	9805      	ldr	r0, [sp, #20]
 8005ea2:	f7ff f9a9 	bl	80051f8 <__pow5mult>
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d0b7      	beq.n	8005e1c <_strtod_l+0x68c>
 8005eac:	4601      	mov	r1, r0
 8005eae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005eb0:	9805      	ldr	r0, [sp, #20]
 8005eb2:	f7ff f8ff 	bl	80050b4 <__multiply>
 8005eb6:	900a      	str	r0, [sp, #40]	@ 0x28
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	f43f ae88 	beq.w	8005bce <_strtod_l+0x43e>
 8005ebe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ec0:	9805      	ldr	r0, [sp, #20]
 8005ec2:	f7fe ffe3 	bl	8004e8c <_Bfree>
 8005ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	dc1d      	bgt.n	8005f0a <_strtod_l+0x77a>
 8005ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dd27      	ble.n	8005f24 <_strtod_l+0x794>
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005ed8:	9805      	ldr	r0, [sp, #20]
 8005eda:	f7ff f98d 	bl	80051f8 <__pow5mult>
 8005ede:	4681      	mov	r9, r0
 8005ee0:	bb00      	cbnz	r0, 8005f24 <_strtod_l+0x794>
 8005ee2:	f04f 0900 	mov.w	r9, #0
 8005ee6:	e672      	b.n	8005bce <_strtod_l+0x43e>
 8005ee8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005eec:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005ef0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005ef4:	35e2      	adds	r5, #226	@ 0xe2
 8005ef6:	fa01 f305 	lsl.w	r3, r1, r5
 8005efa:	9310      	str	r3, [sp, #64]	@ 0x40
 8005efc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005efe:	e7ba      	b.n	8005e76 <_strtod_l+0x6e6>
 8005f00:	2300      	movs	r3, #0
 8005f02:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f04:	2301      	movs	r3, #1
 8005f06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f08:	e7b5      	b.n	8005e76 <_strtod_l+0x6e6>
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f0e:	9805      	ldr	r0, [sp, #20]
 8005f10:	f7ff f9cc 	bl	80052ac <__lshift>
 8005f14:	901a      	str	r0, [sp, #104]	@ 0x68
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d1d9      	bne.n	8005ece <_strtod_l+0x73e>
 8005f1a:	e658      	b.n	8005bce <_strtod_l+0x43e>
 8005f1c:	08008680 	.word	0x08008680
 8005f20:	fffffc02 	.word	0xfffffc02
 8005f24:	2e00      	cmp	r6, #0
 8005f26:	dd07      	ble.n	8005f38 <_strtod_l+0x7a8>
 8005f28:	4649      	mov	r1, r9
 8005f2a:	4632      	mov	r2, r6
 8005f2c:	9805      	ldr	r0, [sp, #20]
 8005f2e:	f7ff f9bd 	bl	80052ac <__lshift>
 8005f32:	4681      	mov	r9, r0
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0d4      	beq.n	8005ee2 <_strtod_l+0x752>
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	dd08      	ble.n	8005f4e <_strtod_l+0x7be>
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	463a      	mov	r2, r7
 8005f40:	9805      	ldr	r0, [sp, #20]
 8005f42:	f7ff f9b3 	bl	80052ac <__lshift>
 8005f46:	4680      	mov	r8, r0
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f43f ae40 	beq.w	8005bce <_strtod_l+0x43e>
 8005f4e:	464a      	mov	r2, r9
 8005f50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f52:	9805      	ldr	r0, [sp, #20]
 8005f54:	f7ff fa32 	bl	80053bc <__mdiff>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f43f ae37 	beq.w	8005bce <_strtod_l+0x43e>
 8005f60:	68c3      	ldr	r3, [r0, #12]
 8005f62:	4641      	mov	r1, r8
 8005f64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f66:	2300      	movs	r3, #0
 8005f68:	60c3      	str	r3, [r0, #12]
 8005f6a:	f7ff fa0b 	bl	8005384 <__mcmp>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	da3d      	bge.n	8005fee <_strtod_l+0x85e>
 8005f72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f74:	ea53 030a 	orrs.w	r3, r3, sl
 8005f78:	d163      	bne.n	8006042 <_strtod_l+0x8b2>
 8005f7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d15f      	bne.n	8006042 <_strtod_l+0x8b2>
 8005f82:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f86:	0d1b      	lsrs	r3, r3, #20
 8005f88:	051b      	lsls	r3, r3, #20
 8005f8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f8e:	d958      	bls.n	8006042 <_strtod_l+0x8b2>
 8005f90:	6963      	ldr	r3, [r4, #20]
 8005f92:	b913      	cbnz	r3, 8005f9a <_strtod_l+0x80a>
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	dd53      	ble.n	8006042 <_strtod_l+0x8b2>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	9805      	ldr	r0, [sp, #20]
 8005fa0:	f7ff f984 	bl	80052ac <__lshift>
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	f7ff f9ec 	bl	8005384 <__mcmp>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	dd48      	ble.n	8006042 <_strtod_l+0x8b2>
 8005fb0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fb4:	9a08      	ldr	r2, [sp, #32]
 8005fb6:	0d1b      	lsrs	r3, r3, #20
 8005fb8:	051b      	lsls	r3, r3, #20
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	d062      	beq.n	8006084 <_strtod_l+0x8f4>
 8005fbe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005fc2:	d85f      	bhi.n	8006084 <_strtod_l+0x8f4>
 8005fc4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005fc8:	f67f ae94 	bls.w	8005cf4 <_strtod_l+0x564>
 8005fcc:	4650      	mov	r0, sl
 8005fce:	4659      	mov	r1, fp
 8005fd0:	4ba3      	ldr	r3, [pc, #652]	@ (8006260 <_strtod_l+0xad0>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f7fa fa80 	bl	80004d8 <__aeabi_dmul>
 8005fd8:	4ba2      	ldr	r3, [pc, #648]	@ (8006264 <_strtod_l+0xad4>)
 8005fda:	4682      	mov	sl, r0
 8005fdc:	400b      	ands	r3, r1
 8005fde:	468b      	mov	fp, r1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f47f adff 	bne.w	8005be4 <_strtod_l+0x454>
 8005fe6:	2322      	movs	r3, #34	@ 0x22
 8005fe8:	9a05      	ldr	r2, [sp, #20]
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e5fa      	b.n	8005be4 <_strtod_l+0x454>
 8005fee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005ff2:	d165      	bne.n	80060c0 <_strtod_l+0x930>
 8005ff4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005ff6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ffa:	b35a      	cbz	r2, 8006054 <_strtod_l+0x8c4>
 8005ffc:	4a9a      	ldr	r2, [pc, #616]	@ (8006268 <_strtod_l+0xad8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d12b      	bne.n	800605a <_strtod_l+0x8ca>
 8006002:	9b08      	ldr	r3, [sp, #32]
 8006004:	4651      	mov	r1, sl
 8006006:	b303      	cbz	r3, 800604a <_strtod_l+0x8ba>
 8006008:	465a      	mov	r2, fp
 800600a:	4b96      	ldr	r3, [pc, #600]	@ (8006264 <_strtod_l+0xad4>)
 800600c:	4013      	ands	r3, r2
 800600e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006012:	f04f 32ff 	mov.w	r2, #4294967295
 8006016:	d81b      	bhi.n	8006050 <_strtod_l+0x8c0>
 8006018:	0d1b      	lsrs	r3, r3, #20
 800601a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	4299      	cmp	r1, r3
 8006024:	d119      	bne.n	800605a <_strtod_l+0x8ca>
 8006026:	4b91      	ldr	r3, [pc, #580]	@ (800626c <_strtod_l+0xadc>)
 8006028:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800602a:	429a      	cmp	r2, r3
 800602c:	d102      	bne.n	8006034 <_strtod_l+0x8a4>
 800602e:	3101      	adds	r1, #1
 8006030:	f43f adcd 	beq.w	8005bce <_strtod_l+0x43e>
 8006034:	f04f 0a00 	mov.w	sl, #0
 8006038:	4b8a      	ldr	r3, [pc, #552]	@ (8006264 <_strtod_l+0xad4>)
 800603a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800603c:	401a      	ands	r2, r3
 800603e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006042:	9b08      	ldr	r3, [sp, #32]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1c1      	bne.n	8005fcc <_strtod_l+0x83c>
 8006048:	e5cc      	b.n	8005be4 <_strtod_l+0x454>
 800604a:	f04f 33ff 	mov.w	r3, #4294967295
 800604e:	e7e8      	b.n	8006022 <_strtod_l+0x892>
 8006050:	4613      	mov	r3, r2
 8006052:	e7e6      	b.n	8006022 <_strtod_l+0x892>
 8006054:	ea53 030a 	orrs.w	r3, r3, sl
 8006058:	d0aa      	beq.n	8005fb0 <_strtod_l+0x820>
 800605a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800605c:	b1db      	cbz	r3, 8006096 <_strtod_l+0x906>
 800605e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006060:	4213      	tst	r3, r2
 8006062:	d0ee      	beq.n	8006042 <_strtod_l+0x8b2>
 8006064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006066:	4650      	mov	r0, sl
 8006068:	4659      	mov	r1, fp
 800606a:	9a08      	ldr	r2, [sp, #32]
 800606c:	b1bb      	cbz	r3, 800609e <_strtod_l+0x90e>
 800606e:	f7ff fb6d 	bl	800574c <sulp>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800607a:	f7fa f877 	bl	800016c <__adddf3>
 800607e:	4682      	mov	sl, r0
 8006080:	468b      	mov	fp, r1
 8006082:	e7de      	b.n	8006042 <_strtod_l+0x8b2>
 8006084:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006088:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800608c:	f04f 3aff 	mov.w	sl, #4294967295
 8006090:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006094:	e7d5      	b.n	8006042 <_strtod_l+0x8b2>
 8006096:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006098:	ea13 0f0a 	tst.w	r3, sl
 800609c:	e7e1      	b.n	8006062 <_strtod_l+0x8d2>
 800609e:	f7ff fb55 	bl	800574c <sulp>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060aa:	f7fa f85d 	bl	8000168 <__aeabi_dsub>
 80060ae:	2200      	movs	r2, #0
 80060b0:	2300      	movs	r3, #0
 80060b2:	4682      	mov	sl, r0
 80060b4:	468b      	mov	fp, r1
 80060b6:	f7fa fc77 	bl	80009a8 <__aeabi_dcmpeq>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0c1      	beq.n	8006042 <_strtod_l+0x8b2>
 80060be:	e619      	b.n	8005cf4 <_strtod_l+0x564>
 80060c0:	4641      	mov	r1, r8
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff face 	bl	8005664 <__ratio>
 80060c8:	2200      	movs	r2, #0
 80060ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80060ce:	4606      	mov	r6, r0
 80060d0:	460f      	mov	r7, r1
 80060d2:	f7fa fc7d 	bl	80009d0 <__aeabi_dcmple>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d06d      	beq.n	80061b6 <_strtod_l+0xa26>
 80060da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d178      	bne.n	80061d2 <_strtod_l+0xa42>
 80060e0:	f1ba 0f00 	cmp.w	sl, #0
 80060e4:	d156      	bne.n	8006194 <_strtod_l+0xa04>
 80060e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d158      	bne.n	80061a2 <_strtod_l+0xa12>
 80060f0:	2200      	movs	r2, #0
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	4b5e      	ldr	r3, [pc, #376]	@ (8006270 <_strtod_l+0xae0>)
 80060f8:	f7fa fc60 	bl	80009bc <__aeabi_dcmplt>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d157      	bne.n	80061b0 <_strtod_l+0xa20>
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	2200      	movs	r2, #0
 8006106:	4b5b      	ldr	r3, [pc, #364]	@ (8006274 <_strtod_l+0xae4>)
 8006108:	f7fa f9e6 	bl	80004d8 <__aeabi_dmul>
 800610c:	4606      	mov	r6, r0
 800610e:	460f      	mov	r7, r1
 8006110:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006114:	9606      	str	r6, [sp, #24]
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800611c:	4d51      	ldr	r5, [pc, #324]	@ (8006264 <_strtod_l+0xad4>)
 800611e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006124:	401d      	ands	r5, r3
 8006126:	4b54      	ldr	r3, [pc, #336]	@ (8006278 <_strtod_l+0xae8>)
 8006128:	429d      	cmp	r5, r3
 800612a:	f040 80ab 	bne.w	8006284 <_strtod_l+0xaf4>
 800612e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006130:	4650      	mov	r0, sl
 8006132:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006136:	4659      	mov	r1, fp
 8006138:	f7ff f9d4 	bl	80054e4 <__ulp>
 800613c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006140:	f7fa f9ca 	bl	80004d8 <__aeabi_dmul>
 8006144:	4652      	mov	r2, sl
 8006146:	465b      	mov	r3, fp
 8006148:	f7fa f810 	bl	800016c <__adddf3>
 800614c:	460b      	mov	r3, r1
 800614e:	4945      	ldr	r1, [pc, #276]	@ (8006264 <_strtod_l+0xad4>)
 8006150:	4a4a      	ldr	r2, [pc, #296]	@ (800627c <_strtod_l+0xaec>)
 8006152:	4019      	ands	r1, r3
 8006154:	4291      	cmp	r1, r2
 8006156:	4682      	mov	sl, r0
 8006158:	d942      	bls.n	80061e0 <_strtod_l+0xa50>
 800615a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800615c:	4b43      	ldr	r3, [pc, #268]	@ (800626c <_strtod_l+0xadc>)
 800615e:	429a      	cmp	r2, r3
 8006160:	d103      	bne.n	800616a <_strtod_l+0x9da>
 8006162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006164:	3301      	adds	r3, #1
 8006166:	f43f ad32 	beq.w	8005bce <_strtod_l+0x43e>
 800616a:	f04f 3aff 	mov.w	sl, #4294967295
 800616e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800626c <_strtod_l+0xadc>
 8006172:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006174:	9805      	ldr	r0, [sp, #20]
 8006176:	f7fe fe89 	bl	8004e8c <_Bfree>
 800617a:	4649      	mov	r1, r9
 800617c:	9805      	ldr	r0, [sp, #20]
 800617e:	f7fe fe85 	bl	8004e8c <_Bfree>
 8006182:	4641      	mov	r1, r8
 8006184:	9805      	ldr	r0, [sp, #20]
 8006186:	f7fe fe81 	bl	8004e8c <_Bfree>
 800618a:	4621      	mov	r1, r4
 800618c:	9805      	ldr	r0, [sp, #20]
 800618e:	f7fe fe7d 	bl	8004e8c <_Bfree>
 8006192:	e61c      	b.n	8005dce <_strtod_l+0x63e>
 8006194:	f1ba 0f01 	cmp.w	sl, #1
 8006198:	d103      	bne.n	80061a2 <_strtod_l+0xa12>
 800619a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800619c:	2b00      	cmp	r3, #0
 800619e:	f43f ada9 	beq.w	8005cf4 <_strtod_l+0x564>
 80061a2:	2200      	movs	r2, #0
 80061a4:	4b36      	ldr	r3, [pc, #216]	@ (8006280 <_strtod_l+0xaf0>)
 80061a6:	2600      	movs	r6, #0
 80061a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061ac:	4f30      	ldr	r7, [pc, #192]	@ (8006270 <_strtod_l+0xae0>)
 80061ae:	e7b3      	b.n	8006118 <_strtod_l+0x988>
 80061b0:	2600      	movs	r6, #0
 80061b2:	4f30      	ldr	r7, [pc, #192]	@ (8006274 <_strtod_l+0xae4>)
 80061b4:	e7ac      	b.n	8006110 <_strtod_l+0x980>
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	4b2e      	ldr	r3, [pc, #184]	@ (8006274 <_strtod_l+0xae4>)
 80061bc:	2200      	movs	r2, #0
 80061be:	f7fa f98b 	bl	80004d8 <__aeabi_dmul>
 80061c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061c4:	4606      	mov	r6, r0
 80061c6:	460f      	mov	r7, r1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0a1      	beq.n	8006110 <_strtod_l+0x980>
 80061cc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80061d0:	e7a2      	b.n	8006118 <_strtod_l+0x988>
 80061d2:	2200      	movs	r2, #0
 80061d4:	4b26      	ldr	r3, [pc, #152]	@ (8006270 <_strtod_l+0xae0>)
 80061d6:	4616      	mov	r6, r2
 80061d8:	461f      	mov	r7, r3
 80061da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061de:	e79b      	b.n	8006118 <_strtod_l+0x988>
 80061e0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80061e4:	9b08      	ldr	r3, [sp, #32]
 80061e6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1c1      	bne.n	8006172 <_strtod_l+0x9e2>
 80061ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061f2:	0d1b      	lsrs	r3, r3, #20
 80061f4:	051b      	lsls	r3, r3, #20
 80061f6:	429d      	cmp	r5, r3
 80061f8:	d1bb      	bne.n	8006172 <_strtod_l+0x9e2>
 80061fa:	4630      	mov	r0, r6
 80061fc:	4639      	mov	r1, r7
 80061fe:	f7fa fcb3 	bl	8000b68 <__aeabi_d2lz>
 8006202:	f7fa f93b 	bl	800047c <__aeabi_l2d>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4630      	mov	r0, r6
 800620c:	4639      	mov	r1, r7
 800620e:	f7f9 ffab 	bl	8000168 <__aeabi_dsub>
 8006212:	460b      	mov	r3, r1
 8006214:	4602      	mov	r2, r0
 8006216:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800621a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800621e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006220:	ea46 060a 	orr.w	r6, r6, sl
 8006224:	431e      	orrs	r6, r3
 8006226:	d06a      	beq.n	80062fe <_strtod_l+0xb6e>
 8006228:	a309      	add	r3, pc, #36	@ (adr r3, 8006250 <_strtod_l+0xac0>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa fbc5 	bl	80009bc <__aeabi_dcmplt>
 8006232:	2800      	cmp	r0, #0
 8006234:	f47f acd6 	bne.w	8005be4 <_strtod_l+0x454>
 8006238:	a307      	add	r3, pc, #28	@ (adr r3, 8006258 <_strtod_l+0xac8>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006242:	f7fa fbd9 	bl	80009f8 <__aeabi_dcmpgt>
 8006246:	2800      	cmp	r0, #0
 8006248:	d093      	beq.n	8006172 <_strtod_l+0x9e2>
 800624a:	e4cb      	b.n	8005be4 <_strtod_l+0x454>
 800624c:	f3af 8000 	nop.w
 8006250:	94a03595 	.word	0x94a03595
 8006254:	3fdfffff 	.word	0x3fdfffff
 8006258:	35afe535 	.word	0x35afe535
 800625c:	3fe00000 	.word	0x3fe00000
 8006260:	39500000 	.word	0x39500000
 8006264:	7ff00000 	.word	0x7ff00000
 8006268:	000fffff 	.word	0x000fffff
 800626c:	7fefffff 	.word	0x7fefffff
 8006270:	3ff00000 	.word	0x3ff00000
 8006274:	3fe00000 	.word	0x3fe00000
 8006278:	7fe00000 	.word	0x7fe00000
 800627c:	7c9fffff 	.word	0x7c9fffff
 8006280:	bff00000 	.word	0xbff00000
 8006284:	9b08      	ldr	r3, [sp, #32]
 8006286:	b323      	cbz	r3, 80062d2 <_strtod_l+0xb42>
 8006288:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800628c:	d821      	bhi.n	80062d2 <_strtod_l+0xb42>
 800628e:	a328      	add	r3, pc, #160	@ (adr r3, 8006330 <_strtod_l+0xba0>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7fa fb9a 	bl	80009d0 <__aeabi_dcmple>
 800629c:	b1a0      	cbz	r0, 80062c8 <_strtod_l+0xb38>
 800629e:	4639      	mov	r1, r7
 80062a0:	4630      	mov	r0, r6
 80062a2:	f7fa fbf1 	bl	8000a88 <__aeabi_d2uiz>
 80062a6:	2801      	cmp	r0, #1
 80062a8:	bf38      	it	cc
 80062aa:	2001      	movcc	r0, #1
 80062ac:	f7fa f89a 	bl	80003e4 <__aeabi_ui2d>
 80062b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062b2:	4606      	mov	r6, r0
 80062b4:	460f      	mov	r7, r1
 80062b6:	b9fb      	cbnz	r3, 80062f8 <_strtod_l+0xb68>
 80062b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80062be:	9315      	str	r3, [sp, #84]	@ 0x54
 80062c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80062c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80062c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80062ce:	1b5b      	subs	r3, r3, r5
 80062d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80062d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80062da:	f7ff f903 	bl	80054e4 <__ulp>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4650      	mov	r0, sl
 80062e4:	4659      	mov	r1, fp
 80062e6:	f7fa f8f7 	bl	80004d8 <__aeabi_dmul>
 80062ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062ee:	f7f9 ff3d 	bl	800016c <__adddf3>
 80062f2:	4682      	mov	sl, r0
 80062f4:	468b      	mov	fp, r1
 80062f6:	e775      	b.n	80061e4 <_strtod_l+0xa54>
 80062f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80062fc:	e7e0      	b.n	80062c0 <_strtod_l+0xb30>
 80062fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8006338 <_strtod_l+0xba8>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7fa fb5a 	bl	80009bc <__aeabi_dcmplt>
 8006308:	e79d      	b.n	8006246 <_strtod_l+0xab6>
 800630a:	2300      	movs	r3, #0
 800630c:	930e      	str	r3, [sp, #56]	@ 0x38
 800630e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006310:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	f7ff ba79 	b.w	800580a <_strtod_l+0x7a>
 8006318:	2a65      	cmp	r2, #101	@ 0x65
 800631a:	f43f ab72 	beq.w	8005a02 <_strtod_l+0x272>
 800631e:	2a45      	cmp	r2, #69	@ 0x45
 8006320:	f43f ab6f 	beq.w	8005a02 <_strtod_l+0x272>
 8006324:	2301      	movs	r3, #1
 8006326:	f7ff bbaa 	b.w	8005a7e <_strtod_l+0x2ee>
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w
 8006330:	ffc00000 	.word	0xffc00000
 8006334:	41dfffff 	.word	0x41dfffff
 8006338:	94a03595 	.word	0x94a03595
 800633c:	3fcfffff 	.word	0x3fcfffff

08006340 <_strtod_r>:
 8006340:	4b01      	ldr	r3, [pc, #4]	@ (8006348 <_strtod_r+0x8>)
 8006342:	f7ff ba25 	b.w	8005790 <_strtod_l>
 8006346:	bf00      	nop
 8006348:	20000070 	.word	0x20000070

0800634c <_strtol_l.isra.0>:
 800634c:	2b24      	cmp	r3, #36	@ 0x24
 800634e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006352:	4686      	mov	lr, r0
 8006354:	4690      	mov	r8, r2
 8006356:	d801      	bhi.n	800635c <_strtol_l.isra.0+0x10>
 8006358:	2b01      	cmp	r3, #1
 800635a:	d106      	bne.n	800636a <_strtol_l.isra.0+0x1e>
 800635c:	f7fd fdbc 	bl	8003ed8 <__errno>
 8006360:	2316      	movs	r3, #22
 8006362:	6003      	str	r3, [r0, #0]
 8006364:	2000      	movs	r0, #0
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	460d      	mov	r5, r1
 800636c:	4833      	ldr	r0, [pc, #204]	@ (800643c <_strtol_l.isra.0+0xf0>)
 800636e:	462a      	mov	r2, r5
 8006370:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006374:	5d06      	ldrb	r6, [r0, r4]
 8006376:	f016 0608 	ands.w	r6, r6, #8
 800637a:	d1f8      	bne.n	800636e <_strtol_l.isra.0+0x22>
 800637c:	2c2d      	cmp	r4, #45	@ 0x2d
 800637e:	d110      	bne.n	80063a2 <_strtol_l.isra.0+0x56>
 8006380:	2601      	movs	r6, #1
 8006382:	782c      	ldrb	r4, [r5, #0]
 8006384:	1c95      	adds	r5, r2, #2
 8006386:	f033 0210 	bics.w	r2, r3, #16
 800638a:	d115      	bne.n	80063b8 <_strtol_l.isra.0+0x6c>
 800638c:	2c30      	cmp	r4, #48	@ 0x30
 800638e:	d10d      	bne.n	80063ac <_strtol_l.isra.0+0x60>
 8006390:	782a      	ldrb	r2, [r5, #0]
 8006392:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006396:	2a58      	cmp	r2, #88	@ 0x58
 8006398:	d108      	bne.n	80063ac <_strtol_l.isra.0+0x60>
 800639a:	786c      	ldrb	r4, [r5, #1]
 800639c:	3502      	adds	r5, #2
 800639e:	2310      	movs	r3, #16
 80063a0:	e00a      	b.n	80063b8 <_strtol_l.isra.0+0x6c>
 80063a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80063a4:	bf04      	itt	eq
 80063a6:	782c      	ldrbeq	r4, [r5, #0]
 80063a8:	1c95      	addeq	r5, r2, #2
 80063aa:	e7ec      	b.n	8006386 <_strtol_l.isra.0+0x3a>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f6      	bne.n	800639e <_strtol_l.isra.0+0x52>
 80063b0:	2c30      	cmp	r4, #48	@ 0x30
 80063b2:	bf14      	ite	ne
 80063b4:	230a      	movne	r3, #10
 80063b6:	2308      	moveq	r3, #8
 80063b8:	2200      	movs	r2, #0
 80063ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80063be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80063c2:	fbbc f9f3 	udiv	r9, ip, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80063cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80063d0:	2f09      	cmp	r7, #9
 80063d2:	d80f      	bhi.n	80063f4 <_strtol_l.isra.0+0xa8>
 80063d4:	463c      	mov	r4, r7
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	dd1b      	ble.n	8006412 <_strtol_l.isra.0+0xc6>
 80063da:	1c57      	adds	r7, r2, #1
 80063dc:	d007      	beq.n	80063ee <_strtol_l.isra.0+0xa2>
 80063de:	4581      	cmp	r9, r0
 80063e0:	d314      	bcc.n	800640c <_strtol_l.isra.0+0xc0>
 80063e2:	d101      	bne.n	80063e8 <_strtol_l.isra.0+0x9c>
 80063e4:	45a2      	cmp	sl, r4
 80063e6:	db11      	blt.n	800640c <_strtol_l.isra.0+0xc0>
 80063e8:	2201      	movs	r2, #1
 80063ea:	fb00 4003 	mla	r0, r0, r3, r4
 80063ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063f2:	e7eb      	b.n	80063cc <_strtol_l.isra.0+0x80>
 80063f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80063f8:	2f19      	cmp	r7, #25
 80063fa:	d801      	bhi.n	8006400 <_strtol_l.isra.0+0xb4>
 80063fc:	3c37      	subs	r4, #55	@ 0x37
 80063fe:	e7ea      	b.n	80063d6 <_strtol_l.isra.0+0x8a>
 8006400:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006404:	2f19      	cmp	r7, #25
 8006406:	d804      	bhi.n	8006412 <_strtol_l.isra.0+0xc6>
 8006408:	3c57      	subs	r4, #87	@ 0x57
 800640a:	e7e4      	b.n	80063d6 <_strtol_l.isra.0+0x8a>
 800640c:	f04f 32ff 	mov.w	r2, #4294967295
 8006410:	e7ed      	b.n	80063ee <_strtol_l.isra.0+0xa2>
 8006412:	1c53      	adds	r3, r2, #1
 8006414:	d108      	bne.n	8006428 <_strtol_l.isra.0+0xdc>
 8006416:	2322      	movs	r3, #34	@ 0x22
 8006418:	4660      	mov	r0, ip
 800641a:	f8ce 3000 	str.w	r3, [lr]
 800641e:	f1b8 0f00 	cmp.w	r8, #0
 8006422:	d0a0      	beq.n	8006366 <_strtol_l.isra.0+0x1a>
 8006424:	1e69      	subs	r1, r5, #1
 8006426:	e006      	b.n	8006436 <_strtol_l.isra.0+0xea>
 8006428:	b106      	cbz	r6, 800642c <_strtol_l.isra.0+0xe0>
 800642a:	4240      	negs	r0, r0
 800642c:	f1b8 0f00 	cmp.w	r8, #0
 8006430:	d099      	beq.n	8006366 <_strtol_l.isra.0+0x1a>
 8006432:	2a00      	cmp	r2, #0
 8006434:	d1f6      	bne.n	8006424 <_strtol_l.isra.0+0xd8>
 8006436:	f8c8 1000 	str.w	r1, [r8]
 800643a:	e794      	b.n	8006366 <_strtol_l.isra.0+0x1a>
 800643c:	080086a9 	.word	0x080086a9

08006440 <_strtol_r>:
 8006440:	f7ff bf84 	b.w	800634c <_strtol_l.isra.0>

08006444 <__ssputs_r>:
 8006444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	461f      	mov	r7, r3
 800644a:	688e      	ldr	r6, [r1, #8]
 800644c:	4682      	mov	sl, r0
 800644e:	42be      	cmp	r6, r7
 8006450:	460c      	mov	r4, r1
 8006452:	4690      	mov	r8, r2
 8006454:	680b      	ldr	r3, [r1, #0]
 8006456:	d82d      	bhi.n	80064b4 <__ssputs_r+0x70>
 8006458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800645c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006460:	d026      	beq.n	80064b0 <__ssputs_r+0x6c>
 8006462:	6965      	ldr	r5, [r4, #20]
 8006464:	6909      	ldr	r1, [r1, #16]
 8006466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800646a:	eba3 0901 	sub.w	r9, r3, r1
 800646e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006472:	1c7b      	adds	r3, r7, #1
 8006474:	444b      	add	r3, r9
 8006476:	106d      	asrs	r5, r5, #1
 8006478:	429d      	cmp	r5, r3
 800647a:	bf38      	it	cc
 800647c:	461d      	movcc	r5, r3
 800647e:	0553      	lsls	r3, r2, #21
 8006480:	d527      	bpl.n	80064d2 <__ssputs_r+0x8e>
 8006482:	4629      	mov	r1, r5
 8006484:	f7fe fc36 	bl	8004cf4 <_malloc_r>
 8006488:	4606      	mov	r6, r0
 800648a:	b360      	cbz	r0, 80064e6 <__ssputs_r+0xa2>
 800648c:	464a      	mov	r2, r9
 800648e:	6921      	ldr	r1, [r4, #16]
 8006490:	f000 fa14 	bl	80068bc <memcpy>
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800649a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649e:	81a3      	strh	r3, [r4, #12]
 80064a0:	6126      	str	r6, [r4, #16]
 80064a2:	444e      	add	r6, r9
 80064a4:	6026      	str	r6, [r4, #0]
 80064a6:	463e      	mov	r6, r7
 80064a8:	6165      	str	r5, [r4, #20]
 80064aa:	eba5 0509 	sub.w	r5, r5, r9
 80064ae:	60a5      	str	r5, [r4, #8]
 80064b0:	42be      	cmp	r6, r7
 80064b2:	d900      	bls.n	80064b6 <__ssputs_r+0x72>
 80064b4:	463e      	mov	r6, r7
 80064b6:	4632      	mov	r2, r6
 80064b8:	4641      	mov	r1, r8
 80064ba:	6820      	ldr	r0, [r4, #0]
 80064bc:	f000 f9c2 	bl	8006844 <memmove>
 80064c0:	2000      	movs	r0, #0
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	1b9b      	subs	r3, r3, r6
 80064c6:	60a3      	str	r3, [r4, #8]
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	4433      	add	r3, r6
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	462a      	mov	r2, r5
 80064d4:	f000 fd83 	bl	8006fde <_realloc_r>
 80064d8:	4606      	mov	r6, r0
 80064da:	2800      	cmp	r0, #0
 80064dc:	d1e0      	bne.n	80064a0 <__ssputs_r+0x5c>
 80064de:	4650      	mov	r0, sl
 80064e0:	6921      	ldr	r1, [r4, #16]
 80064e2:	f7fe fb95 	bl	8004c10 <_free_r>
 80064e6:	230c      	movs	r3, #12
 80064e8:	f8ca 3000 	str.w	r3, [sl]
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f04f 30ff 	mov.w	r0, #4294967295
 80064f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	e7e9      	b.n	80064ce <__ssputs_r+0x8a>
	...

080064fc <_svfiprintf_r>:
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	4698      	mov	r8, r3
 8006502:	898b      	ldrh	r3, [r1, #12]
 8006504:	4607      	mov	r7, r0
 8006506:	061b      	lsls	r3, r3, #24
 8006508:	460d      	mov	r5, r1
 800650a:	4614      	mov	r4, r2
 800650c:	b09d      	sub	sp, #116	@ 0x74
 800650e:	d510      	bpl.n	8006532 <_svfiprintf_r+0x36>
 8006510:	690b      	ldr	r3, [r1, #16]
 8006512:	b973      	cbnz	r3, 8006532 <_svfiprintf_r+0x36>
 8006514:	2140      	movs	r1, #64	@ 0x40
 8006516:	f7fe fbed 	bl	8004cf4 <_malloc_r>
 800651a:	6028      	str	r0, [r5, #0]
 800651c:	6128      	str	r0, [r5, #16]
 800651e:	b930      	cbnz	r0, 800652e <_svfiprintf_r+0x32>
 8006520:	230c      	movs	r3, #12
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	b01d      	add	sp, #116	@ 0x74
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	2340      	movs	r3, #64	@ 0x40
 8006530:	616b      	str	r3, [r5, #20]
 8006532:	2300      	movs	r3, #0
 8006534:	9309      	str	r3, [sp, #36]	@ 0x24
 8006536:	2320      	movs	r3, #32
 8006538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800653c:	2330      	movs	r3, #48	@ 0x30
 800653e:	f04f 0901 	mov.w	r9, #1
 8006542:	f8cd 800c 	str.w	r8, [sp, #12]
 8006546:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80066e0 <_svfiprintf_r+0x1e4>
 800654a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800654e:	4623      	mov	r3, r4
 8006550:	469a      	mov	sl, r3
 8006552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006556:	b10a      	cbz	r2, 800655c <_svfiprintf_r+0x60>
 8006558:	2a25      	cmp	r2, #37	@ 0x25
 800655a:	d1f9      	bne.n	8006550 <_svfiprintf_r+0x54>
 800655c:	ebba 0b04 	subs.w	fp, sl, r4
 8006560:	d00b      	beq.n	800657a <_svfiprintf_r+0x7e>
 8006562:	465b      	mov	r3, fp
 8006564:	4622      	mov	r2, r4
 8006566:	4629      	mov	r1, r5
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ff6b 	bl	8006444 <__ssputs_r>
 800656e:	3001      	adds	r0, #1
 8006570:	f000 80a7 	beq.w	80066c2 <_svfiprintf_r+0x1c6>
 8006574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006576:	445a      	add	r2, fp
 8006578:	9209      	str	r2, [sp, #36]	@ 0x24
 800657a:	f89a 3000 	ldrb.w	r3, [sl]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 809f 	beq.w	80066c2 <_svfiprintf_r+0x1c6>
 8006584:	2300      	movs	r3, #0
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800658e:	f10a 0a01 	add.w	sl, sl, #1
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	9307      	str	r3, [sp, #28]
 8006596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800659a:	931a      	str	r3, [sp, #104]	@ 0x68
 800659c:	4654      	mov	r4, sl
 800659e:	2205      	movs	r2, #5
 80065a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a4:	484e      	ldr	r0, [pc, #312]	@ (80066e0 <_svfiprintf_r+0x1e4>)
 80065a6:	f7fd fcc4 	bl	8003f32 <memchr>
 80065aa:	9a04      	ldr	r2, [sp, #16]
 80065ac:	b9d8      	cbnz	r0, 80065e6 <_svfiprintf_r+0xea>
 80065ae:	06d0      	lsls	r0, r2, #27
 80065b0:	bf44      	itt	mi
 80065b2:	2320      	movmi	r3, #32
 80065b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065b8:	0711      	lsls	r1, r2, #28
 80065ba:	bf44      	itt	mi
 80065bc:	232b      	movmi	r3, #43	@ 0x2b
 80065be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065c2:	f89a 3000 	ldrb.w	r3, [sl]
 80065c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065c8:	d015      	beq.n	80065f6 <_svfiprintf_r+0xfa>
 80065ca:	4654      	mov	r4, sl
 80065cc:	2000      	movs	r0, #0
 80065ce:	f04f 0c0a 	mov.w	ip, #10
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	4621      	mov	r1, r4
 80065d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065da:	3b30      	subs	r3, #48	@ 0x30
 80065dc:	2b09      	cmp	r3, #9
 80065de:	d94b      	bls.n	8006678 <_svfiprintf_r+0x17c>
 80065e0:	b1b0      	cbz	r0, 8006610 <_svfiprintf_r+0x114>
 80065e2:	9207      	str	r2, [sp, #28]
 80065e4:	e014      	b.n	8006610 <_svfiprintf_r+0x114>
 80065e6:	eba0 0308 	sub.w	r3, r0, r8
 80065ea:	fa09 f303 	lsl.w	r3, r9, r3
 80065ee:	4313      	orrs	r3, r2
 80065f0:	46a2      	mov	sl, r4
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	e7d2      	b.n	800659c <_svfiprintf_r+0xa0>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	1d19      	adds	r1, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9103      	str	r1, [sp, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfbb      	ittet	lt
 8006602:	425b      	neglt	r3, r3
 8006604:	f042 0202 	orrlt.w	r2, r2, #2
 8006608:	9307      	strge	r3, [sp, #28]
 800660a:	9307      	strlt	r3, [sp, #28]
 800660c:	bfb8      	it	lt
 800660e:	9204      	strlt	r2, [sp, #16]
 8006610:	7823      	ldrb	r3, [r4, #0]
 8006612:	2b2e      	cmp	r3, #46	@ 0x2e
 8006614:	d10a      	bne.n	800662c <_svfiprintf_r+0x130>
 8006616:	7863      	ldrb	r3, [r4, #1]
 8006618:	2b2a      	cmp	r3, #42	@ 0x2a
 800661a:	d132      	bne.n	8006682 <_svfiprintf_r+0x186>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	3402      	adds	r4, #2
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	9203      	str	r2, [sp, #12]
 8006626:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80066e4 <_svfiprintf_r+0x1e8>
 8006630:	2203      	movs	r2, #3
 8006632:	4650      	mov	r0, sl
 8006634:	7821      	ldrb	r1, [r4, #0]
 8006636:	f7fd fc7c 	bl	8003f32 <memchr>
 800663a:	b138      	cbz	r0, 800664c <_svfiprintf_r+0x150>
 800663c:	2240      	movs	r2, #64	@ 0x40
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	eba0 000a 	sub.w	r0, r0, sl
 8006644:	4082      	lsls	r2, r0
 8006646:	4313      	orrs	r3, r2
 8006648:	3401      	adds	r4, #1
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006650:	2206      	movs	r2, #6
 8006652:	4825      	ldr	r0, [pc, #148]	@ (80066e8 <_svfiprintf_r+0x1ec>)
 8006654:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006658:	f7fd fc6b 	bl	8003f32 <memchr>
 800665c:	2800      	cmp	r0, #0
 800665e:	d036      	beq.n	80066ce <_svfiprintf_r+0x1d2>
 8006660:	4b22      	ldr	r3, [pc, #136]	@ (80066ec <_svfiprintf_r+0x1f0>)
 8006662:	bb1b      	cbnz	r3, 80066ac <_svfiprintf_r+0x1b0>
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	3307      	adds	r3, #7
 8006668:	f023 0307 	bic.w	r3, r3, #7
 800666c:	3308      	adds	r3, #8
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006672:	4433      	add	r3, r6
 8006674:	9309      	str	r3, [sp, #36]	@ 0x24
 8006676:	e76a      	b.n	800654e <_svfiprintf_r+0x52>
 8006678:	460c      	mov	r4, r1
 800667a:	2001      	movs	r0, #1
 800667c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006680:	e7a8      	b.n	80065d4 <_svfiprintf_r+0xd8>
 8006682:	2300      	movs	r3, #0
 8006684:	f04f 0c0a 	mov.w	ip, #10
 8006688:	4619      	mov	r1, r3
 800668a:	3401      	adds	r4, #1
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	4620      	mov	r0, r4
 8006690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006694:	3a30      	subs	r2, #48	@ 0x30
 8006696:	2a09      	cmp	r2, #9
 8006698:	d903      	bls.n	80066a2 <_svfiprintf_r+0x1a6>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0c6      	beq.n	800662c <_svfiprintf_r+0x130>
 800669e:	9105      	str	r1, [sp, #20]
 80066a0:	e7c4      	b.n	800662c <_svfiprintf_r+0x130>
 80066a2:	4604      	mov	r4, r0
 80066a4:	2301      	movs	r3, #1
 80066a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066aa:	e7f0      	b.n	800668e <_svfiprintf_r+0x192>
 80066ac:	ab03      	add	r3, sp, #12
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	462a      	mov	r2, r5
 80066b2:	4638      	mov	r0, r7
 80066b4:	4b0e      	ldr	r3, [pc, #56]	@ (80066f0 <_svfiprintf_r+0x1f4>)
 80066b6:	a904      	add	r1, sp, #16
 80066b8:	f7fc fcce 	bl	8003058 <_printf_float>
 80066bc:	1c42      	adds	r2, r0, #1
 80066be:	4606      	mov	r6, r0
 80066c0:	d1d6      	bne.n	8006670 <_svfiprintf_r+0x174>
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	065b      	lsls	r3, r3, #25
 80066c6:	f53f af2d 	bmi.w	8006524 <_svfiprintf_r+0x28>
 80066ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066cc:	e72c      	b.n	8006528 <_svfiprintf_r+0x2c>
 80066ce:	ab03      	add	r3, sp, #12
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	462a      	mov	r2, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <_svfiprintf_r+0x1f4>)
 80066d8:	a904      	add	r1, sp, #16
 80066da:	f7fc ff5b 	bl	8003594 <_printf_i>
 80066de:	e7ed      	b.n	80066bc <_svfiprintf_r+0x1c0>
 80066e0:	080084a3 	.word	0x080084a3
 80066e4:	080084a9 	.word	0x080084a9
 80066e8:	080084ad 	.word	0x080084ad
 80066ec:	08003059 	.word	0x08003059
 80066f0:	08006445 	.word	0x08006445

080066f4 <__sflush_r>:
 80066f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	0716      	lsls	r6, r2, #28
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	d454      	bmi.n	80067ac <__sflush_r+0xb8>
 8006702:	684b      	ldr	r3, [r1, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	dc02      	bgt.n	800670e <__sflush_r+0x1a>
 8006708:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	dd48      	ble.n	80067a0 <__sflush_r+0xac>
 800670e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006710:	2e00      	cmp	r6, #0
 8006712:	d045      	beq.n	80067a0 <__sflush_r+0xac>
 8006714:	2300      	movs	r3, #0
 8006716:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800671a:	682f      	ldr	r7, [r5, #0]
 800671c:	6a21      	ldr	r1, [r4, #32]
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	d030      	beq.n	8006784 <__sflush_r+0x90>
 8006722:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	0759      	lsls	r1, r3, #29
 8006728:	d505      	bpl.n	8006736 <__sflush_r+0x42>
 800672a:	6863      	ldr	r3, [r4, #4]
 800672c:	1ad2      	subs	r2, r2, r3
 800672e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006730:	b10b      	cbz	r3, 8006736 <__sflush_r+0x42>
 8006732:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	4628      	mov	r0, r5
 800673a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800673c:	6a21      	ldr	r1, [r4, #32]
 800673e:	47b0      	blx	r6
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	d106      	bne.n	8006754 <__sflush_r+0x60>
 8006746:	6829      	ldr	r1, [r5, #0]
 8006748:	291d      	cmp	r1, #29
 800674a:	d82b      	bhi.n	80067a4 <__sflush_r+0xb0>
 800674c:	4a28      	ldr	r2, [pc, #160]	@ (80067f0 <__sflush_r+0xfc>)
 800674e:	40ca      	lsrs	r2, r1
 8006750:	07d6      	lsls	r6, r2, #31
 8006752:	d527      	bpl.n	80067a4 <__sflush_r+0xb0>
 8006754:	2200      	movs	r2, #0
 8006756:	6062      	str	r2, [r4, #4]
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	04d9      	lsls	r1, r3, #19
 800675c:	6022      	str	r2, [r4, #0]
 800675e:	d504      	bpl.n	800676a <__sflush_r+0x76>
 8006760:	1c42      	adds	r2, r0, #1
 8006762:	d101      	bne.n	8006768 <__sflush_r+0x74>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b903      	cbnz	r3, 800676a <__sflush_r+0x76>
 8006768:	6560      	str	r0, [r4, #84]	@ 0x54
 800676a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800676c:	602f      	str	r7, [r5, #0]
 800676e:	b1b9      	cbz	r1, 80067a0 <__sflush_r+0xac>
 8006770:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006774:	4299      	cmp	r1, r3
 8006776:	d002      	beq.n	800677e <__sflush_r+0x8a>
 8006778:	4628      	mov	r0, r5
 800677a:	f7fe fa49 	bl	8004c10 <_free_r>
 800677e:	2300      	movs	r3, #0
 8006780:	6363      	str	r3, [r4, #52]	@ 0x34
 8006782:	e00d      	b.n	80067a0 <__sflush_r+0xac>
 8006784:	2301      	movs	r3, #1
 8006786:	4628      	mov	r0, r5
 8006788:	47b0      	blx	r6
 800678a:	4602      	mov	r2, r0
 800678c:	1c50      	adds	r0, r2, #1
 800678e:	d1c9      	bne.n	8006724 <__sflush_r+0x30>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0c6      	beq.n	8006724 <__sflush_r+0x30>
 8006796:	2b1d      	cmp	r3, #29
 8006798:	d001      	beq.n	800679e <__sflush_r+0xaa>
 800679a:	2b16      	cmp	r3, #22
 800679c:	d11d      	bne.n	80067da <__sflush_r+0xe6>
 800679e:	602f      	str	r7, [r5, #0]
 80067a0:	2000      	movs	r0, #0
 80067a2:	e021      	b.n	80067e8 <__sflush_r+0xf4>
 80067a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067a8:	b21b      	sxth	r3, r3
 80067aa:	e01a      	b.n	80067e2 <__sflush_r+0xee>
 80067ac:	690f      	ldr	r7, [r1, #16]
 80067ae:	2f00      	cmp	r7, #0
 80067b0:	d0f6      	beq.n	80067a0 <__sflush_r+0xac>
 80067b2:	0793      	lsls	r3, r2, #30
 80067b4:	bf18      	it	ne
 80067b6:	2300      	movne	r3, #0
 80067b8:	680e      	ldr	r6, [r1, #0]
 80067ba:	bf08      	it	eq
 80067bc:	694b      	ldreq	r3, [r1, #20]
 80067be:	1bf6      	subs	r6, r6, r7
 80067c0:	600f      	str	r7, [r1, #0]
 80067c2:	608b      	str	r3, [r1, #8]
 80067c4:	2e00      	cmp	r6, #0
 80067c6:	ddeb      	ble.n	80067a0 <__sflush_r+0xac>
 80067c8:	4633      	mov	r3, r6
 80067ca:	463a      	mov	r2, r7
 80067cc:	4628      	mov	r0, r5
 80067ce:	6a21      	ldr	r1, [r4, #32]
 80067d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80067d4:	47e0      	blx	ip
 80067d6:	2800      	cmp	r0, #0
 80067d8:	dc07      	bgt.n	80067ea <__sflush_r+0xf6>
 80067da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e2:	f04f 30ff 	mov.w	r0, #4294967295
 80067e6:	81a3      	strh	r3, [r4, #12]
 80067e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ea:	4407      	add	r7, r0
 80067ec:	1a36      	subs	r6, r6, r0
 80067ee:	e7e9      	b.n	80067c4 <__sflush_r+0xd0>
 80067f0:	20400001 	.word	0x20400001

080067f4 <_fflush_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	690b      	ldr	r3, [r1, #16]
 80067f8:	4605      	mov	r5, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	b913      	cbnz	r3, 8006804 <_fflush_r+0x10>
 80067fe:	2500      	movs	r5, #0
 8006800:	4628      	mov	r0, r5
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	b118      	cbz	r0, 800680e <_fflush_r+0x1a>
 8006806:	6a03      	ldr	r3, [r0, #32]
 8006808:	b90b      	cbnz	r3, 800680e <_fflush_r+0x1a>
 800680a:	f7fd fa77 	bl	8003cfc <__sinit>
 800680e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f3      	beq.n	80067fe <_fflush_r+0xa>
 8006816:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006818:	07d0      	lsls	r0, r2, #31
 800681a:	d404      	bmi.n	8006826 <_fflush_r+0x32>
 800681c:	0599      	lsls	r1, r3, #22
 800681e:	d402      	bmi.n	8006826 <_fflush_r+0x32>
 8006820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006822:	f7fd fb84 	bl	8003f2e <__retarget_lock_acquire_recursive>
 8006826:	4628      	mov	r0, r5
 8006828:	4621      	mov	r1, r4
 800682a:	f7ff ff63 	bl	80066f4 <__sflush_r>
 800682e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006830:	4605      	mov	r5, r0
 8006832:	07da      	lsls	r2, r3, #31
 8006834:	d4e4      	bmi.n	8006800 <_fflush_r+0xc>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	059b      	lsls	r3, r3, #22
 800683a:	d4e1      	bmi.n	8006800 <_fflush_r+0xc>
 800683c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800683e:	f7fd fb77 	bl	8003f30 <__retarget_lock_release_recursive>
 8006842:	e7dd      	b.n	8006800 <_fflush_r+0xc>

08006844 <memmove>:
 8006844:	4288      	cmp	r0, r1
 8006846:	b510      	push	{r4, lr}
 8006848:	eb01 0402 	add.w	r4, r1, r2
 800684c:	d902      	bls.n	8006854 <memmove+0x10>
 800684e:	4284      	cmp	r4, r0
 8006850:	4623      	mov	r3, r4
 8006852:	d807      	bhi.n	8006864 <memmove+0x20>
 8006854:	1e43      	subs	r3, r0, #1
 8006856:	42a1      	cmp	r1, r4
 8006858:	d008      	beq.n	800686c <memmove+0x28>
 800685a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800685e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006862:	e7f8      	b.n	8006856 <memmove+0x12>
 8006864:	4601      	mov	r1, r0
 8006866:	4402      	add	r2, r0
 8006868:	428a      	cmp	r2, r1
 800686a:	d100      	bne.n	800686e <memmove+0x2a>
 800686c:	bd10      	pop	{r4, pc}
 800686e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006876:	e7f7      	b.n	8006868 <memmove+0x24>

08006878 <strncmp>:
 8006878:	b510      	push	{r4, lr}
 800687a:	b16a      	cbz	r2, 8006898 <strncmp+0x20>
 800687c:	3901      	subs	r1, #1
 800687e:	1884      	adds	r4, r0, r2
 8006880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006884:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006888:	429a      	cmp	r2, r3
 800688a:	d103      	bne.n	8006894 <strncmp+0x1c>
 800688c:	42a0      	cmp	r0, r4
 800688e:	d001      	beq.n	8006894 <strncmp+0x1c>
 8006890:	2a00      	cmp	r2, #0
 8006892:	d1f5      	bne.n	8006880 <strncmp+0x8>
 8006894:	1ad0      	subs	r0, r2, r3
 8006896:	bd10      	pop	{r4, pc}
 8006898:	4610      	mov	r0, r2
 800689a:	e7fc      	b.n	8006896 <strncmp+0x1e>

0800689c <_sbrk_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	2300      	movs	r3, #0
 80068a0:	4d05      	ldr	r5, [pc, #20]	@ (80068b8 <_sbrk_r+0x1c>)
 80068a2:	4604      	mov	r4, r0
 80068a4:	4608      	mov	r0, r1
 80068a6:	602b      	str	r3, [r5, #0]
 80068a8:	f7fa fe46 	bl	8001538 <_sbrk>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_sbrk_r+0x1a>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_sbrk_r+0x1a>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	20000798 	.word	0x20000798

080068bc <memcpy>:
 80068bc:	440a      	add	r2, r1
 80068be:	4291      	cmp	r1, r2
 80068c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068c4:	d100      	bne.n	80068c8 <memcpy+0xc>
 80068c6:	4770      	bx	lr
 80068c8:	b510      	push	{r4, lr}
 80068ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ce:	4291      	cmp	r1, r2
 80068d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068d4:	d1f9      	bne.n	80068ca <memcpy+0xe>
 80068d6:	bd10      	pop	{r4, pc}

080068d8 <nan>:
 80068d8:	2000      	movs	r0, #0
 80068da:	4901      	ldr	r1, [pc, #4]	@ (80068e0 <nan+0x8>)
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	7ff80000 	.word	0x7ff80000

080068e4 <__assert_func>:
 80068e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068e6:	4614      	mov	r4, r2
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <__assert_func+0x2c>)
 80068ec:	4605      	mov	r5, r0
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68d8      	ldr	r0, [r3, #12]
 80068f2:	b14c      	cbz	r4, 8006908 <__assert_func+0x24>
 80068f4:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <__assert_func+0x30>)
 80068f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068fa:	9100      	str	r1, [sp, #0]
 80068fc:	462b      	mov	r3, r5
 80068fe:	4906      	ldr	r1, [pc, #24]	@ (8006918 <__assert_func+0x34>)
 8006900:	f000 fba8 	bl	8007054 <fiprintf>
 8006904:	f000 fbb8 	bl	8007078 <abort>
 8006908:	4b04      	ldr	r3, [pc, #16]	@ (800691c <__assert_func+0x38>)
 800690a:	461c      	mov	r4, r3
 800690c:	e7f3      	b.n	80068f6 <__assert_func+0x12>
 800690e:	bf00      	nop
 8006910:	20000020 	.word	0x20000020
 8006914:	080084bc 	.word	0x080084bc
 8006918:	080084c9 	.word	0x080084c9
 800691c:	080084f7 	.word	0x080084f7

08006920 <_calloc_r>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	fba1 5402 	umull	r5, r4, r1, r2
 8006926:	b934      	cbnz	r4, 8006936 <_calloc_r+0x16>
 8006928:	4629      	mov	r1, r5
 800692a:	f7fe f9e3 	bl	8004cf4 <_malloc_r>
 800692e:	4606      	mov	r6, r0
 8006930:	b928      	cbnz	r0, 800693e <_calloc_r+0x1e>
 8006932:	4630      	mov	r0, r6
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	220c      	movs	r2, #12
 8006938:	2600      	movs	r6, #0
 800693a:	6002      	str	r2, [r0, #0]
 800693c:	e7f9      	b.n	8006932 <_calloc_r+0x12>
 800693e:	462a      	mov	r2, r5
 8006940:	4621      	mov	r1, r4
 8006942:	f7fd fa76 	bl	8003e32 <memset>
 8006946:	e7f4      	b.n	8006932 <_calloc_r+0x12>

08006948 <rshift>:
 8006948:	6903      	ldr	r3, [r0, #16]
 800694a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800694e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006952:	f100 0414 	add.w	r4, r0, #20
 8006956:	ea4f 1261 	mov.w	r2, r1, asr #5
 800695a:	dd46      	ble.n	80069ea <rshift+0xa2>
 800695c:	f011 011f 	ands.w	r1, r1, #31
 8006960:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006964:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006968:	d10c      	bne.n	8006984 <rshift+0x3c>
 800696a:	4629      	mov	r1, r5
 800696c:	f100 0710 	add.w	r7, r0, #16
 8006970:	42b1      	cmp	r1, r6
 8006972:	d335      	bcc.n	80069e0 <rshift+0x98>
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	1eea      	subs	r2, r5, #3
 800697a:	4296      	cmp	r6, r2
 800697c:	bf38      	it	cc
 800697e:	2300      	movcc	r3, #0
 8006980:	4423      	add	r3, r4
 8006982:	e015      	b.n	80069b0 <rshift+0x68>
 8006984:	46a1      	mov	r9, r4
 8006986:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800698a:	f1c1 0820 	rsb	r8, r1, #32
 800698e:	40cf      	lsrs	r7, r1
 8006990:	f105 0e04 	add.w	lr, r5, #4
 8006994:	4576      	cmp	r6, lr
 8006996:	46f4      	mov	ip, lr
 8006998:	d816      	bhi.n	80069c8 <rshift+0x80>
 800699a:	1a9a      	subs	r2, r3, r2
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	3a04      	subs	r2, #4
 80069a0:	3501      	adds	r5, #1
 80069a2:	42ae      	cmp	r6, r5
 80069a4:	bf38      	it	cc
 80069a6:	2200      	movcc	r2, #0
 80069a8:	18a3      	adds	r3, r4, r2
 80069aa:	50a7      	str	r7, [r4, r2]
 80069ac:	b107      	cbz	r7, 80069b0 <rshift+0x68>
 80069ae:	3304      	adds	r3, #4
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	eba3 0204 	sub.w	r2, r3, r4
 80069b6:	bf08      	it	eq
 80069b8:	2300      	moveq	r3, #0
 80069ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80069be:	6102      	str	r2, [r0, #16]
 80069c0:	bf08      	it	eq
 80069c2:	6143      	streq	r3, [r0, #20]
 80069c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069c8:	f8dc c000 	ldr.w	ip, [ip]
 80069cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80069d0:	ea4c 0707 	orr.w	r7, ip, r7
 80069d4:	f849 7b04 	str.w	r7, [r9], #4
 80069d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80069dc:	40cf      	lsrs	r7, r1
 80069de:	e7d9      	b.n	8006994 <rshift+0x4c>
 80069e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80069e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80069e8:	e7c2      	b.n	8006970 <rshift+0x28>
 80069ea:	4623      	mov	r3, r4
 80069ec:	e7e0      	b.n	80069b0 <rshift+0x68>

080069ee <__hexdig_fun>:
 80069ee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80069f2:	2b09      	cmp	r3, #9
 80069f4:	d802      	bhi.n	80069fc <__hexdig_fun+0xe>
 80069f6:	3820      	subs	r0, #32
 80069f8:	b2c0      	uxtb	r0, r0
 80069fa:	4770      	bx	lr
 80069fc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	d801      	bhi.n	8006a08 <__hexdig_fun+0x1a>
 8006a04:	3847      	subs	r0, #71	@ 0x47
 8006a06:	e7f7      	b.n	80069f8 <__hexdig_fun+0xa>
 8006a08:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d801      	bhi.n	8006a14 <__hexdig_fun+0x26>
 8006a10:	3827      	subs	r0, #39	@ 0x27
 8006a12:	e7f1      	b.n	80069f8 <__hexdig_fun+0xa>
 8006a14:	2000      	movs	r0, #0
 8006a16:	4770      	bx	lr

08006a18 <__gethex>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	468a      	mov	sl, r1
 8006a1e:	4690      	mov	r8, r2
 8006a20:	b085      	sub	sp, #20
 8006a22:	9302      	str	r3, [sp, #8]
 8006a24:	680b      	ldr	r3, [r1, #0]
 8006a26:	9001      	str	r0, [sp, #4]
 8006a28:	1c9c      	adds	r4, r3, #2
 8006a2a:	46a1      	mov	r9, r4
 8006a2c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006a30:	2830      	cmp	r0, #48	@ 0x30
 8006a32:	d0fa      	beq.n	8006a2a <__gethex+0x12>
 8006a34:	eba9 0303 	sub.w	r3, r9, r3
 8006a38:	f1a3 0b02 	sub.w	fp, r3, #2
 8006a3c:	f7ff ffd7 	bl	80069ee <__hexdig_fun>
 8006a40:	4605      	mov	r5, r0
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d168      	bne.n	8006b18 <__gethex+0x100>
 8006a46:	2201      	movs	r2, #1
 8006a48:	4648      	mov	r0, r9
 8006a4a:	499f      	ldr	r1, [pc, #636]	@ (8006cc8 <__gethex+0x2b0>)
 8006a4c:	f7ff ff14 	bl	8006878 <strncmp>
 8006a50:	4607      	mov	r7, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d167      	bne.n	8006b26 <__gethex+0x10e>
 8006a56:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006a5a:	4626      	mov	r6, r4
 8006a5c:	f7ff ffc7 	bl	80069ee <__hexdig_fun>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d062      	beq.n	8006b2a <__gethex+0x112>
 8006a64:	4623      	mov	r3, r4
 8006a66:	7818      	ldrb	r0, [r3, #0]
 8006a68:	4699      	mov	r9, r3
 8006a6a:	2830      	cmp	r0, #48	@ 0x30
 8006a6c:	f103 0301 	add.w	r3, r3, #1
 8006a70:	d0f9      	beq.n	8006a66 <__gethex+0x4e>
 8006a72:	f7ff ffbc 	bl	80069ee <__hexdig_fun>
 8006a76:	fab0 f580 	clz	r5, r0
 8006a7a:	f04f 0b01 	mov.w	fp, #1
 8006a7e:	096d      	lsrs	r5, r5, #5
 8006a80:	464a      	mov	r2, r9
 8006a82:	4616      	mov	r6, r2
 8006a84:	7830      	ldrb	r0, [r6, #0]
 8006a86:	3201      	adds	r2, #1
 8006a88:	f7ff ffb1 	bl	80069ee <__hexdig_fun>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d1f8      	bne.n	8006a82 <__gethex+0x6a>
 8006a90:	2201      	movs	r2, #1
 8006a92:	4630      	mov	r0, r6
 8006a94:	498c      	ldr	r1, [pc, #560]	@ (8006cc8 <__gethex+0x2b0>)
 8006a96:	f7ff feef 	bl	8006878 <strncmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d13f      	bne.n	8006b1e <__gethex+0x106>
 8006a9e:	b944      	cbnz	r4, 8006ab2 <__gethex+0x9a>
 8006aa0:	1c74      	adds	r4, r6, #1
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	7830      	ldrb	r0, [r6, #0]
 8006aa8:	3201      	adds	r2, #1
 8006aaa:	f7ff ffa0 	bl	80069ee <__hexdig_fun>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d1f8      	bne.n	8006aa4 <__gethex+0x8c>
 8006ab2:	1ba4      	subs	r4, r4, r6
 8006ab4:	00a7      	lsls	r7, r4, #2
 8006ab6:	7833      	ldrb	r3, [r6, #0]
 8006ab8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006abc:	2b50      	cmp	r3, #80	@ 0x50
 8006abe:	d13e      	bne.n	8006b3e <__gethex+0x126>
 8006ac0:	7873      	ldrb	r3, [r6, #1]
 8006ac2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ac4:	d033      	beq.n	8006b2e <__gethex+0x116>
 8006ac6:	2b2d      	cmp	r3, #45	@ 0x2d
 8006ac8:	d034      	beq.n	8006b34 <__gethex+0x11c>
 8006aca:	2400      	movs	r4, #0
 8006acc:	1c71      	adds	r1, r6, #1
 8006ace:	7808      	ldrb	r0, [r1, #0]
 8006ad0:	f7ff ff8d 	bl	80069ee <__hexdig_fun>
 8006ad4:	1e43      	subs	r3, r0, #1
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b18      	cmp	r3, #24
 8006ada:	d830      	bhi.n	8006b3e <__gethex+0x126>
 8006adc:	f1a0 0210 	sub.w	r2, r0, #16
 8006ae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ae4:	f7ff ff83 	bl	80069ee <__hexdig_fun>
 8006ae8:	f100 3cff 	add.w	ip, r0, #4294967295
 8006aec:	fa5f fc8c 	uxtb.w	ip, ip
 8006af0:	f1bc 0f18 	cmp.w	ip, #24
 8006af4:	f04f 030a 	mov.w	r3, #10
 8006af8:	d91e      	bls.n	8006b38 <__gethex+0x120>
 8006afa:	b104      	cbz	r4, 8006afe <__gethex+0xe6>
 8006afc:	4252      	negs	r2, r2
 8006afe:	4417      	add	r7, r2
 8006b00:	f8ca 1000 	str.w	r1, [sl]
 8006b04:	b1ed      	cbz	r5, 8006b42 <__gethex+0x12a>
 8006b06:	f1bb 0f00 	cmp.w	fp, #0
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2506      	moveq	r5, #6
 8006b0e:	2500      	movne	r5, #0
 8006b10:	4628      	mov	r0, r5
 8006b12:	b005      	add	sp, #20
 8006b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b18:	2500      	movs	r5, #0
 8006b1a:	462c      	mov	r4, r5
 8006b1c:	e7b0      	b.n	8006a80 <__gethex+0x68>
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d1c7      	bne.n	8006ab2 <__gethex+0x9a>
 8006b22:	4627      	mov	r7, r4
 8006b24:	e7c7      	b.n	8006ab6 <__gethex+0x9e>
 8006b26:	464e      	mov	r6, r9
 8006b28:	462f      	mov	r7, r5
 8006b2a:	2501      	movs	r5, #1
 8006b2c:	e7c3      	b.n	8006ab6 <__gethex+0x9e>
 8006b2e:	2400      	movs	r4, #0
 8006b30:	1cb1      	adds	r1, r6, #2
 8006b32:	e7cc      	b.n	8006ace <__gethex+0xb6>
 8006b34:	2401      	movs	r4, #1
 8006b36:	e7fb      	b.n	8006b30 <__gethex+0x118>
 8006b38:	fb03 0002 	mla	r0, r3, r2, r0
 8006b3c:	e7ce      	b.n	8006adc <__gethex+0xc4>
 8006b3e:	4631      	mov	r1, r6
 8006b40:	e7de      	b.n	8006b00 <__gethex+0xe8>
 8006b42:	4629      	mov	r1, r5
 8006b44:	eba6 0309 	sub.w	r3, r6, r9
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	2b07      	cmp	r3, #7
 8006b4c:	dc0a      	bgt.n	8006b64 <__gethex+0x14c>
 8006b4e:	9801      	ldr	r0, [sp, #4]
 8006b50:	f7fe f95c 	bl	8004e0c <_Balloc>
 8006b54:	4604      	mov	r4, r0
 8006b56:	b940      	cbnz	r0, 8006b6a <__gethex+0x152>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	21e4      	movs	r1, #228	@ 0xe4
 8006b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8006ccc <__gethex+0x2b4>)
 8006b5e:	485c      	ldr	r0, [pc, #368]	@ (8006cd0 <__gethex+0x2b8>)
 8006b60:	f7ff fec0 	bl	80068e4 <__assert_func>
 8006b64:	3101      	adds	r1, #1
 8006b66:	105b      	asrs	r3, r3, #1
 8006b68:	e7ef      	b.n	8006b4a <__gethex+0x132>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f100 0a14 	add.w	sl, r0, #20
 8006b70:	4655      	mov	r5, sl
 8006b72:	469b      	mov	fp, r3
 8006b74:	45b1      	cmp	r9, r6
 8006b76:	d337      	bcc.n	8006be8 <__gethex+0x1d0>
 8006b78:	f845 bb04 	str.w	fp, [r5], #4
 8006b7c:	eba5 050a 	sub.w	r5, r5, sl
 8006b80:	10ad      	asrs	r5, r5, #2
 8006b82:	6125      	str	r5, [r4, #16]
 8006b84:	4658      	mov	r0, fp
 8006b86:	f7fe fa33 	bl	8004ff0 <__hi0bits>
 8006b8a:	016d      	lsls	r5, r5, #5
 8006b8c:	f8d8 6000 	ldr.w	r6, [r8]
 8006b90:	1a2d      	subs	r5, r5, r0
 8006b92:	42b5      	cmp	r5, r6
 8006b94:	dd54      	ble.n	8006c40 <__gethex+0x228>
 8006b96:	1bad      	subs	r5, r5, r6
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7fe fdb5 	bl	800570a <__any_on>
 8006ba0:	4681      	mov	r9, r0
 8006ba2:	b178      	cbz	r0, 8006bc4 <__gethex+0x1ac>
 8006ba4:	f04f 0901 	mov.w	r9, #1
 8006ba8:	1e6b      	subs	r3, r5, #1
 8006baa:	1159      	asrs	r1, r3, #5
 8006bac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006bb0:	f003 021f 	and.w	r2, r3, #31
 8006bb4:	fa09 f202 	lsl.w	r2, r9, r2
 8006bb8:	420a      	tst	r2, r1
 8006bba:	d003      	beq.n	8006bc4 <__gethex+0x1ac>
 8006bbc:	454b      	cmp	r3, r9
 8006bbe:	dc36      	bgt.n	8006c2e <__gethex+0x216>
 8006bc0:	f04f 0902 	mov.w	r9, #2
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7ff febe 	bl	8006948 <rshift>
 8006bcc:	442f      	add	r7, r5
 8006bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bd2:	42bb      	cmp	r3, r7
 8006bd4:	da42      	bge.n	8006c5c <__gethex+0x244>
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	9801      	ldr	r0, [sp, #4]
 8006bda:	f7fe f957 	bl	8004e8c <_Bfree>
 8006bde:	2300      	movs	r3, #0
 8006be0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006be2:	25a3      	movs	r5, #163	@ 0xa3
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e793      	b.n	8006b10 <__gethex+0xf8>
 8006be8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006bec:	2a2e      	cmp	r2, #46	@ 0x2e
 8006bee:	d012      	beq.n	8006c16 <__gethex+0x1fe>
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d104      	bne.n	8006bfe <__gethex+0x1e6>
 8006bf4:	f845 bb04 	str.w	fp, [r5], #4
 8006bf8:	f04f 0b00 	mov.w	fp, #0
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	7830      	ldrb	r0, [r6, #0]
 8006c00:	9303      	str	r3, [sp, #12]
 8006c02:	f7ff fef4 	bl	80069ee <__hexdig_fun>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	f000 000f 	and.w	r0, r0, #15
 8006c0c:	4098      	lsls	r0, r3
 8006c0e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006c12:	3304      	adds	r3, #4
 8006c14:	e7ae      	b.n	8006b74 <__gethex+0x15c>
 8006c16:	45b1      	cmp	r9, r6
 8006c18:	d8ea      	bhi.n	8006bf0 <__gethex+0x1d8>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	492a      	ldr	r1, [pc, #168]	@ (8006cc8 <__gethex+0x2b0>)
 8006c20:	9303      	str	r3, [sp, #12]
 8006c22:	f7ff fe29 	bl	8006878 <strncmp>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d1e1      	bne.n	8006bf0 <__gethex+0x1d8>
 8006c2c:	e7a2      	b.n	8006b74 <__gethex+0x15c>
 8006c2e:	4620      	mov	r0, r4
 8006c30:	1ea9      	subs	r1, r5, #2
 8006c32:	f7fe fd6a 	bl	800570a <__any_on>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d0c2      	beq.n	8006bc0 <__gethex+0x1a8>
 8006c3a:	f04f 0903 	mov.w	r9, #3
 8006c3e:	e7c1      	b.n	8006bc4 <__gethex+0x1ac>
 8006c40:	da09      	bge.n	8006c56 <__gethex+0x23e>
 8006c42:	1b75      	subs	r5, r6, r5
 8006c44:	4621      	mov	r1, r4
 8006c46:	462a      	mov	r2, r5
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	f7fe fb2f 	bl	80052ac <__lshift>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	1b7f      	subs	r7, r7, r5
 8006c52:	f100 0a14 	add.w	sl, r0, #20
 8006c56:	f04f 0900 	mov.w	r9, #0
 8006c5a:	e7b8      	b.n	8006bce <__gethex+0x1b6>
 8006c5c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006c60:	42bd      	cmp	r5, r7
 8006c62:	dd6f      	ble.n	8006d44 <__gethex+0x32c>
 8006c64:	1bed      	subs	r5, r5, r7
 8006c66:	42ae      	cmp	r6, r5
 8006c68:	dc34      	bgt.n	8006cd4 <__gethex+0x2bc>
 8006c6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d022      	beq.n	8006cb8 <__gethex+0x2a0>
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d024      	beq.n	8006cc0 <__gethex+0x2a8>
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d115      	bne.n	8006ca6 <__gethex+0x28e>
 8006c7a:	42ae      	cmp	r6, r5
 8006c7c:	d113      	bne.n	8006ca6 <__gethex+0x28e>
 8006c7e:	2e01      	cmp	r6, #1
 8006c80:	d10b      	bne.n	8006c9a <__gethex+0x282>
 8006c82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c86:	9a02      	ldr	r2, [sp, #8]
 8006c88:	2562      	movs	r5, #98	@ 0x62
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	f8ca 3000 	str.w	r3, [sl]
 8006c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c96:	601c      	str	r4, [r3, #0]
 8006c98:	e73a      	b.n	8006b10 <__gethex+0xf8>
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	1e71      	subs	r1, r6, #1
 8006c9e:	f7fe fd34 	bl	800570a <__any_on>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d1ed      	bne.n	8006c82 <__gethex+0x26a>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	9801      	ldr	r0, [sp, #4]
 8006caa:	f7fe f8ef 	bl	8004e8c <_Bfree>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cb2:	2550      	movs	r5, #80	@ 0x50
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e72b      	b.n	8006b10 <__gethex+0xf8>
 8006cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f3      	bne.n	8006ca6 <__gethex+0x28e>
 8006cbe:	e7e0      	b.n	8006c82 <__gethex+0x26a>
 8006cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1dd      	bne.n	8006c82 <__gethex+0x26a>
 8006cc6:	e7ee      	b.n	8006ca6 <__gethex+0x28e>
 8006cc8:	080084a1 	.word	0x080084a1
 8006ccc:	08008437 	.word	0x08008437
 8006cd0:	080084f8 	.word	0x080084f8
 8006cd4:	1e6f      	subs	r7, r5, #1
 8006cd6:	f1b9 0f00 	cmp.w	r9, #0
 8006cda:	d130      	bne.n	8006d3e <__gethex+0x326>
 8006cdc:	b127      	cbz	r7, 8006ce8 <__gethex+0x2d0>
 8006cde:	4639      	mov	r1, r7
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7fe fd12 	bl	800570a <__any_on>
 8006ce6:	4681      	mov	r9, r0
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4629      	mov	r1, r5
 8006cec:	1b76      	subs	r6, r6, r5
 8006cee:	2502      	movs	r5, #2
 8006cf0:	117a      	asrs	r2, r7, #5
 8006cf2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006cf6:	f007 071f 	and.w	r7, r7, #31
 8006cfa:	40bb      	lsls	r3, r7
 8006cfc:	4213      	tst	r3, r2
 8006cfe:	4620      	mov	r0, r4
 8006d00:	bf18      	it	ne
 8006d02:	f049 0902 	orrne.w	r9, r9, #2
 8006d06:	f7ff fe1f 	bl	8006948 <rshift>
 8006d0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006d0e:	f1b9 0f00 	cmp.w	r9, #0
 8006d12:	d047      	beq.n	8006da4 <__gethex+0x38c>
 8006d14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d015      	beq.n	8006d48 <__gethex+0x330>
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d017      	beq.n	8006d50 <__gethex+0x338>
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d109      	bne.n	8006d38 <__gethex+0x320>
 8006d24:	f019 0f02 	tst.w	r9, #2
 8006d28:	d006      	beq.n	8006d38 <__gethex+0x320>
 8006d2a:	f8da 3000 	ldr.w	r3, [sl]
 8006d2e:	ea49 0903 	orr.w	r9, r9, r3
 8006d32:	f019 0f01 	tst.w	r9, #1
 8006d36:	d10e      	bne.n	8006d56 <__gethex+0x33e>
 8006d38:	f045 0510 	orr.w	r5, r5, #16
 8006d3c:	e032      	b.n	8006da4 <__gethex+0x38c>
 8006d3e:	f04f 0901 	mov.w	r9, #1
 8006d42:	e7d1      	b.n	8006ce8 <__gethex+0x2d0>
 8006d44:	2501      	movs	r5, #1
 8006d46:	e7e2      	b.n	8006d0e <__gethex+0x2f6>
 8006d48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d4a:	f1c3 0301 	rsb	r3, r3, #1
 8006d4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <__gethex+0x320>
 8006d56:	f04f 0c00 	mov.w	ip, #0
 8006d5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d5e:	f104 0314 	add.w	r3, r4, #20
 8006d62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d70:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d74:	d01b      	beq.n	8006dae <__gethex+0x396>
 8006d76:	3201      	adds	r2, #1
 8006d78:	6002      	str	r2, [r0, #0]
 8006d7a:	2d02      	cmp	r5, #2
 8006d7c:	f104 0314 	add.w	r3, r4, #20
 8006d80:	d13c      	bne.n	8006dfc <__gethex+0x3e4>
 8006d82:	f8d8 2000 	ldr.w	r2, [r8]
 8006d86:	3a01      	subs	r2, #1
 8006d88:	42b2      	cmp	r2, r6
 8006d8a:	d109      	bne.n	8006da0 <__gethex+0x388>
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	1171      	asrs	r1, r6, #5
 8006d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d94:	f006 061f 	and.w	r6, r6, #31
 8006d98:	fa02 f606 	lsl.w	r6, r2, r6
 8006d9c:	421e      	tst	r6, r3
 8006d9e:	d13a      	bne.n	8006e16 <__gethex+0x3fe>
 8006da0:	f045 0520 	orr.w	r5, r5, #32
 8006da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006da6:	601c      	str	r4, [r3, #0]
 8006da8:	9b02      	ldr	r3, [sp, #8]
 8006daa:	601f      	str	r7, [r3, #0]
 8006dac:	e6b0      	b.n	8006b10 <__gethex+0xf8>
 8006dae:	4299      	cmp	r1, r3
 8006db0:	f843 cc04 	str.w	ip, [r3, #-4]
 8006db4:	d8d9      	bhi.n	8006d6a <__gethex+0x352>
 8006db6:	68a3      	ldr	r3, [r4, #8]
 8006db8:	459b      	cmp	fp, r3
 8006dba:	db17      	blt.n	8006dec <__gethex+0x3d4>
 8006dbc:	6861      	ldr	r1, [r4, #4]
 8006dbe:	9801      	ldr	r0, [sp, #4]
 8006dc0:	3101      	adds	r1, #1
 8006dc2:	f7fe f823 	bl	8004e0c <_Balloc>
 8006dc6:	4681      	mov	r9, r0
 8006dc8:	b918      	cbnz	r0, 8006dd2 <__gethex+0x3ba>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	2184      	movs	r1, #132	@ 0x84
 8006dce:	4b19      	ldr	r3, [pc, #100]	@ (8006e34 <__gethex+0x41c>)
 8006dd0:	e6c5      	b.n	8006b5e <__gethex+0x146>
 8006dd2:	6922      	ldr	r2, [r4, #16]
 8006dd4:	f104 010c 	add.w	r1, r4, #12
 8006dd8:	3202      	adds	r2, #2
 8006dda:	0092      	lsls	r2, r2, #2
 8006ddc:	300c      	adds	r0, #12
 8006dde:	f7ff fd6d 	bl	80068bc <memcpy>
 8006de2:	4621      	mov	r1, r4
 8006de4:	9801      	ldr	r0, [sp, #4]
 8006de6:	f7fe f851 	bl	8004e8c <_Bfree>
 8006dea:	464c      	mov	r4, r9
 8006dec:	6923      	ldr	r3, [r4, #16]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	6122      	str	r2, [r4, #16]
 8006df2:	2201      	movs	r2, #1
 8006df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006df8:	615a      	str	r2, [r3, #20]
 8006dfa:	e7be      	b.n	8006d7a <__gethex+0x362>
 8006dfc:	6922      	ldr	r2, [r4, #16]
 8006dfe:	455a      	cmp	r2, fp
 8006e00:	dd0b      	ble.n	8006e1a <__gethex+0x402>
 8006e02:	2101      	movs	r1, #1
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7ff fd9f 	bl	8006948 <rshift>
 8006e0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e0e:	3701      	adds	r7, #1
 8006e10:	42bb      	cmp	r3, r7
 8006e12:	f6ff aee0 	blt.w	8006bd6 <__gethex+0x1be>
 8006e16:	2501      	movs	r5, #1
 8006e18:	e7c2      	b.n	8006da0 <__gethex+0x388>
 8006e1a:	f016 061f 	ands.w	r6, r6, #31
 8006e1e:	d0fa      	beq.n	8006e16 <__gethex+0x3fe>
 8006e20:	4453      	add	r3, sl
 8006e22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006e26:	f7fe f8e3 	bl	8004ff0 <__hi0bits>
 8006e2a:	f1c6 0620 	rsb	r6, r6, #32
 8006e2e:	42b0      	cmp	r0, r6
 8006e30:	dbe7      	blt.n	8006e02 <__gethex+0x3ea>
 8006e32:	e7f0      	b.n	8006e16 <__gethex+0x3fe>
 8006e34:	08008437 	.word	0x08008437

08006e38 <L_shift>:
 8006e38:	f1c2 0208 	rsb	r2, r2, #8
 8006e3c:	0092      	lsls	r2, r2, #2
 8006e3e:	b570      	push	{r4, r5, r6, lr}
 8006e40:	f1c2 0620 	rsb	r6, r2, #32
 8006e44:	6843      	ldr	r3, [r0, #4]
 8006e46:	6804      	ldr	r4, [r0, #0]
 8006e48:	fa03 f506 	lsl.w	r5, r3, r6
 8006e4c:	432c      	orrs	r4, r5
 8006e4e:	40d3      	lsrs	r3, r2
 8006e50:	6004      	str	r4, [r0, #0]
 8006e52:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e56:	4288      	cmp	r0, r1
 8006e58:	d3f4      	bcc.n	8006e44 <L_shift+0xc>
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}

08006e5c <__match>:
 8006e5c:	b530      	push	{r4, r5, lr}
 8006e5e:	6803      	ldr	r3, [r0, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e66:	b914      	cbnz	r4, 8006e6e <__match+0x12>
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	bd30      	pop	{r4, r5, pc}
 8006e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e72:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006e76:	2d19      	cmp	r5, #25
 8006e78:	bf98      	it	ls
 8006e7a:	3220      	addls	r2, #32
 8006e7c:	42a2      	cmp	r2, r4
 8006e7e:	d0f0      	beq.n	8006e62 <__match+0x6>
 8006e80:	2000      	movs	r0, #0
 8006e82:	e7f3      	b.n	8006e6c <__match+0x10>

08006e84 <__hexnan>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	2500      	movs	r5, #0
 8006e8a:	680b      	ldr	r3, [r1, #0]
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	115e      	asrs	r6, r3, #5
 8006e90:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e94:	f013 031f 	ands.w	r3, r3, #31
 8006e98:	bf18      	it	ne
 8006e9a:	3604      	addne	r6, #4
 8006e9c:	1f37      	subs	r7, r6, #4
 8006e9e:	4690      	mov	r8, r2
 8006ea0:	46b9      	mov	r9, r7
 8006ea2:	463c      	mov	r4, r7
 8006ea4:	46ab      	mov	fp, r5
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	6801      	ldr	r1, [r0, #0]
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	f846 5c04 	str.w	r5, [r6, #-4]
 8006eb0:	9502      	str	r5, [sp, #8]
 8006eb2:	784a      	ldrb	r2, [r1, #1]
 8006eb4:	1c4b      	adds	r3, r1, #1
 8006eb6:	9303      	str	r3, [sp, #12]
 8006eb8:	b342      	cbz	r2, 8006f0c <__hexnan+0x88>
 8006eba:	4610      	mov	r0, r2
 8006ebc:	9105      	str	r1, [sp, #20]
 8006ebe:	9204      	str	r2, [sp, #16]
 8006ec0:	f7ff fd95 	bl	80069ee <__hexdig_fun>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d151      	bne.n	8006f6c <__hexnan+0xe8>
 8006ec8:	9a04      	ldr	r2, [sp, #16]
 8006eca:	9905      	ldr	r1, [sp, #20]
 8006ecc:	2a20      	cmp	r2, #32
 8006ece:	d818      	bhi.n	8006f02 <__hexnan+0x7e>
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	459b      	cmp	fp, r3
 8006ed4:	dd13      	ble.n	8006efe <__hexnan+0x7a>
 8006ed6:	454c      	cmp	r4, r9
 8006ed8:	d206      	bcs.n	8006ee8 <__hexnan+0x64>
 8006eda:	2d07      	cmp	r5, #7
 8006edc:	dc04      	bgt.n	8006ee8 <__hexnan+0x64>
 8006ede:	462a      	mov	r2, r5
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff ffa8 	bl	8006e38 <L_shift>
 8006ee8:	4544      	cmp	r4, r8
 8006eea:	d952      	bls.n	8006f92 <__hexnan+0x10e>
 8006eec:	2300      	movs	r3, #0
 8006eee:	f1a4 0904 	sub.w	r9, r4, #4
 8006ef2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ef6:	461d      	mov	r5, r3
 8006ef8:	464c      	mov	r4, r9
 8006efa:	f8cd b008 	str.w	fp, [sp, #8]
 8006efe:	9903      	ldr	r1, [sp, #12]
 8006f00:	e7d7      	b.n	8006eb2 <__hexnan+0x2e>
 8006f02:	2a29      	cmp	r2, #41	@ 0x29
 8006f04:	d157      	bne.n	8006fb6 <__hexnan+0x132>
 8006f06:	3102      	adds	r1, #2
 8006f08:	f8ca 1000 	str.w	r1, [sl]
 8006f0c:	f1bb 0f00 	cmp.w	fp, #0
 8006f10:	d051      	beq.n	8006fb6 <__hexnan+0x132>
 8006f12:	454c      	cmp	r4, r9
 8006f14:	d206      	bcs.n	8006f24 <__hexnan+0xa0>
 8006f16:	2d07      	cmp	r5, #7
 8006f18:	dc04      	bgt.n	8006f24 <__hexnan+0xa0>
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7ff ff8a 	bl	8006e38 <L_shift>
 8006f24:	4544      	cmp	r4, r8
 8006f26:	d936      	bls.n	8006f96 <__hexnan+0x112>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	f1a8 0204 	sub.w	r2, r8, #4
 8006f2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f32:	429f      	cmp	r7, r3
 8006f34:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f38:	d2f9      	bcs.n	8006f2e <__hexnan+0xaa>
 8006f3a:	1b3b      	subs	r3, r7, r4
 8006f3c:	f023 0303 	bic.w	r3, r3, #3
 8006f40:	3304      	adds	r3, #4
 8006f42:	3401      	adds	r4, #1
 8006f44:	3e03      	subs	r6, #3
 8006f46:	42b4      	cmp	r4, r6
 8006f48:	bf88      	it	hi
 8006f4a:	2304      	movhi	r3, #4
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4443      	add	r3, r8
 8006f50:	f843 2b04 	str.w	r2, [r3], #4
 8006f54:	429f      	cmp	r7, r3
 8006f56:	d2fb      	bcs.n	8006f50 <__hexnan+0xcc>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	b91b      	cbnz	r3, 8006f64 <__hexnan+0xe0>
 8006f5c:	4547      	cmp	r7, r8
 8006f5e:	d128      	bne.n	8006fb2 <__hexnan+0x12e>
 8006f60:	2301      	movs	r3, #1
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	2005      	movs	r0, #5
 8006f66:	b007      	add	sp, #28
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	3501      	adds	r5, #1
 8006f6e:	2d08      	cmp	r5, #8
 8006f70:	f10b 0b01 	add.w	fp, fp, #1
 8006f74:	dd06      	ble.n	8006f84 <__hexnan+0x100>
 8006f76:	4544      	cmp	r4, r8
 8006f78:	d9c1      	bls.n	8006efe <__hexnan+0x7a>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2501      	movs	r5, #1
 8006f7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f82:	3c04      	subs	r4, #4
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	f000 000f 	and.w	r0, r0, #15
 8006f8a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006f8e:	6020      	str	r0, [r4, #0]
 8006f90:	e7b5      	b.n	8006efe <__hexnan+0x7a>
 8006f92:	2508      	movs	r5, #8
 8006f94:	e7b3      	b.n	8006efe <__hexnan+0x7a>
 8006f96:	9b01      	ldr	r3, [sp, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0dd      	beq.n	8006f58 <__hexnan+0xd4>
 8006f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa0:	f1c3 0320 	rsb	r3, r3, #32
 8006fa4:	40da      	lsrs	r2, r3
 8006fa6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006faa:	4013      	ands	r3, r2
 8006fac:	f846 3c04 	str.w	r3, [r6, #-4]
 8006fb0:	e7d2      	b.n	8006f58 <__hexnan+0xd4>
 8006fb2:	3f04      	subs	r7, #4
 8006fb4:	e7d0      	b.n	8006f58 <__hexnan+0xd4>
 8006fb6:	2004      	movs	r0, #4
 8006fb8:	e7d5      	b.n	8006f66 <__hexnan+0xe2>

08006fba <__ascii_mbtowc>:
 8006fba:	b082      	sub	sp, #8
 8006fbc:	b901      	cbnz	r1, 8006fc0 <__ascii_mbtowc+0x6>
 8006fbe:	a901      	add	r1, sp, #4
 8006fc0:	b142      	cbz	r2, 8006fd4 <__ascii_mbtowc+0x1a>
 8006fc2:	b14b      	cbz	r3, 8006fd8 <__ascii_mbtowc+0x1e>
 8006fc4:	7813      	ldrb	r3, [r2, #0]
 8006fc6:	600b      	str	r3, [r1, #0]
 8006fc8:	7812      	ldrb	r2, [r2, #0]
 8006fca:	1e10      	subs	r0, r2, #0
 8006fcc:	bf18      	it	ne
 8006fce:	2001      	movne	r0, #1
 8006fd0:	b002      	add	sp, #8
 8006fd2:	4770      	bx	lr
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	e7fb      	b.n	8006fd0 <__ascii_mbtowc+0x16>
 8006fd8:	f06f 0001 	mvn.w	r0, #1
 8006fdc:	e7f8      	b.n	8006fd0 <__ascii_mbtowc+0x16>

08006fde <_realloc_r>:
 8006fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	4607      	mov	r7, r0
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	b921      	cbnz	r1, 8006ff4 <_realloc_r+0x16>
 8006fea:	4611      	mov	r1, r2
 8006fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	f7fd be80 	b.w	8004cf4 <_malloc_r>
 8006ff4:	b92a      	cbnz	r2, 8007002 <_realloc_r+0x24>
 8006ff6:	f7fd fe0b 	bl	8004c10 <_free_r>
 8006ffa:	4625      	mov	r5, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007002:	f000 f840 	bl	8007086 <_malloc_usable_size_r>
 8007006:	4284      	cmp	r4, r0
 8007008:	4606      	mov	r6, r0
 800700a:	d802      	bhi.n	8007012 <_realloc_r+0x34>
 800700c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007010:	d8f4      	bhi.n	8006ffc <_realloc_r+0x1e>
 8007012:	4621      	mov	r1, r4
 8007014:	4638      	mov	r0, r7
 8007016:	f7fd fe6d 	bl	8004cf4 <_malloc_r>
 800701a:	4680      	mov	r8, r0
 800701c:	b908      	cbnz	r0, 8007022 <_realloc_r+0x44>
 800701e:	4645      	mov	r5, r8
 8007020:	e7ec      	b.n	8006ffc <_realloc_r+0x1e>
 8007022:	42b4      	cmp	r4, r6
 8007024:	4622      	mov	r2, r4
 8007026:	4629      	mov	r1, r5
 8007028:	bf28      	it	cs
 800702a:	4632      	movcs	r2, r6
 800702c:	f7ff fc46 	bl	80068bc <memcpy>
 8007030:	4629      	mov	r1, r5
 8007032:	4638      	mov	r0, r7
 8007034:	f7fd fdec 	bl	8004c10 <_free_r>
 8007038:	e7f1      	b.n	800701e <_realloc_r+0x40>

0800703a <__ascii_wctomb>:
 800703a:	4603      	mov	r3, r0
 800703c:	4608      	mov	r0, r1
 800703e:	b141      	cbz	r1, 8007052 <__ascii_wctomb+0x18>
 8007040:	2aff      	cmp	r2, #255	@ 0xff
 8007042:	d904      	bls.n	800704e <__ascii_wctomb+0x14>
 8007044:	228a      	movs	r2, #138	@ 0x8a
 8007046:	f04f 30ff 	mov.w	r0, #4294967295
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	2001      	movs	r0, #1
 8007050:	700a      	strb	r2, [r1, #0]
 8007052:	4770      	bx	lr

08007054 <fiprintf>:
 8007054:	b40e      	push	{r1, r2, r3}
 8007056:	b503      	push	{r0, r1, lr}
 8007058:	4601      	mov	r1, r0
 800705a:	ab03      	add	r3, sp, #12
 800705c:	4805      	ldr	r0, [pc, #20]	@ (8007074 <fiprintf+0x20>)
 800705e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007062:	6800      	ldr	r0, [r0, #0]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	f000 f83d 	bl	80070e4 <_vfiprintf_r>
 800706a:	b002      	add	sp, #8
 800706c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007070:	b003      	add	sp, #12
 8007072:	4770      	bx	lr
 8007074:	20000020 	.word	0x20000020

08007078 <abort>:
 8007078:	2006      	movs	r0, #6
 800707a:	b508      	push	{r3, lr}
 800707c:	f000 fa06 	bl	800748c <raise>
 8007080:	2001      	movs	r0, #1
 8007082:	f7fa f9e4 	bl	800144e <_exit>

08007086 <_malloc_usable_size_r>:
 8007086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708a:	1f18      	subs	r0, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	bfbc      	itt	lt
 8007090:	580b      	ldrlt	r3, [r1, r0]
 8007092:	18c0      	addlt	r0, r0, r3
 8007094:	4770      	bx	lr

08007096 <__sfputc_r>:
 8007096:	6893      	ldr	r3, [r2, #8]
 8007098:	b410      	push	{r4}
 800709a:	3b01      	subs	r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	6093      	str	r3, [r2, #8]
 80070a0:	da07      	bge.n	80070b2 <__sfputc_r+0x1c>
 80070a2:	6994      	ldr	r4, [r2, #24]
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	db01      	blt.n	80070ac <__sfputc_r+0x16>
 80070a8:	290a      	cmp	r1, #10
 80070aa:	d102      	bne.n	80070b2 <__sfputc_r+0x1c>
 80070ac:	bc10      	pop	{r4}
 80070ae:	f000 b931 	b.w	8007314 <__swbuf_r>
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	1c58      	adds	r0, r3, #1
 80070b6:	6010      	str	r0, [r2, #0]
 80070b8:	7019      	strb	r1, [r3, #0]
 80070ba:	4608      	mov	r0, r1
 80070bc:	bc10      	pop	{r4}
 80070be:	4770      	bx	lr

080070c0 <__sfputs_r>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	4614      	mov	r4, r2
 80070c8:	18d5      	adds	r5, r2, r3
 80070ca:	42ac      	cmp	r4, r5
 80070cc:	d101      	bne.n	80070d2 <__sfputs_r+0x12>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e007      	b.n	80070e2 <__sfputs_r+0x22>
 80070d2:	463a      	mov	r2, r7
 80070d4:	4630      	mov	r0, r6
 80070d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070da:	f7ff ffdc 	bl	8007096 <__sfputc_r>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	d1f3      	bne.n	80070ca <__sfputs_r+0xa>
 80070e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070e4 <_vfiprintf_r>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	460d      	mov	r5, r1
 80070ea:	4614      	mov	r4, r2
 80070ec:	4698      	mov	r8, r3
 80070ee:	4606      	mov	r6, r0
 80070f0:	b09d      	sub	sp, #116	@ 0x74
 80070f2:	b118      	cbz	r0, 80070fc <_vfiprintf_r+0x18>
 80070f4:	6a03      	ldr	r3, [r0, #32]
 80070f6:	b90b      	cbnz	r3, 80070fc <_vfiprintf_r+0x18>
 80070f8:	f7fc fe00 	bl	8003cfc <__sinit>
 80070fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070fe:	07d9      	lsls	r1, r3, #31
 8007100:	d405      	bmi.n	800710e <_vfiprintf_r+0x2a>
 8007102:	89ab      	ldrh	r3, [r5, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d402      	bmi.n	800710e <_vfiprintf_r+0x2a>
 8007108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800710a:	f7fc ff10 	bl	8003f2e <__retarget_lock_acquire_recursive>
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	071b      	lsls	r3, r3, #28
 8007112:	d501      	bpl.n	8007118 <_vfiprintf_r+0x34>
 8007114:	692b      	ldr	r3, [r5, #16]
 8007116:	b99b      	cbnz	r3, 8007140 <_vfiprintf_r+0x5c>
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f000 f938 	bl	8007390 <__swsetup_r>
 8007120:	b170      	cbz	r0, 8007140 <_vfiprintf_r+0x5c>
 8007122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007124:	07dc      	lsls	r4, r3, #31
 8007126:	d504      	bpl.n	8007132 <_vfiprintf_r+0x4e>
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	b01d      	add	sp, #116	@ 0x74
 800712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	0598      	lsls	r0, r3, #22
 8007136:	d4f7      	bmi.n	8007128 <_vfiprintf_r+0x44>
 8007138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800713a:	f7fc fef9 	bl	8003f30 <__retarget_lock_release_recursive>
 800713e:	e7f3      	b.n	8007128 <_vfiprintf_r+0x44>
 8007140:	2300      	movs	r3, #0
 8007142:	9309      	str	r3, [sp, #36]	@ 0x24
 8007144:	2320      	movs	r3, #32
 8007146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800714a:	2330      	movs	r3, #48	@ 0x30
 800714c:	f04f 0901 	mov.w	r9, #1
 8007150:	f8cd 800c 	str.w	r8, [sp, #12]
 8007154:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007300 <_vfiprintf_r+0x21c>
 8007158:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800715c:	4623      	mov	r3, r4
 800715e:	469a      	mov	sl, r3
 8007160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007164:	b10a      	cbz	r2, 800716a <_vfiprintf_r+0x86>
 8007166:	2a25      	cmp	r2, #37	@ 0x25
 8007168:	d1f9      	bne.n	800715e <_vfiprintf_r+0x7a>
 800716a:	ebba 0b04 	subs.w	fp, sl, r4
 800716e:	d00b      	beq.n	8007188 <_vfiprintf_r+0xa4>
 8007170:	465b      	mov	r3, fp
 8007172:	4622      	mov	r2, r4
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ffa2 	bl	80070c0 <__sfputs_r>
 800717c:	3001      	adds	r0, #1
 800717e:	f000 80a7 	beq.w	80072d0 <_vfiprintf_r+0x1ec>
 8007182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007184:	445a      	add	r2, fp
 8007186:	9209      	str	r2, [sp, #36]	@ 0x24
 8007188:	f89a 3000 	ldrb.w	r3, [sl]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 809f 	beq.w	80072d0 <_vfiprintf_r+0x1ec>
 8007192:	2300      	movs	r3, #0
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800719c:	f10a 0a01 	add.w	sl, sl, #1
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	9307      	str	r3, [sp, #28]
 80071a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80071aa:	4654      	mov	r4, sl
 80071ac:	2205      	movs	r2, #5
 80071ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b2:	4853      	ldr	r0, [pc, #332]	@ (8007300 <_vfiprintf_r+0x21c>)
 80071b4:	f7fc febd 	bl	8003f32 <memchr>
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	b9d8      	cbnz	r0, 80071f4 <_vfiprintf_r+0x110>
 80071bc:	06d1      	lsls	r1, r2, #27
 80071be:	bf44      	itt	mi
 80071c0:	2320      	movmi	r3, #32
 80071c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071c6:	0713      	lsls	r3, r2, #28
 80071c8:	bf44      	itt	mi
 80071ca:	232b      	movmi	r3, #43	@ 0x2b
 80071cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071d0:	f89a 3000 	ldrb.w	r3, [sl]
 80071d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80071d6:	d015      	beq.n	8007204 <_vfiprintf_r+0x120>
 80071d8:	4654      	mov	r4, sl
 80071da:	2000      	movs	r0, #0
 80071dc:	f04f 0c0a 	mov.w	ip, #10
 80071e0:	9a07      	ldr	r2, [sp, #28]
 80071e2:	4621      	mov	r1, r4
 80071e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e8:	3b30      	subs	r3, #48	@ 0x30
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d94b      	bls.n	8007286 <_vfiprintf_r+0x1a2>
 80071ee:	b1b0      	cbz	r0, 800721e <_vfiprintf_r+0x13a>
 80071f0:	9207      	str	r2, [sp, #28]
 80071f2:	e014      	b.n	800721e <_vfiprintf_r+0x13a>
 80071f4:	eba0 0308 	sub.w	r3, r0, r8
 80071f8:	fa09 f303 	lsl.w	r3, r9, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	46a2      	mov	sl, r4
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	e7d2      	b.n	80071aa <_vfiprintf_r+0xc6>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1d19      	adds	r1, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	9103      	str	r1, [sp, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfbb      	ittet	lt
 8007210:	425b      	neglt	r3, r3
 8007212:	f042 0202 	orrlt.w	r2, r2, #2
 8007216:	9307      	strge	r3, [sp, #28]
 8007218:	9307      	strlt	r3, [sp, #28]
 800721a:	bfb8      	it	lt
 800721c:	9204      	strlt	r2, [sp, #16]
 800721e:	7823      	ldrb	r3, [r4, #0]
 8007220:	2b2e      	cmp	r3, #46	@ 0x2e
 8007222:	d10a      	bne.n	800723a <_vfiprintf_r+0x156>
 8007224:	7863      	ldrb	r3, [r4, #1]
 8007226:	2b2a      	cmp	r3, #42	@ 0x2a
 8007228:	d132      	bne.n	8007290 <_vfiprintf_r+0x1ac>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	3402      	adds	r4, #2
 800722e:	1d1a      	adds	r2, r3, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	9203      	str	r2, [sp, #12]
 8007234:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007238:	9305      	str	r3, [sp, #20]
 800723a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007304 <_vfiprintf_r+0x220>
 800723e:	2203      	movs	r2, #3
 8007240:	4650      	mov	r0, sl
 8007242:	7821      	ldrb	r1, [r4, #0]
 8007244:	f7fc fe75 	bl	8003f32 <memchr>
 8007248:	b138      	cbz	r0, 800725a <_vfiprintf_r+0x176>
 800724a:	2240      	movs	r2, #64	@ 0x40
 800724c:	9b04      	ldr	r3, [sp, #16]
 800724e:	eba0 000a 	sub.w	r0, r0, sl
 8007252:	4082      	lsls	r2, r0
 8007254:	4313      	orrs	r3, r2
 8007256:	3401      	adds	r4, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725e:	2206      	movs	r2, #6
 8007260:	4829      	ldr	r0, [pc, #164]	@ (8007308 <_vfiprintf_r+0x224>)
 8007262:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007266:	f7fc fe64 	bl	8003f32 <memchr>
 800726a:	2800      	cmp	r0, #0
 800726c:	d03f      	beq.n	80072ee <_vfiprintf_r+0x20a>
 800726e:	4b27      	ldr	r3, [pc, #156]	@ (800730c <_vfiprintf_r+0x228>)
 8007270:	bb1b      	cbnz	r3, 80072ba <_vfiprintf_r+0x1d6>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	3307      	adds	r3, #7
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	3308      	adds	r3, #8
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007280:	443b      	add	r3, r7
 8007282:	9309      	str	r3, [sp, #36]	@ 0x24
 8007284:	e76a      	b.n	800715c <_vfiprintf_r+0x78>
 8007286:	460c      	mov	r4, r1
 8007288:	2001      	movs	r0, #1
 800728a:	fb0c 3202 	mla	r2, ip, r2, r3
 800728e:	e7a8      	b.n	80071e2 <_vfiprintf_r+0xfe>
 8007290:	2300      	movs	r3, #0
 8007292:	f04f 0c0a 	mov.w	ip, #10
 8007296:	4619      	mov	r1, r3
 8007298:	3401      	adds	r4, #1
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	4620      	mov	r0, r4
 800729e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a2:	3a30      	subs	r2, #48	@ 0x30
 80072a4:	2a09      	cmp	r2, #9
 80072a6:	d903      	bls.n	80072b0 <_vfiprintf_r+0x1cc>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0c6      	beq.n	800723a <_vfiprintf_r+0x156>
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	e7c4      	b.n	800723a <_vfiprintf_r+0x156>
 80072b0:	4604      	mov	r4, r0
 80072b2:	2301      	movs	r3, #1
 80072b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072b8:	e7f0      	b.n	800729c <_vfiprintf_r+0x1b8>
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	462a      	mov	r2, r5
 80072c0:	4630      	mov	r0, r6
 80072c2:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <_vfiprintf_r+0x22c>)
 80072c4:	a904      	add	r1, sp, #16
 80072c6:	f7fb fec7 	bl	8003058 <_printf_float>
 80072ca:	4607      	mov	r7, r0
 80072cc:	1c78      	adds	r0, r7, #1
 80072ce:	d1d6      	bne.n	800727e <_vfiprintf_r+0x19a>
 80072d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_vfiprintf_r+0x1fe>
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	059a      	lsls	r2, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_vfiprintf_r+0x1fe>
 80072dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072de:	f7fc fe27 	bl	8003f30 <__retarget_lock_release_recursive>
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	065b      	lsls	r3, r3, #25
 80072e6:	f53f af1f 	bmi.w	8007128 <_vfiprintf_r+0x44>
 80072ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072ec:	e71e      	b.n	800712c <_vfiprintf_r+0x48>
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	462a      	mov	r2, r5
 80072f4:	4630      	mov	r0, r6
 80072f6:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <_vfiprintf_r+0x22c>)
 80072f8:	a904      	add	r1, sp, #16
 80072fa:	f7fc f94b 	bl	8003594 <_printf_i>
 80072fe:	e7e4      	b.n	80072ca <_vfiprintf_r+0x1e6>
 8007300:	080084a3 	.word	0x080084a3
 8007304:	080084a9 	.word	0x080084a9
 8007308:	080084ad 	.word	0x080084ad
 800730c:	08003059 	.word	0x08003059
 8007310:	080070c1 	.word	0x080070c1

08007314 <__swbuf_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	460e      	mov	r6, r1
 8007318:	4614      	mov	r4, r2
 800731a:	4605      	mov	r5, r0
 800731c:	b118      	cbz	r0, 8007326 <__swbuf_r+0x12>
 800731e:	6a03      	ldr	r3, [r0, #32]
 8007320:	b90b      	cbnz	r3, 8007326 <__swbuf_r+0x12>
 8007322:	f7fc fceb 	bl	8003cfc <__sinit>
 8007326:	69a3      	ldr	r3, [r4, #24]
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	071a      	lsls	r2, r3, #28
 800732e:	d501      	bpl.n	8007334 <__swbuf_r+0x20>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	b943      	cbnz	r3, 8007346 <__swbuf_r+0x32>
 8007334:	4621      	mov	r1, r4
 8007336:	4628      	mov	r0, r5
 8007338:	f000 f82a 	bl	8007390 <__swsetup_r>
 800733c:	b118      	cbz	r0, 8007346 <__swbuf_r+0x32>
 800733e:	f04f 37ff 	mov.w	r7, #4294967295
 8007342:	4638      	mov	r0, r7
 8007344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	6922      	ldr	r2, [r4, #16]
 800734a:	b2f6      	uxtb	r6, r6
 800734c:	1a98      	subs	r0, r3, r2
 800734e:	6963      	ldr	r3, [r4, #20]
 8007350:	4637      	mov	r7, r6
 8007352:	4283      	cmp	r3, r0
 8007354:	dc05      	bgt.n	8007362 <__swbuf_r+0x4e>
 8007356:	4621      	mov	r1, r4
 8007358:	4628      	mov	r0, r5
 800735a:	f7ff fa4b 	bl	80067f4 <_fflush_r>
 800735e:	2800      	cmp	r0, #0
 8007360:	d1ed      	bne.n	800733e <__swbuf_r+0x2a>
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	3b01      	subs	r3, #1
 8007366:	60a3      	str	r3, [r4, #8]
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	701e      	strb	r6, [r3, #0]
 8007370:	6962      	ldr	r2, [r4, #20]
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d004      	beq.n	8007382 <__swbuf_r+0x6e>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	07db      	lsls	r3, r3, #31
 800737c:	d5e1      	bpl.n	8007342 <__swbuf_r+0x2e>
 800737e:	2e0a      	cmp	r6, #10
 8007380:	d1df      	bne.n	8007342 <__swbuf_r+0x2e>
 8007382:	4621      	mov	r1, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f7ff fa35 	bl	80067f4 <_fflush_r>
 800738a:	2800      	cmp	r0, #0
 800738c:	d0d9      	beq.n	8007342 <__swbuf_r+0x2e>
 800738e:	e7d6      	b.n	800733e <__swbuf_r+0x2a>

08007390 <__swsetup_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4b29      	ldr	r3, [pc, #164]	@ (8007438 <__swsetup_r+0xa8>)
 8007394:	4605      	mov	r5, r0
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	460c      	mov	r4, r1
 800739a:	b118      	cbz	r0, 80073a4 <__swsetup_r+0x14>
 800739c:	6a03      	ldr	r3, [r0, #32]
 800739e:	b90b      	cbnz	r3, 80073a4 <__swsetup_r+0x14>
 80073a0:	f7fc fcac 	bl	8003cfc <__sinit>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	0719      	lsls	r1, r3, #28
 80073aa:	d422      	bmi.n	80073f2 <__swsetup_r+0x62>
 80073ac:	06da      	lsls	r2, r3, #27
 80073ae:	d407      	bmi.n	80073c0 <__swsetup_r+0x30>
 80073b0:	2209      	movs	r2, #9
 80073b2:	602a      	str	r2, [r5, #0]
 80073b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	e033      	b.n	8007428 <__swsetup_r+0x98>
 80073c0:	0758      	lsls	r0, r3, #29
 80073c2:	d512      	bpl.n	80073ea <__swsetup_r+0x5a>
 80073c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073c6:	b141      	cbz	r1, 80073da <__swsetup_r+0x4a>
 80073c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073cc:	4299      	cmp	r1, r3
 80073ce:	d002      	beq.n	80073d6 <__swsetup_r+0x46>
 80073d0:	4628      	mov	r0, r5
 80073d2:	f7fd fc1d 	bl	8004c10 <_free_r>
 80073d6:	2300      	movs	r3, #0
 80073d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	2300      	movs	r3, #0
 80073e4:	6063      	str	r3, [r4, #4]
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	b94b      	cbnz	r3, 800740a <__swsetup_r+0x7a>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007400:	d003      	beq.n	800740a <__swsetup_r+0x7a>
 8007402:	4621      	mov	r1, r4
 8007404:	4628      	mov	r0, r5
 8007406:	f000 f882 	bl	800750e <__smakebuf_r>
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	f013 0201 	ands.w	r2, r3, #1
 8007412:	d00a      	beq.n	800742a <__swsetup_r+0x9a>
 8007414:	2200      	movs	r2, #0
 8007416:	60a2      	str	r2, [r4, #8]
 8007418:	6962      	ldr	r2, [r4, #20]
 800741a:	4252      	negs	r2, r2
 800741c:	61a2      	str	r2, [r4, #24]
 800741e:	6922      	ldr	r2, [r4, #16]
 8007420:	b942      	cbnz	r2, 8007434 <__swsetup_r+0xa4>
 8007422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007426:	d1c5      	bne.n	80073b4 <__swsetup_r+0x24>
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	0799      	lsls	r1, r3, #30
 800742c:	bf58      	it	pl
 800742e:	6962      	ldrpl	r2, [r4, #20]
 8007430:	60a2      	str	r2, [r4, #8]
 8007432:	e7f4      	b.n	800741e <__swsetup_r+0x8e>
 8007434:	2000      	movs	r0, #0
 8007436:	e7f7      	b.n	8007428 <__swsetup_r+0x98>
 8007438:	20000020 	.word	0x20000020

0800743c <_raise_r>:
 800743c:	291f      	cmp	r1, #31
 800743e:	b538      	push	{r3, r4, r5, lr}
 8007440:	4605      	mov	r5, r0
 8007442:	460c      	mov	r4, r1
 8007444:	d904      	bls.n	8007450 <_raise_r+0x14>
 8007446:	2316      	movs	r3, #22
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007452:	b112      	cbz	r2, 800745a <_raise_r+0x1e>
 8007454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007458:	b94b      	cbnz	r3, 800746e <_raise_r+0x32>
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f830 	bl	80074c0 <_getpid_r>
 8007460:	4622      	mov	r2, r4
 8007462:	4601      	mov	r1, r0
 8007464:	4628      	mov	r0, r5
 8007466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746a:	f000 b817 	b.w	800749c <_kill_r>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d00a      	beq.n	8007488 <_raise_r+0x4c>
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	d103      	bne.n	800747e <_raise_r+0x42>
 8007476:	2316      	movs	r3, #22
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	2001      	movs	r0, #1
 800747c:	e7e7      	b.n	800744e <_raise_r+0x12>
 800747e:	2100      	movs	r1, #0
 8007480:	4620      	mov	r0, r4
 8007482:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007486:	4798      	blx	r3
 8007488:	2000      	movs	r0, #0
 800748a:	e7e0      	b.n	800744e <_raise_r+0x12>

0800748c <raise>:
 800748c:	4b02      	ldr	r3, [pc, #8]	@ (8007498 <raise+0xc>)
 800748e:	4601      	mov	r1, r0
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	f7ff bfd3 	b.w	800743c <_raise_r>
 8007496:	bf00      	nop
 8007498:	20000020 	.word	0x20000020

0800749c <_kill_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	2300      	movs	r3, #0
 80074a0:	4d06      	ldr	r5, [pc, #24]	@ (80074bc <_kill_r+0x20>)
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	602b      	str	r3, [r5, #0]
 80074aa:	f7f9 ffc0 	bl	800142e <_kill>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d102      	bne.n	80074b8 <_kill_r+0x1c>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	b103      	cbz	r3, 80074b8 <_kill_r+0x1c>
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd38      	pop	{r3, r4, r5, pc}
 80074ba:	bf00      	nop
 80074bc:	20000798 	.word	0x20000798

080074c0 <_getpid_r>:
 80074c0:	f7f9 bfae 	b.w	8001420 <_getpid>

080074c4 <__swhatbuf_r>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	460c      	mov	r4, r1
 80074c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074cc:	4615      	mov	r5, r2
 80074ce:	2900      	cmp	r1, #0
 80074d0:	461e      	mov	r6, r3
 80074d2:	b096      	sub	sp, #88	@ 0x58
 80074d4:	da0c      	bge.n	80074f0 <__swhatbuf_r+0x2c>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	2100      	movs	r1, #0
 80074da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074de:	bf14      	ite	ne
 80074e0:	2340      	movne	r3, #64	@ 0x40
 80074e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074e6:	2000      	movs	r0, #0
 80074e8:	6031      	str	r1, [r6, #0]
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	b016      	add	sp, #88	@ 0x58
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	466a      	mov	r2, sp
 80074f2:	f000 f849 	bl	8007588 <_fstat_r>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	dbed      	blt.n	80074d6 <__swhatbuf_r+0x12>
 80074fa:	9901      	ldr	r1, [sp, #4]
 80074fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007500:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007504:	4259      	negs	r1, r3
 8007506:	4159      	adcs	r1, r3
 8007508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800750c:	e7eb      	b.n	80074e6 <__swhatbuf_r+0x22>

0800750e <__smakebuf_r>:
 800750e:	898b      	ldrh	r3, [r1, #12]
 8007510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007512:	079d      	lsls	r5, r3, #30
 8007514:	4606      	mov	r6, r0
 8007516:	460c      	mov	r4, r1
 8007518:	d507      	bpl.n	800752a <__smakebuf_r+0x1c>
 800751a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	2301      	movs	r3, #1
 8007524:	6163      	str	r3, [r4, #20]
 8007526:	b003      	add	sp, #12
 8007528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752a:	466a      	mov	r2, sp
 800752c:	ab01      	add	r3, sp, #4
 800752e:	f7ff ffc9 	bl	80074c4 <__swhatbuf_r>
 8007532:	9f00      	ldr	r7, [sp, #0]
 8007534:	4605      	mov	r5, r0
 8007536:	4639      	mov	r1, r7
 8007538:	4630      	mov	r0, r6
 800753a:	f7fd fbdb 	bl	8004cf4 <_malloc_r>
 800753e:	b948      	cbnz	r0, 8007554 <__smakebuf_r+0x46>
 8007540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007544:	059a      	lsls	r2, r3, #22
 8007546:	d4ee      	bmi.n	8007526 <__smakebuf_r+0x18>
 8007548:	f023 0303 	bic.w	r3, r3, #3
 800754c:	f043 0302 	orr.w	r3, r3, #2
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	e7e2      	b.n	800751a <__smakebuf_r+0xc>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800755a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	6020      	str	r0, [r4, #0]
 8007564:	b15b      	cbz	r3, 800757e <__smakebuf_r+0x70>
 8007566:	4630      	mov	r0, r6
 8007568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756c:	f000 f81e 	bl	80075ac <_isatty_r>
 8007570:	b128      	cbz	r0, 800757e <__smakebuf_r+0x70>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f023 0303 	bic.w	r3, r3, #3
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	431d      	orrs	r5, r3
 8007582:	81a5      	strh	r5, [r4, #12]
 8007584:	e7cf      	b.n	8007526 <__smakebuf_r+0x18>
	...

08007588 <_fstat_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	2300      	movs	r3, #0
 800758c:	4d06      	ldr	r5, [pc, #24]	@ (80075a8 <_fstat_r+0x20>)
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	f7f9 ffa9 	bl	80014ec <_fstat>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	d102      	bne.n	80075a4 <_fstat_r+0x1c>
 800759e:	682b      	ldr	r3, [r5, #0]
 80075a0:	b103      	cbz	r3, 80075a4 <_fstat_r+0x1c>
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	bd38      	pop	{r3, r4, r5, pc}
 80075a6:	bf00      	nop
 80075a8:	20000798 	.word	0x20000798

080075ac <_isatty_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	2300      	movs	r3, #0
 80075b0:	4d05      	ldr	r5, [pc, #20]	@ (80075c8 <_isatty_r+0x1c>)
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	f7f9 ffa7 	bl	800150a <_isatty>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_isatty_r+0x1a>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_isatty_r+0x1a>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	20000798 	.word	0x20000798

080075cc <_init>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr

080075d8 <_fini>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr
